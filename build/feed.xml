<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Matt Greer</title>
    <atom:link href="http://mattgreer.org/feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <link>http://mattgreer.org</link>
    <description>Me talking about software and programming</description>
    <pubDate>Sat, 22 Jul 2017 17:00:00 -0700</pubDate>
    <generator>Wintersmith - https://github.com/jnordberg/wintersmith</generator>
    <language>en</language>
    <item>
      <title>React Internals, Part Four: setState</title>
      <link>http://mattgreer.org/articles/react-internals-part-four-setState/</link>
      <pubDate>Sat, 22 Jul 2017 17:00:00 -0700</pubDate>
      <guid isPermaLink="true">http://mattgreer.org/articles/react-internals-part-four-setState/</guid>
      <author></author>
      <description>&lt;p&gt;In part four of this series we finally add &lt;code&gt;setState&lt;/code&gt; to our little React clone. &lt;code&gt;setState&lt;/code&gt; is a beast, so grab your favorite beverage and get comfortable!&lt;/p&gt;
&lt;h2 id=&quot;the-series&quot;&gt;The series&lt;/h2&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;http://mattgreer.org/articles/react-internals-part-one-basic-rendering&quot;&gt;part one: basic rendering&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://mattgreer.org/articles/react-internals-part-two-componentWillMount-and-componentDidMount/&quot;&gt;part two: componentWillMount and componentDidMount&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://mattgreer.org/articles/react-internals-part-three-basic-updating&quot;&gt;part three: basic updating&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;part four: setState&lt;/strong&gt; &amp;lt;- you are here&lt;/li&gt;
    &lt;li&gt;part five: transactions &lt;em&gt;coming soon!&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;adding-state-to-feact&quot;&gt;Adding state to Feact&lt;/h2&gt;
&lt;p&gt;State and props are very similar in that they are both data and both influence how and when a component renders. The core difference is props come from an outside source, where state is entirely internal to the component. So far Feact only supports props, so before we can implement &lt;code&gt;setState&lt;/code&gt; we need to add the notion of state itself to the framework.&lt;/p&gt;
&lt;h3 id=&quot;getinitialstate&quot;&gt;getInitialState&lt;/h3&gt;
&lt;p&gt;When mounting a fresh component, we need to set up its initial state, that’s where this lifecycle method comes in. It’s just called when a component is getting instantiated, so we need to hook into this method in the constructor function that &lt;code&gt;Feact.createClass&lt;/code&gt; creates&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Feact = {
    createClass(spec) {
        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Constructor&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;props&lt;/span&gt;) &lt;/span&gt;{
            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props = props;

            &lt;span class=&quot;comment&quot;&gt;// new lines added for state&lt;/span&gt;
            &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; initialState = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.getInitialState ?
                &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.getInitialState() :
                &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;;
            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state = initialState;
        }

        Constructor.prototype =
            &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign(Constructor.prototype, spec);

        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Constructor;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Just like props, we set the state on the instance.&lt;/p&gt;
&lt;div class=&quot;callout pitfall&quot;&gt;
Notice if the component does not have &lt;code&gt;getInitialState&lt;/code&gt; defined, the initial state will be &lt;code&gt;null&lt;/code&gt;?
React won’t default initial state to an empty object, so if you want to use state, chances are you
need to implement this method and return an object, otherwise your first render will blow up if it
tries to do &lt;code&gt;this.state.foo&lt;/code&gt;
&lt;/div&gt;

&lt;p&gt;Now with &lt;code&gt;getInitialState&lt;/code&gt; defined, Feact components can start using &lt;code&gt;this.state&lt;/code&gt; whenever they’d like.&lt;/p&gt;
&lt;h2 id=&quot;adding-a-simple-setstate-&quot;&gt;Adding a simple setState()&lt;/h2&gt;
&lt;p&gt;Whenever a component wants to update, it needs to tell Feact “hey, I’d like to render again!”, and &lt;code&gt;this.setState()&lt;/code&gt; is the primary way to accomplish that. &lt;code&gt;setState&lt;/code&gt; updates &lt;code&gt;this.state&lt;/code&gt;, and triggers a render, which will send the component through the lifecycle methods &lt;code&gt;shouldComponentUpdate&lt;/code&gt; -&amp;gt; &lt;code&gt;componentWillUpdate&lt;/code&gt; -&amp;gt; &lt;code&gt;render&lt;/code&gt; -&amp;gt; &lt;code&gt;componentDidUpdate&lt;/code&gt; (which Feact doesn’t have, but of course React does). &lt;/p&gt;
&lt;h3 id=&quot;defining-setstate-on-the-component&quot;&gt;Defining setState on the component&lt;/h3&gt;
&lt;p&gt;Again we need to tweak &lt;code&gt;Feact.createClass&lt;/code&gt; to get setState in place. To do this, we’ll give all classes created this way a prototype, and this prototype will have &lt;code&gt;setState&lt;/code&gt; defined&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FeactComponent&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
}

FeactComponent.prototype.setState = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;comment&quot;&gt;// to be implemented later&lt;/span&gt;
};

&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;mixSpecIntoComponent&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;Constructor, spec&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; proto = Constructor.prototype;

    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; key &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; spec) {
        proto[key] = spec[key];
    }
}

&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Feact = {
    createClass(spec) {
        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Constructor&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;props&lt;/span&gt;) &lt;/span&gt;{
            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props = props;

            &lt;span class=&quot;comment&quot;&gt;// new lines added for state&lt;/span&gt;
            &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; initialState = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.getInitialState ?
                &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.getInitialState() :
                &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;;
            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state = initialState;
        }

        Constructor.prototype = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FeactComponent();

        mixSpecIntoComponent(Constructor, spec);
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Constructor;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Prototypical inheritance in action. &lt;code&gt;mixSpecIntoComponent&lt;/code&gt; in React is more complicated (and robust), dealing with things like mixins and making sure users don’t accidentally clobber a React method.&lt;/p&gt;
&lt;h3 id=&quot;threading-setstate-over-to-updatecomponent&quot;&gt;Threading setState over to updateComponent&lt;/h3&gt;
&lt;p&gt;Back in &lt;a href=&quot;http://mattgreer.org/articles/react-internals-part-three-basic-updating&quot;&gt;part three&lt;/a&gt; we updated a component by calling &lt;code&gt;FeactCompositeComponentWrapper#receiveComponent&lt;/code&gt;, which in turn called &lt;code&gt;updateComponent&lt;/code&gt;. It makes sense to not repeat ourselves, so we should thread state updates through &lt;code&gt;updateComponent&lt;/code&gt; too. We need to get all the way from &lt;code&gt;FeactComponent.prototype.setState&lt;/code&gt; to &lt;code&gt;FeactCompositeComponentWrapper#updateComponent&lt;/code&gt;. Currently Feact has no means of accomplishing this.&lt;/p&gt;
&lt;p&gt;In React, there is the notion of “public instances” and “internal instances”. Public instances are the objects that get created from the classes defined with &lt;code&gt;createClass&lt;/code&gt;, and internal instances are the objects that React internally creates. In this scenario the internal instance is the &lt;code&gt;FeactCompositeComponentWrapper&lt;/code&gt; that the framework created. The internal instance knows about the public instance, since it wraps it. But the relationship doesn’t go in the opposite direction, yet now it needs to. Here &lt;code&gt;setState&lt;/code&gt; is the public instance attempting to communicate with the internal instance, so with that in mind, let’s take a stab at implementing &lt;code&gt;setState&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FeactComponent&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
}

FeactComponent.prototype.setState = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;partialState&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; internalInstance = getMyInternalInstancePlease(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);

    internalInstance._pendingPartialState = partialState;

    FeactReconciler.performUpdateIfNecessary(internalInstance);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;React solves the “get my internal instance” problem with an instance map, which really just stores the internal instance on the public instance&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; FeactInstanceMap = {
    set(key, value) {
        key.__feactInternalInstance = value;
    },

    get(key) {
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; key.__feactInternalInstance;
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’ll set up this relationship while mounting&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FeactCompositeComponentWrapper&lt;/span&gt; &lt;/span&gt;{
    ...
    mountComponent(container) {
        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Component = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._currentElement.type;
        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; componentInstance =
            &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Component(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._currentElement.props);
        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._instance = componentInstance;

        FeactInstanceMap.set(componentInstance, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);
        ...
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have one other unimplemented method, &lt;code&gt;FeactReconciler.performUpdateIfNecessary&lt;/code&gt;, but just like other reconciler methods, it will just delegate to the instance&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; FeactReconciler = {
    ...
    performUpdateIfNecessary(internalInstance) {
        internalInstance.performUpdateIfNecessary();
    }
    ...
}

&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FeactCompositeComponentWrapper&lt;/span&gt; &lt;/span&gt;{
    ...
    performUpdateIfNecessary() {
        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.updateComponent(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._currentElement, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._currentElement);
    }
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we are calling &lt;code&gt;updateComponent&lt;/code&gt;! Notice we seem to be cheating a little bit. We are saying to update the component, but with the same element being used as both previous and next. Whenever &lt;code&gt;updateComponent&lt;/code&gt; is called with the same element, then React knows only state is getting updated, otherwise props are updating. React will decide whether to call &lt;code&gt;componentWillReceiveProps&lt;/code&gt; based on &lt;code&gt;prevElement !== nextElement&lt;/code&gt;, so let’s go ahead and throw that into Feact too&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FeactCompositeComponentWrapper&lt;/span&gt; &lt;/span&gt;{
    ...
    updateComponent(prevElement, nextElement) {
        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; nextProps = nextElement.props;
        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; inst = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._instance;

        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; willReceive = prevElement !== nextElement;

        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (willReceive &amp;amp;&amp;amp; inst.componentWillReceiveProps) {
            inst.componentWillReceiveProps(nextProps);
        }
        ...
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That isn’t the entirety of &lt;code&gt;updateComponent&lt;/code&gt;, (check the fiddle at the end of the article for all the code), just enough to show that calling &lt;code&gt;setState()&lt;/code&gt; does not cause &lt;code&gt;componentWillReceiveProps&lt;/code&gt; to get called before the render happens. Which does make sense, &lt;code&gt;setState&lt;/code&gt; has no means of influencing props, just state.&lt;/p&gt;
&lt;div class=&quot;callout wisdom&quot;&gt;
If you want a heads up on every render, whether caused by prop changes or state changes, then implement &lt;code&gt;componentWillUpdate&lt;/code&gt; in your component. We won’t add it to Feact since this blog series is already too long, but it’s called right before a render, no matter what caused the render. The only exception is the first render, where you can hook into &lt;code&gt;componentWillMount&lt;/code&gt; instead.
&lt;/div&gt;


&lt;h3 id=&quot;updating-with-the-new-state&quot;&gt;Updating with the new state&lt;/h3&gt;
&lt;p&gt;If you trace through the code we’ve written so far, you’ll see we’re now hanging out in &lt;code&gt;updateComponent&lt;/code&gt;, &lt;em&gt;and&lt;/em&gt; the internal instance has the pending partial state waiting to be used at &lt;code&gt;internalInstance._pendingPartialState&lt;/code&gt;. Now all we need to do is have the component render again – this time with state –, then from there actually getting the update all the way into the DOM is the same procedure as done back in part three&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FeactCompositeComponentWrapper&lt;/span&gt; &lt;/span&gt;{
    ...
    updateComponent(prevElement, nextElement) {
        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; nextProps = nextElement.props;
        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; inst = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._instance;

        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; willReceive = prevElement !== nextElement;

        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (willReceive &amp;amp;&amp;amp; inst.componentWillReceiveProps) {
            inst.componentWillReceiveProps(nextProps);
        }

        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; shouldUpdate = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;
        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; nextState =
            &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign({}, inst.state, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._pendingPartialState);
        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._pendingPartialState = &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;;

        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (inst.shouldComponentUpdate) {
            shouldUpdate =
                inst.shouldComponentUpdate(nextProps, nextState);
        }

        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (shouldUpdate) {
            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._performComponentUpdate(
                nextElement, nextProps, nextState
            );
        } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {
            inst.props = nextProps;
            inst.state = nextState;
        }
    }

    _performComponentUpdate(nextElement, nextProps, nextState) {
        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._currentElement = nextElement;
        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; inst = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._instance;

        inst.props = nextProps;
        inst.state = nextState;

        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._updateRenderedComponent();
    }

    _updateRenderedComponent() {
        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; prevComponentInstance = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._renderedComponent;
        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; inst = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._instance;
        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; nextRenderedElement = inst.render();

        FeactReconciler.receiveComponent(
            prevComponentInstance,
            nextRenderedElement
        );
    }
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This updating of the component is almost identical to part three, with the exception of the added state of course. Since state just sits on the public instance at &lt;code&gt;this.state&lt;/code&gt;, &lt;code&gt;_performComponentUpdate&lt;/code&gt; only had a one line change and &lt;code&gt;_updateRenderedComponent&lt;/code&gt; had no change at all. The real key change was in the middle of &lt;code&gt;updateComponent&lt;/code&gt; where we merge the previous state with the new partial state, and this partial state originated way back in &lt;code&gt;this.setState()&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;all-done-right-&quot;&gt;All done! … right?&lt;/h3&gt;
&lt;p&gt;Phew, we now have &lt;code&gt;setState&lt;/code&gt;! Here is a fiddle of what we have so far&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;fiddle&quot; href=&quot;https://jsfiddle.net/city41/jth636nz/2/&quot; target=&quot;_blank&quot;&gt;fiddle&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But Feact’s setState is a bit simple, not performant and could even be a little surprising. The main problem is every distinct call to &lt;code&gt;setState&lt;/code&gt; causes the component to render. This forces the user to either figure out how to fit all their changes into one call, or accept that each call will render. It’d be better if the programmer could call &lt;code&gt;setState&lt;/code&gt; when it’s convenient, and let the framework batch the calls when it can, resulting in fewer renders.&lt;/p&gt;
&lt;h2 id=&quot;batching-setstate-calls&quot;&gt;Batching setState calls&lt;/h2&gt;
&lt;p&gt;If you take a look at Feact’s render lifecycle, you can see we call &lt;code&gt;componentWillReceiveProps&lt;/code&gt; just before we’re about to render. What if inside &lt;code&gt;componentWillReceiveProps&lt;/code&gt; the user was to call &lt;code&gt;setState&lt;/code&gt;? Currently in Feact, that’d cause it to go ahead and start a second render, while in the middle of the first render! That doesn’t sound good. Not to mention, responding to incoming props by updating your state is a common need. It makes sense to expect your state update and the new props to all flow into the same render, otherwise you’d get an intermediate render with only the state change, then the final render with both state and props change, which would probably be unexpected.&lt;/p&gt;
&lt;div class=&quot;callout wisdom&quot;&gt;
&lt;div&gt;Here is a fiddle that demonstrates this&lt;/div&gt;

&lt;p&gt;&lt;a class=&quot;fiddle&quot; href=&quot;https://jsfiddle.net/city41/62edejvz/2/&quot; target=&quot;_blank&quot;&gt;fiddle&lt;/a&gt;&lt;/p&gt;
&lt;div&gt;Depending on your browser, you might not be able to see the second render. But if you open the debugger and place a &lt;code&gt;debugger;&lt;/code&gt; statement in &lt;code&gt;FeactDOMComponent#_updateTextContent&lt;/code&gt;, you should be able to see how Feact naively does three renders when it should have been just two.&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;batching-step-one-a-place-to-store-the-batched-state-changes&quot;&gt;batching step one, a place to store the batched state changes&lt;/h3&gt;
&lt;p&gt;We need a place to store more than one state update, so we will change &lt;code&gt;_pendingPartialState&lt;/code&gt; into an array&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function FeactComponent() {
}

FeactComponent.prototype.setState = function(partialState) {
    const internalInstance = FeactInstanceMap.get(this);

    internalInstance._pendingPartialState =
        internalInstance._pendingPartialState || [];

    internalInstance._pendingPartialState.push(partialState);
    ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Over in &lt;code&gt;updateComponent&lt;/code&gt;, let’s pull the state processing out into its own method&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FeactCompositeComponentWrapper&lt;/span&gt; &lt;/span&gt;{
    ...
    updateComponent(prevElement, nextElement) {
        ...
        const nextState = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._processPendingState();
        ...
    }

    _processPendingState() {
        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; inst = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._instance;
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._pendingPartialState) {
            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; inst.state;
        }

        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; nextState = inst.state;

        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._pendingPartialState.length; ++i) {
            nextState =
                &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign(nextState, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._pendingPartialState[i]);
        }

        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._pendingPartialState = &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;;
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; nextState;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;batching-step-two-batching-up-the-state-changes-into-one-render&quot;&gt;batching step two, batching up the state changes into one render&lt;/h3&gt;
&lt;div class=&quot;callout pitfall&quot;&gt;
The batching mechanism we’re about to add to Feact is very simple and not at all what React does. The point is to just show the general idea of how batching works (and later, show why it can make &lt;code&gt;setState&lt;/code&gt; tricky).
&lt;/div&gt;

&lt;p&gt;For Feact, we will batch updates while rendering, otherwise, we won’t batch them. So during &lt;code&gt;updateComponent&lt;/code&gt;, we just set a flag that tells the world we are rendering, then unset it at the end. If &lt;code&gt;setState&lt;/code&gt; sees we are rendering, it will set the pending state, but not cause a new render, as it knows the current render that is going on will pick up this state change&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FeactCompositeComponentWrapper&lt;/span&gt; &lt;/span&gt;{
    ...
    updateComponent(prevElement, nextElement) {
        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._rendering = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;

        &lt;span class=&quot;comment&quot;&gt;// entire rest of the method&lt;/span&gt;

        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._rendering = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;
    }
}

&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FeactComponent&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
}

FeactComponent.prototype.setState = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;partialState&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; internalInstance = FeactInstanceMap.get(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);

    internalInstance._pendingPartialState =
        internalInstance._pendingPartialState || [];

    internalInstance.push(partialState);

    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!internalInstance._rendering) {
        FeactReconciler.performUpdateIfNecessary(internalInstance);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;wrapping-it-up&quot;&gt;wrapping it up&lt;/h2&gt;
&lt;p&gt;Here is a fiddle that contains the final version of Feact&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;fiddle&quot; href=&quot;https://jsfiddle.net/city41/fbw81p5e/5/&quot; target=&quot;_blank&quot;&gt;fiddle&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It contains the simple batching, so it will only render twice (whereas the previous fiddle above rendered three times).&lt;/p&gt;
&lt;h3 id=&quot;setstate-pitfalls&quot;&gt;setState pitfalls&lt;/h3&gt;
&lt;p&gt;Now that we understand how setState works and the overall concept on how batching works, we can see there are some pitfalls in &lt;code&gt;setState&lt;/code&gt;. The problem is it takes several steps to update a component’s state, as each pending partial state needs to get applied one by one. That means using &lt;code&gt;this.state&lt;/code&gt; when setting state is dangerous&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;componentWillReceiveProps(nextProps) {
    this.setState({ counter: this.state.counter + 1 });
    this.setState({ counter: this.state.counter + 1 });
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This contrived example shows what I mean. You might expect counter to get 2 added to it, but since states are being batched up, the second call to &lt;code&gt;setState&lt;/code&gt; has the same values for &lt;code&gt;this.state&lt;/code&gt; as the first call, so counter will only get incremented once.&lt;/p&gt;
&lt;p&gt;React solves this problem by allowing a callback to be passed into &lt;code&gt;setState&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;componentWillReceiveProps(nextProps) {
    this.setState((currentState) =&amp;gt; ({
        counter: currentState.counter + 1
    });
    this.setState((currentState) =&amp;gt; ({
        counter: currentState.counter + 1
    });
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;By using the callback flavor of &lt;code&gt;setState&lt;/code&gt;, you get access to the intermediate values state works through. If Feact were to implement this, it’d look like&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;_processPendingState() {
    const inst = this._instance;
    if (!this._pendingPartialState) {
        return inst.state;
    }

    let nextState = inst.state;

    for (let i = 0; i &amp;lt; this._pendingPartialState.length; ++i) {
        const partialState = this._pendingPartialState[i];

        if (typeof partialState === &amp;#39;function&amp;#39;) {
            nextState = partialState(nextState);
        } else {
            nextState = Object.assign(nextState, patialState);
        }
    }

    this._pendingPartialState = null;
    return nextState;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can see how the callback gets access to the intermediate values of &lt;code&gt;nextState&lt;/code&gt; as we work our way through all the pending changes.&lt;/p&gt;
&lt;h2 id=&quot;up-next&quot;&gt;Up Next&lt;/h2&gt;
&lt;p&gt;If you’ve read this far then holy cow, thanks! Feel free to &lt;a href=&quot;mailto:matt.e.greer@gmail.com&quot;&gt;email me&lt;/a&gt; if you have any feedback.&lt;/p&gt;
&lt;p&gt;Part five is just around the corner. It will go over React’s transactions and wrap the whole shebang up. Stay tuned.&lt;/p&gt;
&lt;p&gt;Here is the final fiddle for Feact one more time:&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;fiddle&quot; href=&quot;https://jsfiddle.net/city41/fbw81p5e/5/&quot; target=&quot;_blank&quot;&gt;fiddle&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>React Internals, Part Three: basic updating</title>
      <link>http://mattgreer.org/articles/react-internals-part-three-basic-updating/</link>
      <pubDate>Sat, 15 Jul 2017 17:00:00 -0700</pubDate>
      <guid isPermaLink="true">http://mattgreer.org/articles/react-internals-part-three-basic-updating/</guid>
      <author></author>
      <description>&lt;p&gt;In &lt;a href=&quot;http://mattgreer.org/articles/react-internals-part-one-basic-rendering&quot;&gt;part one&lt;/a&gt;, our small React clone, Feact, was implemented far enough to do basic rendering. But once the render happens, that was it. In this part, we’ll add the ability to make changes to the app with subsequent renders. This part will begin to show how the virtual DOM diffing works.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;the-series&quot;&gt;The series&lt;/h2&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;http://mattgreer.org/articles/react-internals-part-one-basic-rendering&quot;&gt;part one: basic rendering&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://mattgreer.org/articles/react-internals-part-two-componentWillMount-and-componentDidMount&quot;&gt;part two: componentWillMount and componentDidMount&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;part three: basic updating&lt;/strong&gt; &amp;lt;- you are here&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://mattgreer.org/articles/react-internals-part-four-setState&quot;&gt;part four: setState&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;part five: transactions &lt;em&gt;coming soon!&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;simple-updating&quot;&gt;Simple updating&lt;/h2&gt;
&lt;p&gt;Calling &lt;code&gt;setState()&lt;/code&gt; in a component is the primary way people cause their React apps to update. But React also supports updating through &lt;code&gt;React.render()&lt;/code&gt;. Take this contrived example&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;React.render(&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;hello&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;, root);

setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
    React.render(&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;hello again&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;, root);
}, &lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’ll ignore &lt;code&gt;setState()&lt;/code&gt; for now (that’s coming in &lt;a href=&quot;http://mattgreer.org/articles/react-internals-part-four-setState&quot;&gt;part four&lt;/a&gt;) and instead implement updates through &lt;code&gt;Feact.render()&lt;/code&gt;. Truth be told, this is simply “props have changed so update”, which also happens if you render again and pass different props down to a child component. We just happen to be causing the props change through &lt;code&gt;Feact.render()&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;doing-the-update&quot;&gt;Doing the update&lt;/h2&gt;
&lt;p&gt;The concept is pretty simple, &lt;code&gt;Feact.render()&lt;/code&gt; just needs to check if it has rendered before, and if so, update the page instead of starting fresh.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Feact = {
    ...
    render(element, container) {
        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; prevComponent =
            getTopLevelComponentInContainer(container);

        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (prevComponent) {
            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; updateRootComponent(
                prevComponent,
                element
            );
        } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {
            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; renderNewRootComponent(element, container);
        }
    }
    ...
}

&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;renderNewRootComponent&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;element, container&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; wrapperElement =
        Feact.createElement(TopLevelWrapper, element);

    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; componentInstance =
        &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FeactCompositeComponentWrapper(wrapperElement);

    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; FeactReconciler.mountComponent(
        componentInstance,
        container
    );
}

&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getTopLevelComponentInContainer&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;container&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;comment&quot;&gt;// need to figure this out&lt;/span&gt;
}

&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;updateRootComponent&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;prevComponent, nextElement&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;comment&quot;&gt;// need to figure this out too&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is looking pretty promising. If we rendered before, then take the state of the previous render, grab the new desired state, and pass that off to a function that will figure out what DOM updates need to happen to update the app. Otherwise if there’s no signs of a previous render, then render into the DOM exactly how we did in part one and two.&lt;/p&gt;
&lt;p&gt;We just need to figure out the two missing pieces.&lt;/p&gt;
&lt;h2 id=&quot;remembering-what-we-did&quot;&gt;Remembering what we did&lt;/h2&gt;
&lt;p&gt;For each render, We need to store the components we created, so we can refer to them in a subsequent render. Where to store them? Why not on the DOM nodes they create?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;renderNewRootComponent&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;element, container&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; wrapperElement =
        Feact.createElement(TopLevelWrapper, element);

    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; componentInstance =
        &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FeactCompositeComponentWrapper(wrapperElement);


    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; markUp = FeactReconciler.mountComponent(
        componentInstance,
        container
    );

    &lt;span class=&quot;comment&quot;&gt;// new line here, store the component instance on the container&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;// we want its _renderedComponent because componentInstance is just&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;// the TopLevelWrapper, which we don't need for updates&lt;/span&gt;
    container.__feactComponentInstance =
        componentInstance._renderedComponent;

    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; markUp;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Well, that was easy. Similarly retrieving the stashed component is easy too:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getTopLevelComponentInContainer&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;container&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; container.__feactComponentInstance;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;updating-to-the-new-state&quot;&gt;Updating to the new state&lt;/h2&gt;
&lt;p&gt;This is the simple example we are working through&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;Feact.render(
    Feact.createElement(&lt;span class=&quot;string&quot;&gt;'h1'&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'hello'&lt;/span&gt;),
    root
);

setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
    Feact.render(
        Feact.createElement(&lt;span class=&quot;string&quot;&gt;'h1'&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'hello again'&lt;/span&gt;),
        root
    );
}, &lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2 seconds has elapsed, so we are now calling &lt;code&gt;Feact.render()&lt;/code&gt; again, but this time with an element that looks like&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;{
    &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;'h1'&lt;/span&gt;,
    &lt;span class=&quot;attr&quot;&gt;props&lt;/span&gt;: {
        &lt;span class=&quot;attr&quot;&gt;children&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;'hello again'&lt;/span&gt;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since Feact determined this is an update, we ended up in &lt;code&gt;updateRootComponent&lt;/code&gt;, which is just going to delegate to the component&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;updateRootComponent&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;prevComponent, nextElement&lt;/span&gt;) &lt;/span&gt;{
    prevComponent.receiveComponent(nextElement)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice a new component is not getting created. &lt;code&gt;prevComponent&lt;/code&gt; is the component that got created during the first render, and now it’s going to take a new element and update itself with it. Components get created once at mount, and live on until unmount (which, does make sense…)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FeactDOMComponent&lt;/span&gt; &lt;/span&gt;{
    ...
    receiveComponent(nextElement) {
        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; prevElement = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._currentElement;
        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.updateComponent(prevElement, nextElement);
    }

    updateComponent(prevElement, nextElement) {
        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; lastProps = prevElement.props;
        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; nextProps = nextElement.props;

        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._updateDOMProperties(lastProps, nextProps);
        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._updateDOMChildren(lastProps, nextProps);

        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._currentElement = nextElement;
    }

    _updateDOMProperties(lastProps, nextProps) {
        &lt;span class=&quot;comment&quot;&gt;// nothing to do! I'll explain why below&lt;/span&gt;
    }

    _updateDOMChildren(lastProps, nextProps) {
        &lt;span class=&quot;comment&quot;&gt;// finally, the component can update the DOM here&lt;/span&gt;
        &lt;span class=&quot;comment&quot;&gt;// we'll implement this next&lt;/span&gt;
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;receiveComponent&lt;/code&gt; just sets up updateComponent, which ultimately calls &lt;code&gt;_updateDOMProperties&lt;/code&gt; and &lt;code&gt;_updateDOMChildren&lt;/code&gt; which are the meaty functions which will finally cause the actual DOM to get updated. &lt;code&gt;_updateDOMProperties&lt;/code&gt; is mostly concerned with updating CSS styles. We’re not going to implement it in this blog post series, but just pointing it out as that is the method React uses to deal with style changes.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;_updateDOMChildren&lt;/code&gt; in React this method is pretty complex, handling a lot of different scenarios. But in &lt;code&gt;Feact&lt;/code&gt; the children is just the text contents of the DOM element, in this case the children will go from &lt;code&gt;&amp;quot;hello&amp;quot;&lt;/code&gt; to &lt;code&gt;&amp;quot;hello again&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FeactDOMComponent&lt;/span&gt; &lt;/span&gt;{
    ...
    _updateDOMChildren(lastProps, nextProps) {
        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; lastContent = lastProps.children;
        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; nextContent = nextProps.children;

        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!nextContent) {
            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.updateTextContent(&lt;span class=&quot;string&quot;&gt;''&lt;/span&gt;);
        } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (lastContent !== nextContent) {
            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.updateTextContent(&lt;span class=&quot;string&quot;&gt;''&lt;/span&gt; + nextContent);
        }
    }

    updateTextContent(text) {
        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; node = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._hostNode;

        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; firstChild = node.firstChild;

        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (firstChild &amp;amp;&amp;amp; firstChild === node.lastChild
                &amp;amp;&amp;amp; firstChild.nodeType === &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) {
            firstChild.nodeValue = text;
            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;
        }

        node.textContent = text;
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Feact&lt;/code&gt;‘s version of &lt;code&gt;_updateDOMChildren&lt;/code&gt; is hopelessly stupid, but this is all we need for our learning purposes. &lt;/p&gt;
&lt;h2 id=&quot;updating-composite-components&quot;&gt;Updating composite components&lt;/h2&gt;
&lt;p&gt;The work we did above was fine and all, but we can only update &lt;code&gt;FeactDOMComponent&lt;/code&gt;s. In other words, this won’t work&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;Feact.render(
    Feact.createElement(MyCoolComponent, { &lt;span class=&quot;attr&quot;&gt;myProp&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;'hello'&lt;/span&gt; }),
    &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;'root'&lt;/span&gt;)
);

setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
    Feact.render(
        Feact.createElement(MyCoolComponent, { &lt;span class=&quot;attr&quot;&gt;myProp&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;'hello again'&lt;/span&gt; }),
        &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;'root'&lt;/span&gt;)
    );
}, &lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Updating composite components is much more interesting and where a lot of the power in React lies. The good news is, a composite component will ultimately boil down to a &lt;code&gt;FeactDOMComponent&lt;/code&gt;, so all the work we did above won’t go to waste.&lt;/p&gt;
&lt;p&gt;Even more good news, &lt;code&gt;updateRootComponent&lt;/code&gt; has no idea what kind of component it received. It just blindly calls &lt;code&gt;receiveComponent&lt;/code&gt; on it. So all we need to do is add &lt;code&gt;receiveComponent&lt;/code&gt; to &lt;code&gt;FeactCompositeComponentWrapper&lt;/code&gt; and we’re good!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FeactCompositeComponentWrapper&lt;/span&gt; &lt;/span&gt;{
    ...
    receiveComponent(nextElement) {
        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; prevElement = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._currentElement;
        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.updateComponent(prevElement, nextElement);
    }

    updateComponent(prevElement, nextElement) {
        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; nextProps = nextElement.props;

        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._performComponentUpdate(nextElement, nextProps);
    }

    _performComponentUpdate(nextElement, nextProps) {
        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._currentElement = nextElement;
        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; inst = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._instance;

        inst.props = nextProps;

        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._updateRenderedComponent();
    }

    _updateRenderedComponent() {
        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; prevComponentInstance = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._renderedComponent;
        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; inst = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._instance;
        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; nextRenderedElement = inst.render();

        prevComponentInstance.receiveComponent(nextRenderedElement);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It’s a little silly to spread such little logic across four methods, but it will make more sense as we progress. These four methods are also what is found in React’s &lt;code&gt;ReactCompositeComponentWrapper&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Ultimately the update boils down to calling &lt;code&gt;render&lt;/code&gt; with the current set of props. Take the resulting element and passing it on to the &lt;code&gt;_renderedComponent&lt;/code&gt;, and telling it to update. &lt;code&gt;_renderedComponent&lt;/code&gt; could be another &lt;code&gt;FeactCompositeComponentWrapper&lt;/code&gt;, or possibly a &lt;code&gt;FeactDOMComponent&lt;/code&gt;. It was created during the first render.&lt;/p&gt;
&lt;h2 id=&quot;let-s-use-feactreconciler-again&quot;&gt;Let’s use FeactReconciler again&lt;/h2&gt;
&lt;p&gt;Mounting components always goes through &lt;code&gt;FeactReconciler&lt;/code&gt;, so updating them should to. This isn’t that important for Feact, but it keeps us consistent with React.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; FeactReconciler = {
    ...
    receiveComponent(internalInstance, nextElement) {
        internalInstance.receiveComponent(nextElement);
    }
};


&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;updateRootComponent&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;prevComponent, nextElement&lt;/span&gt;) &lt;/span&gt;{
    FeactReconciler.receiveComponent(prevComponent, nextElement);
}

&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FeactCompositeComponentWrapper&lt;/span&gt; &lt;/span&gt;{
    ...
    _updateRenderedComponent() {
        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; prevComponentInstance = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._renderedComponent;
        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; inst = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._instance;
        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; nextRenderedElement = inst.render();

        FeactReconciler.receiveComponent(
            prevComponentInstance, nextRenderedElement);
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;shouldcomponentupdate-and-componentwillreceiveprops&quot;&gt;shouldComponentUpdate and componentWillReceiveProps&lt;/h2&gt;
&lt;p&gt;We can now easily add these two lifecycle methods into Feact.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FeactCompositeComponentWrapper&lt;/span&gt; &lt;/span&gt;{
    ...
    updateComponent(prevElement, nextElement) {
        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; nextProps = nextElement.props;
        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; inst = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._instance;

        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (inst.componentWillReceiveProps) {
            inst.componentWillReceiveProps(nextProps);
        }

        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; shouldUpdate = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;

        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (inst.shouldComponentUpdate) {
            shouldUpdate = inst.shouldComponentUpdate(nextProps);
        }

        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (shouldUpdate) {
            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._performComponentUpdate(nextElement, nextProps);
        } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {
            &lt;span class=&quot;comment&quot;&gt;// if skipping the update,&lt;/span&gt;
            &lt;span class=&quot;comment&quot;&gt;// still need to set the latest props&lt;/span&gt;
            inst.props = nextProps;
        }
    }
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;a-major-hole&quot;&gt;A Major Hole&lt;/h2&gt;
&lt;p&gt;There’s a big problem with Feact’s updating that we won’t be addressing. It’s making the assumption that when the update happens, it can keep using the same type of component.&lt;/p&gt;
&lt;p&gt;In other words, Feact can handle this just fine&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;Feact.render(
    Feact.createElement(MyCoolComponent, { &lt;span class=&quot;attr&quot;&gt;myProp&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;'hi'&lt;/span&gt; }),
    root
);

&lt;span class=&quot;comment&quot;&gt;// some time passes&lt;/span&gt;

Feact.render(
    Feact.createElement(MyCoolComponent, { &lt;span class=&quot;attr&quot;&gt;myProp&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;'hi again'&lt;/span&gt; }),
    root
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;but it can’t handle this&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;Feact.render(
    Feact.createElement(MyCoolComponent, { &lt;span class=&quot;attr&quot;&gt;myProp&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;'hi'&lt;/span&gt; }),
    root
);

&lt;span class=&quot;comment&quot;&gt;// some time passes&lt;/span&gt;

Feact.render(
    Feact.createElement(SomeOtherComponent, { &lt;span class=&quot;attr&quot;&gt;someOtherProp&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;'hmmm'&lt;/span&gt; }),
    root
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this case, the update swapped in a completely different component class. Feact will just naively grab the previous component, which would be a &lt;code&gt;MyCoolComponent&lt;/code&gt;, and tell it to update with the new props &lt;code&gt;{ someOtherProp: &amp;#39;hmmm&amp;#39;}&lt;/code&gt;. What it should have done is notice the component type changed, and instead of updating, unmounted &lt;code&gt;MyCoolComponent&lt;/code&gt; and mounted &lt;code&gt;SomeOtherComponent&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In order to do this, Feact would need:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;some ability to unmount a component&lt;/li&gt;
&lt;li&gt;notice the type change and head over to &lt;code&gt;FeactReconciler.mountComponent&lt;/code&gt; instead of &lt;code&gt;FeactComponent.receiveComponent&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;callout wisdom&quot;&gt;
In React, if you render again with the same component type, it will get updated. You don’t actually need to specify a &lt;code&gt;key&lt;/code&gt; for your element to update in most cases. Keys are only necessary when a component is dealing with a collection of children. In this case, React will warn you if you forget your keys. It’s best to heed the warning, because without the key React is not updating, but completely unmounting and mounting again!
&lt;/div&gt;

&lt;h2 id=&quot;did-you-spot-the-virtual-dom-&quot;&gt;Did you spot the virtual DOM?&lt;/h2&gt;
&lt;p&gt;When React first came out, a lot of the hype was around the “virtual DOM”. But the virtual DOM isn’t really a concrete thing. It is more a concept that all of React (and Feact) accomplish together. There isn’t anything inside React called &lt;code&gt;VirtualDOM&lt;/code&gt; or anything like that. Instead &lt;code&gt;prevElement&lt;/code&gt; and &lt;code&gt;nextElement&lt;/code&gt; together capture the diff from render to render, and &lt;code&gt;FeactDOMComponent&lt;/code&gt; applies the diff into the actual DOM.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;And with that, Feact is able to update components, albeit only through &lt;code&gt;Feact.render()&lt;/code&gt;. That’s not too practical, but we’ll improve things next time when we explore &lt;code&gt;setState()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To wrap things up, here is a fiddle encompassing all that we’ve done so far&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;fiddle&quot; target=&quot;_blank&quot; href=&quot;https://jsfiddle.net/city41/s5d9prf6/2/&quot;&gt;fiddle&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;On to &lt;a href=&quot;http://mattgreer.org/articles/react-internals-part-four-setState&quot;&gt;part four&lt;/a&gt;!&lt;/p&gt;
</description>
    </item>
    <item>
      <title>React Internals, Part Two: componentWillMount and componentDidMount</title>
      <link>http://mattgreer.org/articles/react-internals-part-two-componentWillMount-and-componentDidMount/</link>
      <pubDate>Fri, 14 Jul 2017 17:00:00 -0700</pubDate>
      <guid isPermaLink="true">http://mattgreer.org/articles/react-internals-part-two-componentWillMount-and-componentDidMount/</guid>
      <author></author>
      <description>&lt;p&gt;In &lt;a href=&quot;http://mattgreer.org/articles/react-internals-part-one-basic-rendering&quot;&gt;part one&lt;/a&gt; we established basic rendering in Feact. That touched upon the most important lifecycle method, &lt;code&gt;render&lt;/code&gt;, and now we’re going to add in &lt;code&gt;componentWillMount&lt;/code&gt; and &lt;code&gt;componentDidMount&lt;/code&gt; support to Feact.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;the-series&quot;&gt;The series&lt;/h2&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;http://mattgreer.org/articles/react-internals-part-one-basic-rendering&quot;&gt;part one: basic rendering&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;part two: componentWillMount and componentDidMount&lt;/strong&gt; &amp;lt;- you are here&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://mattgreer.org/articles/react-internals-part-three-basic-updating&quot;&gt;part three: basic updating&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://mattgreer.org/articles/react-internals-part-four-setState&quot;&gt;part four: setState&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;part five: transactions &lt;em&gt;coming soon!&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2 id=&quot;first-fix-createclass&quot;&gt;First, fix createClass&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;createClass&lt;/code&gt; back in part one only supported &lt;code&gt;render&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Feact = {
    createClass(spec) {
        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Constructor&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;props&lt;/span&gt;) &lt;/span&gt;{
            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props = props;
        }

        &lt;span class=&quot;comment&quot;&gt;// we pluck render off and ignore the rest of spec&lt;/span&gt;
        Constructor.prototype.render = spec.render;

        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Constructor;
    }
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a simple fix, let’s add the entire spec to the component’s prototype. That allows methods like &lt;code&gt;componentWillMount&lt;/code&gt;, but it also allows any arbitrary methods the user defined to be used.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Feact = {
    createClass(spec) {
        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Constructor&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;props&lt;/span&gt;) &lt;/span&gt;{
            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props = props;
        }

        Constructor.prototype =
            &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign(Constructor.prototype, spec);

        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Constructor;
    }
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;addressing-mountcomponent-s-shortcut&quot;&gt;Addressing mountComponent’s shortcut&lt;/h2&gt;
&lt;p&gt;Back in part one, I noted that &lt;code&gt;FeactCompositeComponentWrapper#mountComponent&lt;/code&gt; had taken a shortcut. This shortcut will prevent lifecycle methods such as &lt;code&gt;componentWillMount&lt;/code&gt; from getting called.&lt;/p&gt;
&lt;p&gt;Here’s &lt;code&gt;mountComponent&lt;/code&gt; as it stood in part one&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FeactCompositeComponentWrapper&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;(element) {
        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._currentElement = element;
    }

    mountComponent(container) {
        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Component = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._currentElement.type;
        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; componentInstance =
            &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Component(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._currentElement.props);

        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; element = componentInstance.render();

        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; element.type === &lt;span class=&quot;string&quot;&gt;'function'&lt;/span&gt;) {
            element = (&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; element.type(element.props)).render();
        }

        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; domComponentInstance = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FeactDOMComponent(element);
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; domComponentInstance.mountComponent(container);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;mountComponent&lt;/code&gt; is working its way down to a native element. As long as &lt;code&gt;render()&lt;/code&gt; returns a composite component element, it calls &lt;code&gt;render&lt;/code&gt; again until it finally gets a native element. The problem is these sub composite components are not privy to the entire lifecycle. In other words, their &lt;code&gt;render&lt;/code&gt; method is being called, but that’s it. What we really need to do is properly mount all components.&lt;/p&gt;
&lt;p&gt;To fix this, let’s have something else do the mounting for us&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FeactCompositeComponentWrapper&lt;/span&gt; &lt;/span&gt;{
    ...
    mountComponent(container) {
        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Component = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._currentElement.type;
        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; componentInstance =
            &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Component(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._currentElement.props);
        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._instance = componentInstance;

        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; markup = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.performInitialMount(container);

        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; markup;
    }

    performInitialMount(container) {
        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; renderedElement = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._instance.render();

        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; child = instantiateFeactComponent(renderedElement);
        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._renderedComponent = child;

        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; FeactReconciler.mountComponent(child, container);
    }
}

&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; FeactReconciler = {
    mountComponent(internalInstance, container) {
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; internalInstance.mountComponent(container);
    }
};

&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;instantiateFeactComponent&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;element&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; element.type === &lt;span class=&quot;string&quot;&gt;'string'&lt;/span&gt;) {
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FeactDOMComponent(element);
    } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; element.type === &lt;span class=&quot;string&quot;&gt;'function'&lt;/span&gt;) {
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FeactCompositeComponentWrapper(element);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a fair amount of new code, but the basic idea is to move mounting out into another layer. That’s the job of &lt;code&gt;FeactReconciler&lt;/code&gt;, which will also gain more jobs as we move forward. Over in React, there is &lt;code&gt;ReactReconciler&lt;/code&gt; which is serving the same role.&lt;/p&gt;
&lt;div class=&quot;callout wisdom&quot;&gt;
Remember the tight coupling that was called out in part one? It’s gone now, &lt;code&gt;FeactCompositeComponentWrapper&lt;/code&gt; is usable in more places now, which is a good thing.
&lt;/div&gt;

&lt;h2 id=&quot;tweaking-feact-render-&quot;&gt;Tweaking &lt;code&gt;Feact.render()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Feact.render()&lt;/code&gt; is calling &lt;code&gt;componentInstance.mountComponent(container)&lt;/code&gt; in part one. Let’s change that and instead have &lt;code&gt;FeactReconciler&lt;/code&gt; deal with all mounting&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Feact = {
    ...
    render(element, container) {
        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; wrapperElement =
            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.createElement(TopLevelWrapper, element);

        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; componentInstance =
            &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FeactCompositeComponentWrapper(wrapperElement);

        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; FeactReconciler.mountComponent(
            componentInstance,
            container
        );
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And with that, all composite component elements will get properly mounted. This sets them up properly for participating in the entire Feact lifecycle.&lt;/p&gt;
&lt;h2 id=&quot;finally-adding-componentwillmount-and-componentdidmount&quot;&gt;Finally adding componentWillMount and componentDidMount&lt;/h2&gt;
&lt;p&gt;Now with all the setup out of the way, actually adding support for these two is simple. Just before mounting, call &lt;code&gt;componentWillMount&lt;/code&gt; if it exists. Likewise, just after mounting, call &lt;code&gt;componentDidMount&lt;/code&gt; if it exists&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FeactCompositeComponentWrapper&lt;/span&gt; &lt;/span&gt;{
    ...
    mountComponent(container) {
        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Component = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._currentElement.type;
        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; componentInstance =
            &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Component(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._currentElement.props);
        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._instance = componentInstance;

        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (componentInstance.componentWillMount) {
            componentInstance.componentWillMount();
        }

        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; markUp = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.performInitialMount(container);

        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (componentInstance.componentDidMount) {
            componentInstance.componentDidMount();
        }

        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; markUp;
    },
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;concluding-part-two&quot;&gt;Concluding part two&lt;/h2&gt;
&lt;p&gt;That wraps up part two. Here is a fiddle encompassing all we’ve done&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;fiddle&quot; target=&quot;_blank&quot; href=&quot;https://jsfiddle.net/city41/L5u2z592/3/&quot;&gt;fiddle&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In &lt;a href=&quot;http://mattgreer.org/articles/react-internals-part-three-basic-updating&quot;&gt;part three&lt;/a&gt;, we’ll add support for updates.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>React Internals, Part One: basic rendering</title>
      <link>http://mattgreer.org/articles/react-internals-part-one-basic-rendering/</link>
      <pubDate>Thu, 13 Jul 2017 17:00:00 -0700</pubDate>
      <guid isPermaLink="true">http://mattgreer.org/articles/react-internals-part-one-basic-rendering/</guid>
      <author></author>
      <description>&lt;p&gt;In this five part series, we will “recreate” React from the ground up, learning how it works along the way. Once we’ve finished, you should have a good grasp of how React works, and when and why it calls the various lifecycle methods of a component.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;the-series&quot;&gt;The series&lt;/h2&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;part one: basic rendering&lt;/strong&gt; &amp;lt;- you are here&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://mattgreer.org/articles/react-internals-part-two-componentWillMount-and-componentDidMount/&quot;&gt;part two: componentWillMount and componentDidMount&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://mattgreer.org/articles/react-internals-part-three-basic-updating&quot;&gt;part three: basic updating&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://mattgreer.org/articles/react-internals-part-four-setState&quot;&gt;part four: setState&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;part five: transactions &lt;em&gt;coming soon!&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;disclaimer&quot;&gt;disclaimer&lt;/h2&gt;
&lt;p&gt;This series is based on React 15.3, in particular using ReactDOM and the stack reconciler. The fancy new fiber reconciler is out of scope here. The React clone we are going to build will not even come close to implementing all of React. But Feact’s source code will mirror React’s as much as possible.&lt;/p&gt;
&lt;h2 id=&quot;some-background-elements-and-components&quot;&gt;Some Background: Elements and Components&lt;/h2&gt;
&lt;p&gt;At the heart of React are three different types of entities: native DOM elements, virtual elements and components.&lt;/p&gt;
&lt;h3 id=&quot;native-dom-elements&quot;&gt;native DOM elements&lt;/h3&gt;
&lt;p&gt;These are exactly what they sound like, the actual DOM elements that the browser uses as the building blocks of a webpage. At some point, React will call &lt;code&gt;document.createElement()&lt;/code&gt; to get one, and use the browser’s DOM api to update them such as &lt;code&gt;element.insertBefore()&lt;/code&gt;, &lt;code&gt;element.nodeValue&lt;/code&gt;, etc.&lt;/p&gt;
&lt;h3 id=&quot;virtual-react-elements&quot;&gt;virtual React elements&lt;/h3&gt;
&lt;p&gt;A virtual React element (just called an “element” in the source code), is an in memory representation of what you’d like a given DOM element (or entire tree of elements) to be for a particular render. An element can either directly represent a DOM element such as &lt;code&gt;h1&lt;/code&gt;, &lt;code&gt;div&lt;/code&gt;, etc. Or it can represent a user defined composite component, which is explained below.&lt;/p&gt;
&lt;h3 id=&quot;components&quot;&gt;Components&lt;/h3&gt;
&lt;p&gt;“Component” is a pretty generic term in React. They are entities within React that do various types of work. Different types of components do different things. For example, &lt;code&gt;ReactDOMComponent&lt;/code&gt; from ReactDOM is responsible for bridging between React elements and their corresponding native DOM elements.&lt;/p&gt;
&lt;h3 id=&quot;user-defined-composite-components&quot;&gt;User Defined Composite Components&lt;/h3&gt;
&lt;p&gt;You are already familiar with one type of component: the composite component. Whenever you call &lt;code&gt;React.createClass()&lt;/code&gt;, or have an es6 class extend &lt;code&gt;React.Component&lt;/code&gt;, you are creating a Composite Component class. It turns out our view of the component lifecycle with methods like &lt;code&gt;componentWillMount&lt;/code&gt;, &lt;code&gt;shouldComponentUpdate&lt;/code&gt; is just one piece of the puzzle. These are the lifecycle methods that we hook into because they benefit us. But React components have other lifecycle methods such as &lt;code&gt;mountComponent&lt;/code&gt; and &lt;code&gt;receiveComponent&lt;/code&gt;. We never implement, call, or even know these other lifecycle methods exist. They are only used internally by React.&lt;/p&gt;
&lt;div class=&quot;callout wisdom&quot;&gt;
The truth is the components we create are incomplete. React will take our component class, and wrap it in a &lt;code&gt;ReactCompositeComponentWrapper&lt;/code&gt;, which then gives the components we wrote the full lifecycle hooks and ability to participate in React.
&lt;/div&gt;

&lt;h2 id=&quot;react-is-declarative&quot;&gt;React is declarative&lt;/h2&gt;
&lt;p&gt;When it comes to components, our job is to define component &lt;strong&gt;classes&lt;/strong&gt;. But we never instantiate them. Instead React will instantiate an instance of our classes when it needs to.&lt;/p&gt;
&lt;p&gt;We also don’t consciously instantiate elements. But we do implicitly when we write JSX, such as:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyComponent&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;{
    render() {
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;hello&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That bit of JSX gets translated into this by the compiler:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyComponent&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;{
    render() {
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; React.createElement(&lt;span class=&quot;string&quot;&gt;'div'&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'hello'&lt;/span&gt;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;so in a sense, we are causing an element to be created because our code will call &lt;code&gt;React.createElement()&lt;/code&gt;. But in another sense we aren’t, because it’s up to React to instantiate our component and then call &lt;code&gt;render()&lt;/code&gt; for us. It’s simplest to consider React declarive. We describe what we want, and React figures out how to make it happen.&lt;/p&gt;
&lt;h2 id=&quot;a-tiny-fake-react-called-feact&quot;&gt;A tiny, fake React called Feact&lt;/h2&gt;
&lt;p&gt;Now with a little bit of background under our belt, let’s get started building our React clone. Since this clone is tiny and fake, we’ll give it the imaginative name “Feact”.&lt;/p&gt;
&lt;p&gt;Let’s pretend we want to create this tiny Feact app:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;Feact.render(&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;hello world&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;'root'&lt;/span&gt;));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For starters, let’s ditch the JSX. Assuming Feact was fully implemented, after running the JSX through the compiler we’d end up with&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;Feact.render(
    Feact.createElement(&lt;span class=&quot;string&quot;&gt;'h1'&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'hello world'&lt;/span&gt;),
    &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;'root'&lt;/span&gt;)
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;JSX is a large topic on its own and a bit of a distraction. So from here on out, we will use &lt;code&gt;Feact.createElement&lt;/code&gt; instead of JSX, so let’s go ahead and implement it&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Feact = {
    createElement(type, props, children) {
        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; element = {
            type,
            &lt;span class=&quot;attr&quot;&gt;props&lt;/span&gt;: props || {}
        };

        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (children) {
            element.props.children = children;
        }

        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; element;
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Elements are just simple objects representing something we want rendered.&lt;/p&gt;
&lt;h3 id=&quot;what-should-feact-render-do-&quot;&gt;What should Feact.render() do?&lt;/h3&gt;
&lt;p&gt;Our call to &lt;code&gt;Feact.render()&lt;/code&gt; passes in what we want rendered and where it should go. This is the starting point of any Feact app. For our first attempt, let’s define &lt;code&gt;render()&lt;/code&gt; to look something like this&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Feact = {
    createElement() { &lt;span class=&quot;comment&quot;&gt;/* as before */&lt;/span&gt; },

    render(element, container) {
        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; componentInstance = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FeactDOMComponent(element);
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; componentInstance.mountComponent(container);
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When &lt;code&gt;render()&lt;/code&gt; finishes, we have a finished webpage. So based on that, we know FeactDOMComponent is truly digging in and creating DOM for us. Let’s go ahead and take a stab at implementing it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FeactDOMComponent&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;(element) {
        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._currentElement = element;
    }

    mountComponent(container) {
        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; domElement =
            &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createElement(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._currentElement.type);
        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; text = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._currentElement.props.children;
        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; textNode = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createTextNode(text);
        domElement.appendChild(textNode);

        container.appendChild(domElement);

        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._hostNode = domElement;
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; domElement;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;callout wisdom&quot;&gt;
&lt;code&gt;mountComponent&lt;/code&gt; stores the DOM element it creates in &lt;code&gt;this._hostNode&lt;/code&gt;. We don’t need that in part one, but we will in part three.
&lt;/div&gt;

&lt;p&gt;&lt;a class=&quot;fiddle&quot; target=&quot;_blank&quot; href=&quot;https://jsfiddle.net/city41/ohmzvb4o/9&quot;&gt;fiddle&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In about 40 lines of pretty crappy code we’ve got an incredibly limited and pathetic little “React clone”! Feact isn’t going to take over the world, but it’s serving as a nice learning sandbox.&lt;/p&gt;
&lt;h2 id=&quot;adding-user-defined-components&quot;&gt;Adding user defined components&lt;/h2&gt;
&lt;p&gt;We want to be able to render more than just a single, hardcoded, DOM element. So let’s add support for defining component classes:&lt;/p&gt;
&lt;div class=&quot;callout wisdom&quot;&gt;
    &lt;code&gt;Feact.createElement()&lt;/code&gt; is good to go, so I won’t keep repeating it in code snippets.
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Feact = {
    createClass(spec) {
        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Constructor&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;props&lt;/span&gt;) &lt;/span&gt;{
            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props = props;
        }

        Constructor.prototype.render = spec.render;

        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Constructor;
    }, 

    render(element, container) {
        &lt;span class=&quot;comment&quot;&gt;// our previous implementation can't&lt;/span&gt;
        &lt;span class=&quot;comment&quot;&gt;// handle user defined components,&lt;/span&gt;
        &lt;span class=&quot;comment&quot;&gt;// so we need to rethink this method&lt;/span&gt;
    }
};

&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; MyTitle = Feact.createClass({
    render() {
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Feact.createElement(&lt;span class=&quot;string&quot;&gt;'h1'&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props.message);
    }
};

Feact.render({
    Feact.createElement(MyTitle, { &lt;span class=&quot;attr&quot;&gt;message&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;'hey there Feact'&lt;/span&gt; }),
    &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;'root'&lt;/span&gt;)
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Remember, we’re not dealing with JSX for this blog post series, because we’ve got plenty to deal with already. If we had JSX available, the above would look like&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;Feact.render(
    &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;MyTitle&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;message&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;hey there Feact&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;,
    document.getElementById('root')
);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We passed the component class into &lt;code&gt;createElement&lt;/code&gt;. An element can either represent a primitive DOM element, or it can represent a composite component. The distinction is easy, if &lt;code&gt;type&lt;/code&gt; is a string, the element is a native primitive. If it is a function, the element represents a composite component.&lt;/p&gt;
&lt;h3 id=&quot;improving-feact-render-&quot;&gt;Improving Feact.render()&lt;/h3&gt;
&lt;p&gt;If you trace back through the code so far, you will see that &lt;code&gt;Feact.render()&lt;/code&gt; as it stands now can’t handle composite components, so let’s fix that:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;Feact = {
    render(element, container) {
        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; componentInstance =
            &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FeactCompositeComponentWrapper(element);

        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; componentInstance.mountComponent(container);
    }
}

&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FeactCompositeComponentWrapper&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;(element) {
        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._currentElement = element;
    }

    mountComponent(container) {
        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Component = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._currentElement.type;
        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; componentInstance = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Component(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._currentElement.props);
        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; element = componentInstance.render();

        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; domComponentInstance = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FeactDOMComponent(element);
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; domComponentInstance.mountComponent(container);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By giving users the ability to define their own components, Feact can now create dynamic DOM nodes that can change depending on the value of the props. There’s a lot going on in this upgrade to Feact, but if you trace through it, it’s not too bad. You can see where we call &lt;code&gt;componentInstance.render()&lt;/code&gt;, to get our hands on an element that we can then pass into FeactDOMComponent.&lt;/p&gt;
&lt;div class=&quot;callout pitfall&quot;&gt;
Notice how &lt;code&gt;FeactCompositeComponentWrapper&lt;/code&gt; is directly creating a &lt;code&gt;FeactDOMComponent&lt;/code&gt;? That’s a tight coupling which isn’t so great. We’ll fix this later. If React was this tightly coupled, it’d only ever be able to build web apps. Keeping &lt;code&gt;ReactCompositeComponentWrapper&lt;/code&gt; in the dark about other component types surely made building React Native easier.
&lt;/div&gt;

&lt;h3 id=&quot;an-improvement-for-composite-components&quot;&gt;An improvement for composite components&lt;/h3&gt;
&lt;p&gt;Currently our composite components must return elements that represent primitive DOM nodes, we can’t return other composite component elements. Let’s fix that. We want to be able to do this&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; MyMessage = Feact.createClass({
    render() {
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props.asTitle) {
            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Feact.createElement(MyTitle, {
                &lt;span class=&quot;attr&quot;&gt;message&lt;/span&gt;: &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props.message
            });
        } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {
            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Feact.createElement(&lt;span class=&quot;string&quot;&gt;'p'&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props.message);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This composite component’s render() is either going to return a primitive element or a composite component element. Currently Feact can’t handle this, if &lt;code&gt;asTitle&lt;/code&gt; was true, &lt;code&gt;FeactCompositeComponentWrapper&lt;/code&gt; would give &lt;code&gt;FeactDOMComponent&lt;/code&gt; a non-native element, and &lt;code&gt;FeactDOMComponent&lt;/code&gt; would blow up. Let’s fix &lt;code&gt;FeactCompositeComponentWrapper&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FeactCompositeComponentWrapper&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;(element) {
        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._currentElement = element;
    }

    mountComponent(container) {
        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Component = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._currentElement.type;
        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; componentInstance =
            &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Component(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._currentElement.props);
        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; element = componentInstance.render();

        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; element.type === &lt;span class=&quot;string&quot;&gt;'function'&lt;/span&gt;) {
            element = (&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; element.type(element.props)).render();
        }

        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; domComponentInstance = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FeactDOMComponent(element);
        domComponentInstance.mountComponent(container);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;callout pitfall&quot;&gt;
Heads up, this “fix” is a short cut that’s just good enough to meet our current needs. Notice how it repeatedly calls &lt;code&gt;render&lt;/code&gt; until it gets down to a primitive element? That’s not good enough, because those subcomponents need to participate in the entire lifecycle. For example, if we had support for &lt;code&gt;componentWillMount&lt;/code&gt;, those subcomponents would never get their’s called. We’ll fix this later.
&lt;/div&gt;


&lt;h2 id=&quot;fixing-feact-render-again&quot;&gt;Fixing Feact.render() again&lt;/h2&gt;
&lt;p&gt;The first version of &lt;code&gt;Feact.render()&lt;/code&gt; could only handle primitive elements. Now it can only handle composite elements. It needs to be able to handle both. We could write a “factory” function that will create a component for us based on the element’s type, but there’s another approach that React took. Since &lt;code&gt;FeactCompositeComponentWrapper&lt;/code&gt; components ultimately result in a &lt;code&gt;FeactDOMComponent&lt;/code&gt;, let’s just take whatever element we were given and wrap it in such a way that we can just use a &lt;code&gt;FeactCompositeComponentWrapper&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; TopLevelWrapper = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;props&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props = props;
};

TopLevelWrapper.prototype.render = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props;
};

&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Feact = {
    render(element, container) {
        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; wrapperElement =
            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.createElement(TopLevelWrapper, element);

        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; componentInstance =
            &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FeactCompositeComponentWrapper(wrapperElement);

        &lt;span class=&quot;comment&quot;&gt;// as before&lt;/span&gt;
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;ToplevelWrapper&lt;/code&gt; is basically a simple composite component. It could have been defined by calling &lt;code&gt;Feact.createClass()&lt;/code&gt;. Its &lt;code&gt;render&lt;/code&gt; method just returns the user provided element. Since TopLevelWrapper will get wrapped in a &lt;code&gt;FeactCompositeComponentWrapper&lt;/code&gt;, we don’t care what type the user provided element was, &lt;code&gt;FeactCompositeComponentWrapper&lt;/code&gt; will do the right thing regardless.&lt;/p&gt;
&lt;h2 id=&quot;conclusion-to-part-one&quot;&gt;Conclusion to part one&lt;/h2&gt;
&lt;p&gt;With that, Feact can render simple components. As far as basic rendering is concerned, we’ve hit most of the major considerations. In real React, rendering is much more complicated as there are many other things to consider such as events, focus, scroll position of the window, performance, and much more.&lt;/p&gt;
&lt;p&gt;Here’s a final fiddle that wraps up all we’ve built so far:&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;fiddle&quot; target=&quot;_blank&quot; href=&quot;https://jsfiddle.net/city41/7x2zgevj/17&quot;&gt;fiddle&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://mattgreer.org/articles/react-internals-part-two-componentWillMount-and-componentDidMount&quot;&gt;on to part two!&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>TypeScript, React and Redux</title>
      <link>http://mattgreer.org/articles/typescript-react-and-redux/</link>
      <pubDate>Sat, 25 Jun 2016 17:00:00 -0700</pubDate>
      <guid isPermaLink="true">http://mattgreer.org/articles/typescript-react-and-redux/</guid>
      <author></author>
      <description>&lt;p&gt;Try as I might, I could not get TypeScript and Redux to play nice. I finally pulled it off with a little surgery, and thought I’d dump what I did. If anyone has a better approach, please &lt;a href=&quot;mailto:matt.e.greer@gmail.com&quot;&gt;I’m all ears&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;setting-up-your-actions&quot;&gt;Setting Up Your Actions&lt;/h2&gt;
&lt;p&gt;Somewhere in a Redux GitHub issue I found someone who took the approach of using &lt;a href=&quot;https://github.com/acdlite/redux-actions&quot;&gt;redux-actions&lt;/a&gt;. I liked this approach so I adopted it.&lt;/p&gt;
&lt;p&gt;For starters, define an &lt;code&gt;Action&amp;lt;T&amp;gt;&lt;/code&gt; interface that your actions will conform to&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-typescript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; Action&amp;lt;T&amp;gt;{
  &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;;
  payload: T;
  error?: &lt;span class=&quot;built_in&quot;&gt;boolean&lt;/span&gt;;
  meta?: &lt;span class=&quot;built_in&quot;&gt;any&lt;/span&gt;;
}

&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; Action;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So far I’m not using &lt;code&gt;error&lt;/code&gt; or &lt;code&gt;meta&lt;/code&gt;, but that’s what redux-actions calls for so going with it. With this we get statically typed Actions&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-typescript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Action &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;./action&quot;&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; MY_ACTION = &lt;span class=&quot;string&quot;&gt;&quot;MY_ACTION&quot;&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; MY_ACTION = { foo: &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;, message: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; }

&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;doMyAction&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;message: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&lt;/span&gt;): &lt;span class=&quot;title&quot;&gt;Action&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;MY_ACTION&lt;/span&gt;&amp;gt; &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; {
        &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;: MY_ACTION,
        payload: {
            foo: &lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;,
            message
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Exporting both a string and a type named &lt;code&gt;MY_ACTION&lt;/code&gt; felt a little weird. But since TypeScript can distinguish them by their type, it works. It reduces the cognitive load a bit when working with actions.&lt;/p&gt;
&lt;h2 id=&quot;and-the-reducer&quot;&gt;And The Reducer&lt;/h2&gt;
&lt;p&gt;And now with the action set up, the reducer can consume it&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-typescript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Action &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;../actions/action&quot;&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; { MY_ACTION } &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;../actions/myAction&quot;&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; { handleActions } &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;redux-actions&quot;&lt;/span&gt;;

&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; reducer = handleActions({
  [MY_ACTION]: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;state, action: Action&amp;lt;MY_ACTION&amp;gt;&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; massagedFoo = doSomething(action.payload.foo);

    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign({}, state, {
      massagedFoo,
      message: action.payload.message
    });
  }
}, {});

&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; reducer;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since TypeScript doesn’t yet support &lt;a href=&quot;https://github.com/Microsoft/TypeScript/issues/2103&quot;&gt;spread on objects&lt;/a&gt;, need to resort to &lt;code&gt;Object.assign&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;time-to-connect-it-all&quot;&gt;Time to connect it all&lt;/h2&gt;
&lt;h3 id=&quot;step-one-the-component&quot;&gt;Step One, the component&lt;/h3&gt;
&lt;p&gt;Here’s the component that will be &lt;code&gt;connect&lt;/code&gt;ed to Redux&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; React &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;react&quot;&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; { connect } &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;react-redux&quot;&lt;/span&gt;;

&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; { bindActionCreators } &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;redux&quot;&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; MyActions &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;../actions/myAction&quot;&lt;/span&gt;;

interface StateProps {
  &lt;span class=&quot;attr&quot;&gt;massagedFoo&lt;/span&gt;: number,
  &lt;span class=&quot;attr&quot;&gt;message&lt;/span&gt;: string
}

interface DispatchProps {
  doMyAction(message: string)
}

type HomeProps = StateProps &amp;amp; DispatchProps;

&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;mapStateToProps&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;state&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; {
    &lt;span class=&quot;attr&quot;&gt;massagedFoo&lt;/span&gt;: state.myAction.massagedFoo,
    &lt;span class=&quot;attr&quot;&gt;message&lt;/span&gt;: state.myAction.message
  };
}

&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;mapDispatchToProps&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;dispatch&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; bindActionCreators(MyActions, dispatch)
}

@connect&amp;lt;StateProps, DispatchProps, any&amp;gt;(mapStateToProps, mapDispatchToProps)
&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Home&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;HomeProps&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;any&lt;/span&gt;&amp;gt; &lt;/span&gt;{
  render() {
    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; {
      massagedFoo,
      message,
      doMyAction
    } = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props;

    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (
      &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;foo: {massagedFoo} message: {message}&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;onClick&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;{doMyAction.bind(this,&lt;/span&gt; &quot;&lt;span class=&quot;attr&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;cool&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;message&lt;/span&gt;&quot;)} /&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
    );
  }
}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I like hooking up &lt;code&gt;connect&lt;/code&gt; via a decorator, reduces the boilerplate nicely. I also like that my props are all statically typed and how easy it was to combine the state and dispatcher props into one with &lt;code&gt;HomeProps = StateProps &amp;amp; DispatchProps&lt;/code&gt;. All in all I’m impressed with how the TypeScript team managed to overlay a typing system that doesn’t get in the way and still lets JavaScript shine through.&lt;/p&gt;
&lt;h3 id=&quot;step-two-component-meets-store&quot;&gt;Step Two, component meets store&lt;/h3&gt;
&lt;p&gt;Here is where I found react-redux and TypeScript disagreed with each other. Hooking up your component to your store just can’t be accomplished in such a way that the TypeScript compiler will be happy with. Here’s the standard approach&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; React &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;react&quot;&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; ReactDOM &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;react-dom&quot;&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; { Provider } &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;react-redux&quot;&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Home &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;./components/Home&quot;&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; configureStore &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;./store/configureStore&quot;&lt;/span&gt;;

&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; store = configureStore();

&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; App: React.StatelessComponent&amp;lt;any&amp;gt; = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; (
  &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Provider&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;store&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;{store}&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Home&lt;/span&gt; /&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;Provider&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
);

ReactDOM.render(&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;App&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;&quot;#myApp&quot;&lt;/span&gt;));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The problem is TypeScript thinks &lt;code&gt;Home&lt;/code&gt; requires &lt;code&gt;massagedFoo&lt;/code&gt;, &lt;code&gt;message&lt;/code&gt; and &lt;code&gt;doMyAction&lt;/code&gt; as props, as it doesn’t realize Home has been wrapped by &lt;code&gt;connect&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ERROR in ./src/index.tsx
(16,9): error TS2324: Property &amp;#39;massagedFoo&amp;#39; is missing in type &amp;#39;IntrinsicAttributes &amp;amp; IntrinsicClassAttributes&amp;lt;Home&amp;gt; &amp;amp; StateProps &amp;amp; DispatchProps &amp;amp; { children?: ...&amp;#39;.

...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I banged my head on this for a while and I’m willing to bet a solid solution exists somewhere, but I sure couldn’t find it. I’m still new to TypeScript.&lt;/p&gt;
&lt;h2 id=&quot;cheating-a-little-bit&quot;&gt;Cheating A Little Bit&lt;/h2&gt;
&lt;p&gt;Redux itself is getting along just fine with TypeScript. The problem is only in react-redux’s &lt;code&gt;Provider&lt;/code&gt;. react-redux is a tiny library, gluing a Redux store to a React component. Even better, react-redux is almost entirely inside &lt;code&gt;connect&lt;/code&gt;, if you look at &lt;a href=&quot;https://github.com/reactjs/react-redux/blob/master/src/components/Provider.js&quot;&gt;Provider’s source&lt;/a&gt;, it’s nice and simple!&lt;/p&gt;
&lt;p&gt;All Provider is doing is placing the Redux store on the child context, so that the component that &lt;code&gt;connect()&lt;/code&gt; generated can find it. So I just wrote my own Provider that does the same thing, in a way that skirts around TypeScript&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-typescript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; React &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;react&quot;&lt;/span&gt;;

&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; Provider &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; React.Component&amp;lt;&lt;span class=&quot;built_in&quot;&gt;any&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;any&lt;/span&gt;&amp;gt; {
  &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; childContextTypes = {
    store: React.PropTypes.object.isRequired
  }

  getChildContext() {
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; { store: &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props.store };
  }

  render() {
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; React.createElement(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props.target);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is enough to make everyone happy. But it’s a little irksome that the Provider is completely relying on &lt;code&gt;any&lt;/code&gt;. By using generics, you can fix that&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-typescript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; React &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;react&quot;&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; { Store } &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;redux&quot;&lt;/span&gt;;

&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;createProvider&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;P&lt;/span&gt;&amp;gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; ProviderProps&amp;lt;P&amp;gt; {
    store: Store,
    target: React.ComponentClass&amp;lt;P&amp;gt;
  }

  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; Provider &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; React.Component&amp;lt;ProviderProps&amp;lt;P&amp;gt;, &lt;span class=&quot;built_in&quot;&gt;any&lt;/span&gt;&amp;gt; {
    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; childContextTypes = {
      store: React.PropTypes.object.isRequired
    }

    getChildContext() {
      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; { store: &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props.store };
    }

    render() {
      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; React.createElement(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props.target);
    }
  };
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;then over in index.tsx&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-typescript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; React &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;react&quot;&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; ReactDOM &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;react-dom&quot;&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; createProvider &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;./createProvider&quot;&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Home, { HomeProps } &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;./components/Home&quot;&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; configureStore &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;./store/configureStore&quot;&lt;/span&gt;;

&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; store = configureStore();
&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Provider = createProvider&amp;lt;HomeProps&amp;gt;();

&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; App: React.StatelessComponent&amp;lt;&lt;span class=&quot;built_in&quot;&gt;any&lt;/span&gt;&amp;gt; = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; (
  &amp;lt;Provider store={store} target={Home} /&amp;gt;
);

ReactDOM.render(&amp;lt;App/&amp;gt;, &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;&quot;#myApp&quot;&lt;/span&gt;));
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    <item>
      <title>Electron, Redux and Persistence</title>
      <link>http://mattgreer.org/articles/electron-redux-and-persistence/</link>
      <pubDate>Sat, 30 Jan 2016 16:00:00 -0800</pubDate>
      <guid isPermaLink="true">http://mattgreer.org/articles/electron-redux-and-persistence/</guid>
      <author></author>
      <description>&lt;p&gt;Redux is a nice pattern for React apps. But when wanting to persist my redux state across sessions for an Electron app, I hit some hurdles.
&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;For work I created a small Electron based app using React and Redux. I dig Electron, it’s a great platform for rapidly building something; internal tools are perfect candidates.&lt;/p&gt;
&lt;h2 id=&quot;dealing-with-errors-in-the-app&quot;&gt;Dealing with errors in the app&lt;/h2&gt;
&lt;p&gt;If an error occurs, I want to inform the user. So my app has a &lt;code&gt;receiveError&lt;/code&gt; redux action&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// the action&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;receiveError&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;error&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; {
    &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;: RECEIVE_ERROR,
    error
  };
}

&lt;span class=&quot;comment&quot;&gt;// and over in the reducer&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; initialState = {
  &lt;span class=&quot;attr&quot;&gt;hasError&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;
};

&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;state = initialState, action&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (action.type) {
    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; RECEIVE_ERROR:
      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; {
        ...state,
        &lt;span class=&quot;attr&quot;&gt;hasError&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,
        &lt;span class=&quot;attr&quot;&gt;message&lt;/span&gt;: action.error.message || action.error,
        &lt;span class=&quot;attr&quot;&gt;stack&lt;/span&gt;: action.error.stack
      };
    &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:
      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; state;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I think storing the error in the app state is the correct thing to do. Errors can come from anywhere, and the component that will report what happened to the user should be independent. App state is a good mediator here.&lt;/p&gt;
&lt;h2 id=&quot;storing-app-state-across-app-sessions&quot;&gt;Storing app state across app sessions&lt;/h2&gt;
&lt;p&gt;I want the app to be as the user left it the next time they launch it. This is easy to do in Electron, &lt;code&gt;localStorage&lt;/code&gt; to the rescue.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;remote.getCurrentWindow().on(&lt;span class=&quot;string&quot;&gt;'close'&lt;/span&gt;, () =&amp;gt; {
  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; state = store.getState();
  localStorage.myAppState = &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.stringify(state);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and here comes the problem, I want state like errors stored in app state for good reasons, but they shouldn’t be persisted.&lt;/p&gt;
&lt;p&gt;Roughly speaking there’s three types of state&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;true app state&lt;/strong&gt;: data and the real state of the app. Stored in redux’s app state permanently&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;local component state&lt;/strong&gt;: think “is this details panel open or closed?”, little details about a component can be stored on that component’s own state, completely separate from redux&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;transient app state:&lt;/strong&gt; like the error above. Not true, permanent app state, but also not something components should be storing. Kind of a &lt;em&gt;no man’s land&lt;/em&gt; in redux.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The second type is sometimes debatable. Storing details like that in app state is also a fine approach.&lt;/p&gt;
&lt;h2 id=&quot;cleaning-app-state-before-persisting&quot;&gt;Cleaning app state before persisting&lt;/h2&gt;
&lt;p&gt;My initial stab at this was to just take the entire app state via &lt;code&gt;store.getState()&lt;/code&gt;, then start strategically &lt;code&gt;delete&lt;/code&gt;ing properties I don’t want persisted. This is ugly, doesn’t scale, error prone, all kinds of bad stuff.&lt;/p&gt;
&lt;p&gt;A better approach is to have a &lt;code&gt;PERSISTING&lt;/code&gt; action. Send this action through all of your reducers, and let them decide what should stay and what should go&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; initialState = {
    &lt;span class=&quot;attr&quot;&gt;hasError&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;
  };

  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;state = initialState, action&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (action.type) {
      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; RECEIVE_ERROR:
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; {
          ...state,
          &lt;span class=&quot;attr&quot;&gt;hasError&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,
          &lt;span class=&quot;attr&quot;&gt;message&lt;/span&gt;: action.error.message || action.error,
          &lt;span class=&quot;attr&quot;&gt;stack&lt;/span&gt;: action.error.stack
        };
      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; PERSISTING:
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; {...initialState};
      &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; state;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I like this little pattern. Who better to decide how to clean the state than the reducer? For most reducers you just reset back to the beginning using &lt;code&gt;initialState&lt;/code&gt;, and so there’s confidence that the state going into localStorage is well formed.&lt;/p&gt;
&lt;p&gt;And with that, my persistence code is now&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;save&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;state&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; stateForPersistence = rootReducer(state, { &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;: PERSISTING });

  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; serialized = &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.stringify(stateForPersistence);
  localStorage[localStorageKey] = serialized;
}

&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;restore&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; localStorage[localStorageKey] &amp;amp;&amp;amp;
  &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.parse(localStorage[localStorageKey]);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Where &lt;code&gt;rootReducer&lt;/code&gt; is built using redux’s &lt;code&gt;combineReducers&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>The Sega Saturn and Transparency</title>
      <link>http://mattgreer.org/articles/sega-saturn-and-transparency/</link>
      <pubDate>Fri, 22 Jan 2016 16:00:00 -0800</pubDate>
      <guid isPermaLink="true">http://mattgreer.org/articles/sega-saturn-and-transparency/</guid>
      <author></author>
      <description>&lt;p&gt;The Sega Saturn is notorious for not being able to pull off transparency effects as well as its competitors. But the Saturn does do proper transparency effects as many games demonstrate. So why did so many developers so often settle on the “mesh” approach in their Saturn games?
&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This article is based on a YouTube video made by Low Score Boy. See the &lt;a href=&quot;#and-thanks-to-low-score-boy&quot;&gt;thank you section&lt;/a&gt; at the bottom of this post.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;the-problem&quot;&gt;The problem&lt;/h2&gt;
&lt;p&gt;Often Saturn games want to do a transparency effect but instead settle for a mesh approach.&lt;/p&gt;
&lt;p&gt;Here in the beginning of Mega Man X4, the spotlights in the Saturn version are a mesh.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;img/mmx4Saturn.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;But they are truly transparent on the PlayStation.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;img/mmx4PSX.png&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;callout pitfall&quot;&gt;
  Notice the Saturn is missing the second orange spotlight? It comes through fine on the PlayStation. It’s technically there on the Saturn too (you can just see the beginnings of it) but the mesh approach does not allow it to display.
&lt;/div&gt;

&lt;p&gt;And if you just walk forward a little bit, you find your character encased in a transparent glass tube, showing transparency works just fine on the Saturn!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;img/mmx4SaturnTube.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;So what’s up with the spotlights?&lt;/p&gt;
&lt;h2 id=&quot;a-tale-of-two-processors&quot;&gt;A Tale of Two Processors&lt;/h2&gt;
&lt;p&gt;Of the Saturn’s 8 processors, 2 are dedicated to drawing graphics onto the screen, the VDP1 and the VDP2.&lt;/p&gt;
&lt;h3 id=&quot;the-vdp1&quot;&gt;The VDP1&lt;/h3&gt;
&lt;p&gt;The VDP1 is responsible for “highly dynamic” graphics. It is capable of drawing sprites and polygons into a frame buffer. The VDP1 has access to two frame buffers, it builds the next frame of the game in one buffer while the other one is being displayed.&lt;/p&gt;
&lt;p&gt;To use the VDP1, you send it commands, which are 32 byte chunks of data that tell the VDP1 what to do. Of the many commands it understands, several are for drawing sprites and polygons. As far as the VDP1 is concerned, a sprite is really just a textured polygon. Both 2D and 3D games use the same command primitives to build up their scenes on the Saturn.&lt;/p&gt;
&lt;p&gt;When sending a sprite draw command to the VDP1, you can tell it that sprite’s pixels should be fully opaque, half-transparent or a mesh (along with some other options that I’m glossing over).&lt;/p&gt;
&lt;div class=&quot;callout wisdom&quot;&gt;
Whenever you see a “mesh” in a Sega Saturn game, the VDP1 was responsible. The developers didn’t have to create a second meshed version of the sprite, they just added the mesh flag to the command and the VDP1 responds by adding every other pixel into its buffer.
&lt;/div&gt;

&lt;h3 id=&quot;the-vdp2&quot;&gt;The VDP2&lt;/h3&gt;
&lt;p&gt;The VDP2 is responsible for managing 5 background layers (they are officially called “scenes”, but I will use the term “layer” as I think it’s clearer). It also has the job of taking the VDP1’s frame buffer and incorporating it into the final image, in a sense the frame buffer is a sixth layer. But much more on that later.&lt;/p&gt;
&lt;p&gt;The background layers can be stacked in any order, scrolled independently, some can be rotated and scaled, and some can be scaled on the z-axis accomplishing “mode 7” a la the Super Nintendo.&lt;/p&gt;
&lt;h2 id=&quot;bringing-vdp1-and-vdp2-together&quot;&gt;Bringing VDP1 and VDP2 together&lt;/h2&gt;
&lt;p&gt;When it comes time to compose all of the layers together into an image to display on the screen, priority is used to decide on order. Each VDP2 layer has a priority set, and &lt;em&gt;each sprite in the VDP1 frame buffer also has a priority.&lt;/em&gt; This allows different sprites to end up behind and in front of different layers.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;img/composingBlowup.svg&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;
&lt;div class=&quot;callout wisdom&quot;&gt;
Technically the priority in the VDP1 frame buffer is per pixel, not per sprite. The VDP2 doesn’t know of or care about sprites, it only sees pixels.
&lt;/div&gt;

&lt;p&gt;When the VDP2 is composing all the layers together, it’s also taking transparency into account. If a pixel in a higher priority layer is set to half-transparent, the final pixel will be the result of averaging the pixels from both layers together.&lt;/p&gt;
&lt;h2 id=&quot;the-vdp1-s-frame-buffer-is-only-one-layer-&quot;&gt;The VDP1’s frame buffer is only one “layer”&lt;/h2&gt;
&lt;p&gt;Here’s the rub. When adding sprites to the frame buffer, at the end of the day they all come together into one pile of pixels. It’s as if all the sprites join forces to become a single VDP2 layer. The VDP2 can only do transparency effects across layers. The Saturn is not capable of handling transparency effects between sprites.&lt;/p&gt;
&lt;p&gt;If two sprites in the frame buffer overlap each other and both are opaque, then no big deal, the second sprite’s pixel data replaces the first sprite’s data in the buffer.&lt;/p&gt;
&lt;p&gt;But if the second sprite wants to be half-transparent, it will still occupy that section of the buffer and clobber the previous sprite, but the data now sports a transparency flag.&lt;/p&gt;
&lt;p&gt;Here in Guardian Heroes, Nicole’s cape is translucent, it’s a sprite that has been set to half-transparent.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;img/guardianHeroesNoOverlapSprites.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;But when she overlaps with another sprite, her cape “swallows” that sprite’s data, still showing through to the background scene and not the sprite underneath. That’s because the sprite data underneath no longer exists, instead Nicole’s cape replaced it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;img/guardianHeroesOverlapTransparentSprites.png&quot; /&gt;&lt;/p&gt;
&lt;div class=&quot;callout wisdom&quot;&gt;
In other words, every pixel in the VDP1 frame buffer can have a corresponding priority and transparency value. But at the end of the day, there’s still only one pixel to work with. Overlapping sprites clobber each other. The last sprite to be drawn wins.
&lt;/div&gt;

&lt;h2 id=&quot;meshes-to-the-rescue-&quot;&gt;Meshes to the “rescue”&lt;/h2&gt;
&lt;p&gt;The way the VDP1 and VDP2 interact with each other works great for the most part, allowing the creation of elaborate game scenes. But half-transparency of sprites is a major limitation. Sega addressed the problem by allowing the mesh flag. This allows a quasi transparency effect without blowing sprites away.&lt;/p&gt;
&lt;p&gt;By setting the mesh flag, the VDP1 will only draw every other pixel of a sprite into its buffer, allowing the previous sprite data to still show through in the gaps. That is exactly what the spotlights are doing in Mega Man X4, and they do so so that the foreground spotlights don’t swallow up Mega Man and the enemies.&lt;/p&gt;
&lt;h3 id=&quot;the-tvs-of-the-nineties&quot;&gt;The TVs of the nineties&lt;/h3&gt;
&lt;p&gt;When the Saturn was a current console, most people were hooking it up to their TV using composite cables. Composite is a low quality signal that combines all of the color information into a single blurry stream. This meant the mesh effect was not as noticeable, as the mesh pixels would tend to average out in the blurriness and result in a decent approximation of transparency. Complaints of the Saturn’s meshes really started to rise when emulation and use of upscalers like the XRGB Mini enabled people to play Saturn games with a crystal clear picture.&lt;/p&gt;
&lt;p&gt;Here is Mega Man X4 running via composite into my HDTV (oh the humanity…)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;img/mmx4ViaComposite.jpg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Not a perfect simulation of a typical 90s TV, but the best I can do :)&lt;/p&gt;
&lt;h2 id=&quot;a-vdp1-vdp2-simulator&quot;&gt;A VDP1/VDP2 Simulator&lt;/h2&gt;
&lt;p&gt;Below is a simple simulator that shows how the VDP2 combines all the information into a final image on the screen. The spotlight in front is the most interesting thing here, when you play with its mesh and transparency settings, notice what happens to the other sprites behind it.&lt;/p&gt;
&lt;p&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;simplegrid.css&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;dist/bundle.css&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;css/font-awesome.min.css&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;div id='simulator-root'&gt;&lt;/div&gt;&lt;/p&gt;
&lt;script src=&quot;dist/bundle.min.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;and-thanks-to-low-score-boy&quot;&gt;And thanks to Low Score Boy&lt;/h2&gt;
&lt;p&gt;A big thank you to Low Score Boy on YouTube. His &lt;a href=&quot;https://www.youtube.com/watch?v=f_OchOV_WDg&quot;&gt;video on this very subject&lt;/a&gt; was an inspiration and source of lots of information for this blog post. I asked him if I could write a blog post based on his video. His video is highly recommended, he goes into more examples, shows how some developers worked around the limitations of the hardware and dives into 3D rendering too.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Server Side React and Falcor</title>
      <link>http://mattgreer.org/articles/server-side-react-and-falcor/</link>
      <pubDate>Sat, 02 Jan 2016 16:00:00 -0800</pubDate>
      <guid isPermaLink="true">http://mattgreer.org/articles/server-side-react-and-falcor/</guid>
      <author></author>
      <description>&lt;p&gt;Everything I have found about Falcor has been strongly focused on the client side. I am building a webapp that involves server side React rendering, and I wanted to use Falcor. Here’s how I wired up a server side Falcor “client” to accomplish this.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://netflix.github.io/falcor/&quot;&gt;Falcor&lt;/a&gt; is a new open source library from Netflix that offers a new approach to retrieving data for an application. It is similar in concept to &lt;a href=&quot;https://facebook.github.io/relay/&quot;&gt;Facebook’s Relay&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I feel like if you are building a React-based app today, you really should take advantage of server side rendering. The days of 100% JavaScript driven UIs should be behind us. But there isn’t much out there on combining server side React with Falcor. The Falcor docs strictly focus on initiating your data retrieval on the client.&lt;/p&gt;
&lt;h2 id=&quot;datasources-routers-and-models&quot;&gt;DataSources, Routers and Models&lt;/h2&gt;
&lt;p&gt;In Falcor, the &lt;code&gt;Model&lt;/code&gt; is the component that initiates data requests. It can get its data either from its internal &lt;code&gt;cache&lt;/code&gt; property, or by hooking up to a &lt;code&gt;DataSource&lt;/code&gt;. Falcor seemingly only ships with one DataSource, the &lt;code&gt;HttpDataSource&lt;/code&gt;, which hooks up a client side Model to a back end server via good ol’ http requests.&lt;/p&gt;
&lt;p&gt;Conversely, the Falcor Router lives on the server, and responds to requests from client side Models.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/server-side-react-and-falcor/img/falcor-end-to-end.png&quot; alt=&quot;colorTable&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(diagram stolen from &lt;a href=&quot;https://netflix.github.io/falcor/documentation/model.html&quot;&gt;the Falcor website&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I want a Model on the server though, so HttpDataSource is useless here. But the Router comes to the rescue, as it also implements the DataSource interface.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; { Model } &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'falcor'&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; DemoRouter &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'./Router'&lt;/span&gt;;

&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; demoRouter = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DemoRouter();
&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; model = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Model({ &lt;span class=&quot;attr&quot;&gt;source&lt;/span&gt;: demoRouter });
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So the same router that will serve my client can double to serve my server too. Cool. Technically you can get away with just using the router directly, as both &lt;code&gt;model.get(...)&lt;/code&gt; and &lt;code&gt;router.get(...)&lt;/code&gt; do roughly the same thing. But if you go through a Model, you gain caching, de-duping, the ability to use path syntax strings among other advantages.&lt;/p&gt;
&lt;h2 id=&quot;some-wrenches-redux-and-react-router&quot;&gt;Some Wrenches: Redux and React Router&lt;/h2&gt;
&lt;p&gt;I’m also using these two libraries, and they complicate hooking up my Falcor model to my server side React components a bit. Here is my Express handler that is using react-router (simplified a bit)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;app.use(&lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;req, res, next&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {
  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; location = history.createLocation(req.path);
  match({
    routes,
    location
  }, (err, redirectLocation, renderProps) =&amp;gt; {
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (err) {
      &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.error(err);
      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; next(err);
    }

    res.send(renderToString(
      &lt;span class=&quot;comment&quot;&gt;// notice that store doesn't actually exist, yet ...&lt;/span&gt;
      &amp;lt;Provider store={store}&amp;gt;
        &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;RoutingContext&lt;/span&gt; {&lt;span class=&quot;attr&quot;&gt;...renderProps&lt;/span&gt;}/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;Provider&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    );
  });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using react-router’s &lt;code&gt;match&lt;/code&gt;, the path is matched up to a route. From there, renderProps contains everything needed to render that route on the server. &lt;code&gt;Provider&lt;/code&gt; is a react-redux component and glues data in the store to the components inside of it. Server side React rendering is synchronous, so I need to get my data from Falcor before calling &lt;code&gt;renderToString&lt;/code&gt;. In other words, the &lt;code&gt;store&lt;/code&gt; getting passed to Provider needs to both exist and be populated.&lt;/p&gt;
&lt;h2 id=&quot;gluing-falcor-and-react-router&quot;&gt;Gluing Falcor and react-router&lt;/h2&gt;
&lt;p&gt;Ok, so the client has requested some random page of my app. The router has mapped that random page to some random component. All of my components have different data needs. So how do I know what to ask Falcor? I decided the components should tell me. For example, here is the component for the main page of the app&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; { connect } &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'react-redux'&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Hello &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'../components/Hello'&lt;/span&gt;;

&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;mapStateToProps&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;state&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; {
    &lt;span class=&quot;attr&quot;&gt;hellofalcor&lt;/span&gt;: state.hello.hellofalcor,
    &lt;span class=&quot;attr&quot;&gt;helloagain&lt;/span&gt;: state.hello.helloagain
  };
}

&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; HelloPage = connect(mapStateToProps)(Hello);

HelloPage.serverFalcorPaths = [
  { &lt;span class=&quot;attr&quot;&gt;namespace&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;'hello'&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;paths&lt;/span&gt;: [[&lt;span class=&quot;string&quot;&gt;'hellofalcor'&lt;/span&gt;], [&lt;span class=&quot;string&quot;&gt;'helloagain'&lt;/span&gt;]] }
];

&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; HelloPage;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you’ve not used Redux this probably look nuts. &lt;code&gt;Hello&lt;/code&gt; is a vanilla React component, and redux’s &lt;code&gt;connect()&lt;/code&gt; creates a new component which marries &lt;code&gt;Hello&lt;/code&gt; to data in the store.&lt;/p&gt;
&lt;p&gt;The new thing here is &lt;code&gt;serverFalcorPaths&lt;/code&gt;, which is my hook to hint to Falcor what data it should grab when doing the server side render. Notice how &lt;code&gt;mapStateToProps&lt;/code&gt; has its data down in a &lt;code&gt;hello&lt;/code&gt; subobject? That’s also a common redux thing. My goal is to create an initial set of state data that I can feed into Redux, then into the components, then finally out via &lt;code&gt;renderToString&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So back to the Express handler, let’s grab &lt;code&gt;serverFalcorPaths&lt;/code&gt; and get our data&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;app.use(&lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;req, res, next&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {
  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; location = history.createLocation(req.path);
  match({
    routes,
    location
  }, (err, redirectLocation, renderProps) =&amp;gt; {
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (err) {
      &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.error(err);
      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; next(err);
    }
    getFalcorDataForComponents(renderProps.components)
      .then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;initialStoreData&lt;/span&gt; =&amp;gt;&lt;/span&gt; {
        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; store = createStore(reducers, initialStoreData);
        res.send(renderToString(
          &lt;span class=&quot;comment&quot;&gt;// the store prop here is the gotcha&lt;/span&gt;
          &amp;lt;Provider store={store}&amp;gt;
            &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;RoutingContext&lt;/span&gt; {&lt;span class=&quot;attr&quot;&gt;...renderProps&lt;/span&gt;}/&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;Provider&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        );
      });
  });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;renderProps&lt;/code&gt; from &lt;code&gt;match()&lt;/code&gt; contains everything needed to pull off the render, including the React components themselves. So if I find &lt;code&gt;renderProps.components[i].serverFalcorPaths&lt;/code&gt;, then I know that component needs a little Falcor love before continuing. That’s what &lt;code&gt;getFalcorDataForComponents&lt;/code&gt; is up to.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getFalcorDataForComponents&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;components = []&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; falcorRouter = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FalcorRouter();
  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; model = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Model({ &lt;span class=&quot;attr&quot;&gt;source&lt;/span&gt;: falcorRouter });

  &lt;span class=&quot;comment&quot;&gt;// grab all the falcor paths the components&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;// are requesting into one large bag&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; falcorPaths = components.reduce(&lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;paths, cmp&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (cmp &amp;amp;&amp;amp; cmp.serverFalcorPaths) {
      &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; cmpPaths = _.pluck(cmp.serverFalcorPaths, &lt;span class=&quot;string&quot;&gt;'paths'&lt;/span&gt;);
      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; paths.concat(...cmpPaths);
    } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {
      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; paths;
    }
  }, []);

  &lt;span class=&quot;comment&quot;&gt;// blindly get all the needed data, we ignore&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;// the result because we are really&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;// just populating the model's cache&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; model.get(...falcorPaths).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {
    &lt;span class=&quot;comment&quot;&gt;// and now that we have it (in the cache), sort it out&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;// into the namespaces the components specified&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;// this enables the store to be populated the same&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;// as if the reducers and redux's combineReducers()&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;// had assembled the data&lt;/span&gt;

    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; componentPromises = components.map(getComponentData.bind(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, model));

    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;.all(_.flatten(componentPromises)).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;results&lt;/span&gt; =&amp;gt;&lt;/span&gt; {
      &lt;span class=&quot;comment&quot;&gt;// assign could lead to clobbered data depending on&lt;/span&gt;
      &lt;span class=&quot;comment&quot;&gt;// how your data is set up, better to use a deep merge.&lt;/span&gt;
      &lt;span class=&quot;comment&quot;&gt;// But this suffices for blog post/demo purposes&lt;/span&gt;
      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign.apply(&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;, [{}, ...results]);
    });
  });
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This takes two steps. First grab &lt;em&gt;all&lt;/em&gt; of the Falcor paths that all of the components are requesting. We’ll jam that big blob of paths into the Model. Falcor does its thing and all of those paths get satisfied with data. The Model also sticks this data into its cache, so if we request the data again, it will just go to its cache and be very cheaply retrieved.&lt;/p&gt;
&lt;p&gt;So step two takes advantage of the cache and requests everything again, this time stitching the final result into the shape that redux wants.&lt;/p&gt;
&lt;p&gt;So step one got us&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  hellofalcor: &amp;#39;hello from falcor&amp;#39;,
  helloagain: &amp;#39;hello again from falcor&amp;#39;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And step two massages it into&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  hello: {
    hellofalcor: &amp;#39;hello from falcor&amp;#39;,
    helloagain: &amp;#39;hello again from falcor&amp;#39;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;which satisfies redux’s &lt;code&gt;combineReducers()&lt;/code&gt;‘s needs, and ultimately satisfies the components’s needs.&lt;/p&gt;
&lt;p&gt;This is a super contrived example. But in a real app, each component will likely need a lot of paths, and want their results placed into different subobjects.&lt;/p&gt;
&lt;p&gt;Remember that we are going through a Falcor Model, which will de-dupe paths. So components are all free to just specify whatever they want, and Falcor will sort it all out.&lt;/p&gt;
&lt;h2 id=&quot;demo-app&quot;&gt;Demo app&lt;/h2&gt;
&lt;p&gt;I captured all of this into a “small” demo app here: &lt;a href=&quot;https://github.com/city41/server-side-react-and-falcor&quot;&gt;https://github.com/city41/server-side-react-and-falcor&lt;/a&gt; – check the README on how to get it running.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Impromptu Web Scraping</title>
      <link>http://mattgreer.org/articles/impromptu-web-scraping/</link>
      <pubDate>Fri, 03 Jul 2015 17:00:00 -0700</pubDate>
      <guid isPermaLink="true">http://mattgreer.org/articles/impromptu-web-scraping/</guid>
      <author></author>
      <description>&lt;p&gt;The JavaScript console and the DOM API can be your friend when you need to grab some data from a website.
&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;I am working on a little toy project involving Legos. I needed to gather all colors available for bricks into a JavaScript object, something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; brickColors = {
  &lt;span class=&quot;string&quot;&gt;&quot;Medium Blue&quot;&lt;/span&gt;: {
    &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;102&lt;/span&gt;,
    &lt;span class=&quot;attr&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;rgb(71, 140, 198)&quot;&lt;/span&gt;
  },
  &lt;span class=&quot;string&quot;&gt;&quot;Sand Blue&quot;&lt;/span&gt;: {
    &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;135&lt;/span&gt;,
    &lt;span class=&quot;attr&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;rgb(94, 116, 140)&quot;&lt;/span&gt;
  },
  ...
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The colors are freely available on the web, such as &lt;a href=&quot;http://lego.wikia.com/wiki/Color_Palette&quot;&gt;here on Brickipedia&lt;/a&gt;, but man, there’s a lot of them and it’s pretty darn tedious to copy and paste each color’s properties over into my editor.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/impromptu-web-scraping/colorTable.png&quot; alt=&quot;colorTable&quot;&gt;&lt;/p&gt;
&lt;p&gt;I’ll have JavaScript do the work for me, pop open the console and begin with …&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelectorAll(&lt;span class=&quot;string&quot;&gt;'tr'&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;is a good start. It grabs all the table rows on the page.&lt;/p&gt;
&lt;p&gt;From there, I turn the result into an array since querySelectorAll returns a &lt;code&gt;StaticNodeList&lt;/code&gt;, and then filter it down to rows that have four cells, as it turns out the two tables with only three cells per row I don’t care about&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;[].slice.call(&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelectorAll(&lt;span class=&quot;string&quot;&gt;'tr'&lt;/span&gt;))
  .filter(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;tr&lt;/span&gt;) &lt;/span&gt;{ &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; tr.children.length === &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;; })
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Actually I don’t care about the header rows either, so filter them out too&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;[].slice.call(&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelectorAll(&lt;span class=&quot;string&quot;&gt;'tr'&lt;/span&gt;))
  &lt;span class=&quot;comment&quot;&gt;// use nodeName to only grab &amp;lt;td&amp;gt;s, ignoring the &amp;lt;th&amp;gt;s&lt;/span&gt;
  .filter(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;tr&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; tr.children.length === &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &amp;amp;&amp;amp;
           tr.children[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].nodeName === &lt;span class=&quot;string&quot;&gt;&quot;TD&quot;&lt;/span&gt;;
  })
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;callout pitfall&quot;&gt;
I got really lucky here, on some webpages narrowing down your query to just the relevant data can be tricky. You’ll usually need a much more clever query for &lt;code&gt;querySelectorAll&lt;/code&gt;
&lt;/div&gt;

&lt;p&gt;from here, each &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; child inside of the &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; contains a piece of data I want. So I can &lt;code&gt;reduce&lt;/code&gt; the whole shebang into an object&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;[].slice.call(&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelectorAll(&lt;span class=&quot;string&quot;&gt;'tr'&lt;/span&gt;))
  .filter(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;tr&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; tr.children.length === &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &amp;amp;&amp;amp;
           tr.children[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].nodeName === &lt;span class=&quot;string&quot;&gt;&quot;TD&quot;&lt;/span&gt;;
  })
  .reduce(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;accum, tr&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;comment&quot;&gt;// fallback to the official name if the color lacks a common name&lt;/span&gt;
    accum[tr.children[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;].innerText || tr.children[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;].innerText] = {
      &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;(tr.children[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].innerText),
      &lt;span class=&quot;attr&quot;&gt;officialName&lt;/span&gt;: tr.children[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;].innerText,
      &lt;span class=&quot;attr&quot;&gt;color&lt;/span&gt;: tr.children[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].style.backgroundColor
    };
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; accum
  }, {});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That gets me the data I want, but I can’t quite paste it into my editor yet. &lt;code&gt;JSON.stringify&lt;/code&gt; will help through&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;colors = [].slice.call(&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelectorAll(&lt;span class=&quot;string&quot;&gt;'tr'&lt;/span&gt;))
  .filter(...)
  .reduce(...);

&lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.stringify(colors);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Giving me&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-JSON&quot;&gt;{&amp;quot;White&amp;quot;:{&amp;quot;id&amp;quot;:1,&amp;quot;officialName&amp;quot;:&amp;quot;White&amp;quot;,&amp;quot;color&amp;quot;:&amp;quot;rgb(255, 255, 255)&amp;quot;},&amp;quot;Tan&amp;quot;:{&amp;quot;id&amp;quot;:5,&amp;quot;officialName&amp;quot;:&amp;quot;Brick
Yellow&amp;quot;,&amp;quot;color&amp;quot;:&amp;quot;rgb(217, 187, 123)&amp;quot;},&amp;quot;Flesh&amp;quot;:{&amp;quot;id&amp;quot;:18,&amp;quot;officialName&amp;quot;:&amp;quot;Nougat&amp;quot;,&amp;quot;color&amp;quot;:&amp;quot;rgb(214, 114,
64)&amp;quot;},&amp;quot;Red&amp;quot;:{&amp;quot;id&amp;quot;:21,&amp;quot;officialName&amp;quot;:&amp;quot;Bright Red&amp;quot;,&amp;quot;color&amp;quot;:&amp;quot;rgb(222, 0,
13)&amp;quot;},&amp;quot;Blue&amp;quot;:{&amp;quot;id&amp;quot;:23,&amp;quot;officialName&amp;quot;:&amp;quot;Bright Blue&amp;quot;,&amp;quot;color&amp;quot;:&amp;quot;rgb(0, 87,
168)&amp;quot;},&amp;quot;Yellow&amp;quot;:{&amp;quot;id&amp;quot;:24,&amp;quot;officialName&amp;quot;:&amp;quot;Bright Yellow&amp;quot;,&amp;quot;color&amp;quot;:&amp;quot;rgb(254, 196,
0)&amp;quot;},&amp;quot;Black&amp;quot;:{&amp;quot;id&amp;quot;:26,&amp;quot;officialName&amp;quot;:&amp;quot;Black&amp;quot;,&amp;quot;color&amp;quot;:&amp;quot;rgb(1, 1, 1)&amp;quot;},&amp;quot;Green&amp;quot;:{&amp;quot;id&amp;quot;:28,&amp;quot;officialName&amp;quot;:&amp;quot;Dark
Green&amp;quot;,&amp;quot;color&amp;quot;:&amp;quot;rgb(0, 123, 40)&amp;quot;},&amp;quot;Bright Green&amp;quot;:{&amp;quot;id&amp;quot;:37,&amp;quot;officialName&amp;quot;:&amp;quot;Bright Green&amp;quot;,&amp;quot;color&amp;quot;:&amp;quot;rgb(0, 150,
36)&amp;quot;},&amp;quot;Dark Orange&amp;quot;:{&amp;quot;id&amp;quot;:38,&amp;quot;officialName&amp;quot;:&amp;quot;Dark Orange&amp;quot;,&amp;quot;color&amp;quot;:&amp;quot;rgb(168, 61, 21)&amp;quot;},&amp;quot;Medium
Blue&amp;quot;:{&amp;quot;id&amp;quot;:102,&amp;quot;officialName&amp;quot;:&amp;quot;Medium Blue&amp;quot;,&amp;quot;color&amp;quot;:&amp;quot;rgb(71, 140,
198)&amp;quot;},&amp;quot;Orange&amp;quot;:{&amp;quot;id&amp;quot;:106,&amp;quot;officialName&amp;quot;:&amp;quot;Bright Orange&amp;quot;,&amp;quot;color&amp;quot;:&amp;quot;rgb(231, 99,
24)&amp;quot;},&amp;quot;Lime&amp;quot;:{&amp;quot;id&amp;quot;:119,&amp;quot;officialName&amp;quot;:&amp;quot;Bright Yellowish-Green&amp;quot;,&amp;quot;color&amp;quot;:&amp;quot;rgb(149, 185,
11)&amp;quot;},&amp;quot;Magenta&amp;quot;:{&amp;quot;id&amp;quot;:124,&amp;quot;officialName&amp;quot;:&amp;quot;Bright Reddish Violet&amp;quot;,&amp;quot;color&amp;quot;:&amp;quot;rgb(156, 0, 107)&amp;quot;},&amp;quot;Sand
Blue&amp;quot;:{&amp;quot;id&amp;quot;:135,&amp;quot;officialName&amp;quot;:&amp;quot;Sand Blue&amp;quot;,&amp;quot;color&amp;quot;:&amp;quot;rgb(94, 116, 140)&amp;quot;}

...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then just copy and paste the entire result of the stringify into my code, have my editor format it, and that’s it. Much easier than tediously copying each color over, and a little fun too.&lt;/p&gt;
&lt;div class=&quot;callout wisdom&quot;&gt;
You can also have &lt;code&gt;stringify&lt;/code&gt; format the result for you by making use of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#space_argument&quot;&gt;space argument&lt;/a&gt;. &lt;code&gt;JSON.stringify(colors, null, 2)&lt;/code&gt; will format the resulting string nicely.
&lt;/div&gt;
</description>
    </item>
    <item>
      <title>Insecure Websites Still Abound</title>
      <link>http://mattgreer.org/articles/insecure-websites-still-abound/</link>
      <pubDate>Fri, 08 May 2015 17:00:00 -0700</pubDate>
      <guid isPermaLink="true">http://mattgreer.org/articles/insecure-websites-still-abound/</guid>
      <author></author>
      <description>&lt;p&gt;It’s 2015, why is web security &lt;em&gt;still&lt;/em&gt; so hit and miss?&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;I recently bought a Mini Cooper. Fun little car! When my first statement came, I wanted to sign up to do my payments online.  &lt;/p&gt;
&lt;p&gt;Whenever I sign up for a new website that will hold any kind of sensitive information I always kick the tires of the site a bit to get a sense of how well it is implemented. The first step is to follow the “forgot password?” procedure and see what they do.&lt;/p&gt;
&lt;p&gt;In the case of the &lt;a href=&quot;https://ol.miniusa.com/&quot;&gt;Mini Cooper Owner’s Lounge&lt;/a&gt; the forgot password procedure simply asks for your usename, zip code, date of birth and the last four digits of your social security number.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;diagram&quot; alt=&quot;mini password reset screenshot&quot; src=&quot;miniPasswordReset.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;At first I figured surely they’d send me a password reset email after this. Nope, that’s it! You can then proceed to change your password right then and there. So in the case of Mini USA, the only thing between my bank account and &lt;em&gt;anyone at all&lt;/em&gt; is the last four digits of my SSN.&lt;/p&gt;
&lt;p&gt;A lot of people know my SSN. As much as I hate that fact, it’s true for all of us. And if someone really wanted to figure out my last four digits, it’s pretty darn doable. Hell, I wouldn’t be surprised at all if the Mini website has no measures to prevent brute force attacks, and there’s only 10,000 possibilities.&lt;/p&gt;
&lt;p&gt;I contacted Mini USA and they insist their website is secure. So I will be mailing my payments in the old fashioned way, which sucks.&lt;/p&gt;
&lt;h2 id=&quot;let-s-get-past-this-&quot;&gt;Let’s Get Past This!&lt;/h2&gt;
&lt;p&gt;Ugh, it is 2015 everybody! Why is this still an issue? Why are there still so many websites out there that get this &lt;em&gt;so&lt;/em&gt; wrong? Why are software developers seemingly the only people that care about this?&lt;/p&gt;
&lt;h2 id=&quot;when-making-a-website&quot;&gt;When Making a Website&lt;/h2&gt;
&lt;p&gt;If you’re making a website, your best course of action is to avoid sensitive information and security as much as possible. Leave it to the experts. Don’t store bank account info or credit card numbers, let vetted companies do it for you. And if you really must do it, hire someone who knows their stuff and will do it right.&lt;/p&gt;
&lt;p&gt;Don’t roll your own authentication system, learn a little bit about encryption, and offer &lt;a href=&quot;http://www.brool.com/index.php/using-google-authenticator-for-your-website&quot;&gt;2 step verification&lt;/a&gt; (Google makes it so easy!)&lt;/p&gt;
&lt;p&gt;Don’t store passwords in plaintext or in a way that makes them easily recoverable. Try really hard to just not store passwords at all!&lt;/p&gt;
&lt;p&gt;And for the love of all things that are holy, do not add “security” questions!&lt;/p&gt;
&lt;p&gt;Oh and one more thing, please consider running your entire site over TLS (aka SSL, https).&lt;/p&gt;
&lt;h2 id=&quot;when-using-websites&quot;&gt;When Using Websites&lt;/h2&gt;
&lt;p&gt;I highly recommend using a password manager that will enable you to easily have a different long, difficult password for all of your sites.  &lt;/p&gt;
&lt;p&gt;If a website has “security” questions, treat them like additional passwords. I have my password manager generate passwords as answers to these questions, and store them in the manager. Sorry websites, figuring out the color of my first car is not that hard!&lt;/p&gt;
&lt;p&gt;I also memorize my credit card number. I realize that’s a little on the hardcore side, but I never have to have websites store it, and that’s a nice added level of comfort for paranoid ol’ me.&lt;/p&gt;
&lt;h2 id=&quot;phew&quot;&gt;Phew&lt;/h2&gt;
&lt;p&gt;This is a huge pet peeve of mine. So thanks for reading through my rant. Maybe we’ll figure this out within the next decade or so …&lt;/p&gt;
</description>
    </item>
    <item>
      <title>JavaScript is a Pass by Value Language</title>
      <link>http://mattgreer.org/articles/javascript-is-a-pass-by-value-language/</link>
      <pubDate>Mon, 02 Mar 2015 16:00:00 -0800</pubDate>
      <guid isPermaLink="true">http://mattgreer.org/articles/javascript-is-a-pass-by-value-language/</guid>
      <author></author>
      <description>&lt;p&gt;A common misconception about JavaScript is that it supports both &lt;em&gt;pass by value&lt;/em&gt; and &lt;em&gt;pass by reference&lt;/em&gt; when calling functions. In actuality, JavaScript always passes by value.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/more&gt;&lt;/p&gt;
&lt;h2 id=&quot;pass-by-wha-&quot;&gt;Pass by wha?&lt;/h2&gt;
&lt;p&gt;What are you talking about?&lt;/p&gt;
&lt;p&gt;Let’s look at this example&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;clamp&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;value, valueMax, valueMin&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.min(valueMax, &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.max(value, valueMin));
}

clamp(&lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What happens when we pass &lt;code&gt;valueMin&lt;/code&gt; from clamp into max? Do they both have the same &lt;code&gt;valueMin&lt;/code&gt;? In other words, do they both get access to the same chunk of memory? That depends. In JavaScript clamp and max are each given their own copy of &lt;code&gt;valueMin&lt;/code&gt;. No matter what, clamp’s &lt;code&gt;valueMin&lt;/code&gt; will never interfere with max’s &lt;code&gt;valueMin&lt;/code&gt; as they are two completely different chunks of memory. This is know as “pass by value”.&lt;/p&gt;
&lt;h2 id=&quot;pass-by-reference&quot;&gt;Pass by reference&lt;/h2&gt;
&lt;p&gt;It’s possible for functions to share parameters amongst each other. This is the opposite of pass by value and is known as “pass by reference”. When passing by reference, the functions involve are all privy to the same chunk of memory, and so can see each other’s changes. Many languages don’t offer this feature. JavaScript does not, but C# does.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-csharp&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// this is C#&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyProgram&lt;/span&gt; {
  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;mutate&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a&lt;/span&gt;) &lt;/span&gt;{
    a = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;;
  }

  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Main&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;[] args&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; myA = &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;;
    mutate(&lt;span class=&quot;keyword&quot;&gt;ref&lt;/span&gt; myA);

    &lt;span class=&quot;comment&quot;&gt;// prints 5  &lt;/span&gt;
    Console.WriteLine(myA);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice the &lt;code&gt;ref&lt;/code&gt; keywords? These are the indicators that will let the compiler know to do pass by reference whenever &lt;code&gt;mutate&lt;/code&gt; is called.&lt;/p&gt;
&lt;h2 id=&quot;objects-and-references-in-javascript&quot;&gt;Objects and references in JavaScript&lt;/h2&gt;
&lt;p&gt;This is where it gets a little confusing.&lt;/p&gt;
&lt;p&gt;In JavaScript – like most object oriented languages – objects are created on the heap (and in actuality primitives are too due to closures. &lt;a href=&quot;http://stackoverflow.com/a/3691209/194940&quot;&gt;This StackOverflow answer&lt;/a&gt; explains it nicely). You don’t have direct access to the heap, instead whenever working with an object you are doing so through a reference. A reference is like a pointer in C, it stores the address of the object on the heap. But unlike pointers, that’s really all they do, you can’t really do fancy things with references like you can pointers. They are simply a calling card that lets you get at your object.&lt;/p&gt;
&lt;p&gt;So what does this mean with objects and function calls?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;mutateObject&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;obj&lt;/span&gt;) &lt;/span&gt;{
  obj.foo = &lt;span class=&quot;string&quot;&gt;&quot;changed!&quot;&lt;/span&gt;;
}

&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myObj = {
  &lt;span class=&quot;attr&quot;&gt;foo&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;original value&quot;&lt;/span&gt;
};

mutateObject(myObj);

&lt;span class=&quot;comment&quot;&gt;// prints &quot;changed!&quot;&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(myObj.foo);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;isn’t that pass by reference? It actually is still pass by value. The tricky bit here is the value that got passed is a reference. Unfortunately the naming conventions are confusing. A reference in JavaScript is a chunk of memory that stores an address. &lt;code&gt;obj&lt;/code&gt; inside mutateObject and &lt;code&gt;myObj&lt;/code&gt; outside of mutate object are both references that “point” at the object. But just like up above with &lt;code&gt;valueMax&lt;/code&gt;, they are two distinct chunks of memory, both of which contain the same address.&lt;/p&gt;
&lt;p&gt;It is true that with objects in JavaScript you get some of the features that true pass by reference gives you. But you don’t get all of them.&lt;/p&gt;
&lt;h2 id=&quot;passing-object-references-by-reference&quot;&gt;Passing object references by reference&lt;/h2&gt;
&lt;p&gt;Yo dawg…&lt;/p&gt;
&lt;p&gt;Let’s head back to C# for a second.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-csharp&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyObject&lt;/span&gt; {
  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyObject&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; a&lt;/span&gt;) &lt;/span&gt;{
    A = a;
  }

  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; A { &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;; }
}

&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyProgram&lt;/span&gt; {
  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Mutate&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ref&lt;/span&gt; MyObject obj&lt;/span&gt;) &lt;/span&gt;{
    obj = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; MyObject(&lt;span class=&quot;string&quot;&gt;&quot;assigning a new object&quot;&lt;/span&gt;);
  }

  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Main&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;[] args&lt;/span&gt;) &lt;/span&gt;{
    MyObject myObj = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; MyObject(&lt;span class=&quot;string&quot;&gt;&quot;original object&quot;&lt;/span&gt;);
    MyObject anotherRefToMyObj = myObj;
    Mutate(&lt;span class=&quot;keyword&quot;&gt;ref&lt;/span&gt; myObj);

    &lt;span class=&quot;comment&quot;&gt;// prints false&lt;/span&gt;
    Console.WriteLine(Object.Equals(myObj, anotherRefToMyObj));

    &lt;span class=&quot;comment&quot;&gt;// prints &quot;assigning a new object&quot;&lt;/span&gt;
    Console.WriteLine(myObj.A);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A pretty contrived example, but the key difference here compared to JavaScript is we are able to completely reassign &lt;code&gt;myObj&lt;/code&gt; to a new object. That’s because &lt;code&gt;myObj&lt;/code&gt; in Main and &lt;code&gt;obj&lt;/code&gt; in Mutate are both the same reference. When doing &lt;code&gt;obj = new MyObject(...)&lt;/code&gt; inside Mutate, the effect is placing the address of the new object into the reference that both Main and Mutate share.&lt;/p&gt;
&lt;p&gt;Look at &lt;code&gt;anotherRefToMyObj&lt;/code&gt;, that’s not a new object, it’s a new reference. We assigned that reference the same address as &lt;code&gt;myObj&lt;/code&gt;, so before the call to Mutate, both &lt;code&gt;myObj&lt;/code&gt; and &lt;code&gt;anotherRefToMyObj&lt;/code&gt; both point at the same object. Then after Mutate(), &lt;code&gt;myObj&lt;/code&gt; now points to a different object.&lt;/p&gt;
&lt;p&gt;This is not possible in JavaScript.&lt;/p&gt;
&lt;h2 id=&quot;a-lil-pedantic&quot;&gt;A lil pedantic&lt;/h2&gt;
&lt;p&gt;True, this is pretty nitpicky stuff. But that last example of passing objects by ref in C# can come in handy at times.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Scrolling Animations With Reagent</title>
      <link>http://mattgreer.org/articles/scrolling-animations-with-reagent/</link>
      <pubDate>Wed, 25 Feb 2015 16:00:00 -0800</pubDate>
      <guid isPermaLink="true">http://mattgreer.org/articles/scrolling-animations-with-reagent/</guid>
      <author></author>
      <description>&lt;p&gt;Here is a small demo of one of those gimmicky “scroll to animate” pages built with Reagent (which is based on React.js) and ClojureScript.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;demo&quot;&gt;Demo&lt;/h2&gt;
&lt;p&gt;You can see the demo &lt;a href=&quot;http://mattgreer.org/reagent-scroll-demo&quot;&gt;here&lt;/a&gt; and its GitHub repo is &lt;a href=&quot;https://github.com/city41/reagent-scroll-demo&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here’s a quick rundown on how the system works.&lt;/p&gt;
&lt;h2 id=&quot;grabbing-window-scroll-events-with-core-async&quot;&gt;Grabbing Window Scroll Events with core.async&lt;/h2&gt;
&lt;p&gt;The animation engine itself is completely separate from window scroll events. You could just as easily feed the engine via time, a slider on the page, button presses, etc. But using the window’s scroll position is a common approach, so that’s what I did in the demo.&lt;/p&gt;
&lt;p&gt;Listening for the window scroll with &lt;code&gt;core.async&lt;/code&gt; is &lt;a href=&quot;https://github.com/city41/reagent-scroll-demo/blob/master/src/cljs/scroll_demo/scroll_chan.cljs&quot;&gt;really simple&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-clojure&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;defn-&lt;/span&gt;&lt;/span&gt; get-scroll []
  (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;dom/getDocumentScroll&lt;/span&gt;) (&lt;span class=&quot;name&quot;&gt;.-y&lt;/span&gt;)))

(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;defn-&lt;/span&gt;&lt;/span&gt; events-&amp;gt;chan [el event-type c]
  (&lt;span class=&quot;name&quot;&gt;events/listen&lt;/span&gt; el event-type #(&lt;span class=&quot;name&quot;&gt;put!&lt;/span&gt; c %))
  c)

(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;defn&lt;/span&gt;&lt;/span&gt; scroll-chan []
  (&lt;span class=&quot;name&quot;&gt;events-&amp;gt;chan&lt;/span&gt; js/window EventType/SCROLL (&lt;span class=&quot;name&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;map&lt;/span&gt;&lt;/span&gt; get-scroll))))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Every time the window produces a scroll event, we’ll jam it into a channel. The event object itself has no real scroll position information, so we throw it away and instead just query the document for its current position. That’s what’s happening with &lt;code&gt;(chan 1 (map get-scroll))&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;callout wisdom&quot;&gt;
This is all a very simple application of core.async and transducers. If this is new territory, I recommend checking out &lt;a href=&quot;http://go.cognitect.com/core_async_webinar_recording&quot;&gt;David Nolen’s webinar&lt;/a&gt; on the subject. He does a great job explaining all of this and will likely make you a fan of core.async in the process.
&lt;/div&gt;

&lt;p&gt;Now with the channel code in hand, the main file of the demo sets up a channel and pulls from it&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-clojure&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;defn&lt;/span&gt;&lt;/span&gt; listen! []
  (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;let&lt;/span&gt;&lt;/span&gt; [chan (&lt;span class=&quot;name&quot;&gt;scroll-chan&lt;/span&gt;)]
    (&lt;span class=&quot;name&quot;&gt;go-loop&lt;/span&gt; []
             (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;let&lt;/span&gt;&lt;/span&gt; [new-y (&lt;span class=&quot;name&quot;&gt;&amp;lt;!&lt;/span&gt; chan)]
               (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;reset!&lt;/span&gt;&lt;/span&gt; prev-scroll-y @cur-scroll-y)
               &lt;span class=&quot;comment&quot;&gt;;; not interested in negative values&lt;/span&gt;
               (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;reset!&lt;/span&gt;&lt;/span&gt; cur-scroll-y (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;max&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; new-y)))
               (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;recur&lt;/span&gt;&lt;/span&gt;))))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With one call to &lt;code&gt;(listen!)&lt;/code&gt;, the app will receive the new scroll position of the window and store it in &lt;code&gt;cur-scroll-y&lt;/code&gt;, and push the previous one over into &lt;code&gt;prev-scroll-y&lt;/code&gt;. These two values together are fed into the animation engine and allow the magic to happen.&lt;/p&gt;
&lt;h2 id=&quot;declarative-animations&quot;&gt;Declarative Animations&lt;/h2&gt;
&lt;p&gt;The animation system has an &lt;code&gt;animation-container&lt;/code&gt; component that takes two things: the actual Reagent component that should get animated, and an animation config that describes how the animations should occur.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-clojure&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;defn&lt;/span&gt;&lt;/span&gt; page []
  [&lt;span class=&quot;symbol&quot;&gt;:div.page&lt;/span&gt;
   [animation-container
    @prev-scroll-y
    @cur-scroll-y
    [&lt;span class=&quot;symbol&quot;&gt;:div&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;I'm going to move across the screen&quot;&lt;/span&gt;]
    {&lt;span class=&quot;symbol&quot;&gt;:style&lt;/span&gt; {&lt;span class=&quot;symbol&quot;&gt;:top&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;
             &lt;span class=&quot;symbol&quot;&gt;:left&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;
             &lt;span class=&quot;symbol&quot;&gt;:width&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;
             &lt;span class=&quot;symbol&quot;&gt;:height&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;}
     &lt;span class=&quot;symbol&quot;&gt;:animations&lt;/span&gt; {[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;] {&lt;span class=&quot;symbol&quot;&gt;:left&lt;/span&gt; [&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;]
                            &lt;span class=&quot;symbol&quot;&gt;:opacity&lt;/span&gt; [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]}}}]])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we have a page component which contains an animation-container which contains a simple little div. That little div will be what gets animated.&lt;/p&gt;
&lt;p&gt;The key bit here is &lt;code&gt;:animations {[0 1000] {:left [100 500] :opacity [1 0]}}&lt;/code&gt;. The &lt;code&gt;animations&lt;/code&gt; map has vector keys that indicate the scroll range of the window. Then the values are the animations that should occur. In this case we’re saying &lt;em&gt;“as the window scrolls from a y of 0 to 1000, move this element from 100px to 500px, and fade its opacity from 1 to 0 too.”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The ability to create maps in ClojureScript that have anything at all as their keys is really awesome.&lt;/p&gt;
&lt;p&gt;You can add more animations to the map, to allow the element to do all kinds of things. I was really pleased with the simple syntax that ClojureScript allowed me.&lt;/p&gt;
&lt;h2 id=&quot;the-animation-engine&quot;&gt;The Animation Engine&lt;/h2&gt;
&lt;p&gt;The goal of the engine is to take the animation definition and properly tween elements as the window scrolls. So if an animation wants to be active from scroll values 0 to 1000, and the user has scrolled from 0 to 20, the engine needs to figure out where on the page things should be considering the animation is only 2% done.&lt;/p&gt;
&lt;p&gt;There isn’t &lt;a href=&quot;https://github.com/city41/reagent-scroll-demo/blob/master/src/cljs/scroll_demo/scroll_engine.cljs&quot;&gt;that much code&lt;/a&gt; for the engine itself, but accounting for smooth scrolling made it a tad complicated.&lt;/p&gt;
&lt;p&gt;By “smooth scrolling” I mean keeping the animations moving smoothly forward even if the user forces the window to scroll really far at once. You can see this in the &lt;a href=&quot;http://mattgreer.org/reagent-scroll-demo&quot;&gt;demo&lt;/a&gt; by clicking in the brower’s scrollbar. This causes the scroll to jump forward, and the boxes respond by still smoothly proceeding, instead of jumping instantly to the new spot.&lt;/p&gt;
&lt;p&gt;This requires the engine to keep track of how an element’s animations are progressing and adjust them as needed whenever new scroll values come in. An element could be moving from 100px to 110px and made it to 104px when the user scrolls some more. Now the element needs to move from say 104px to 120px.&lt;/p&gt;
&lt;p&gt;This is what the call to &lt;a href=&quot;https://github.com/city41/reagent-scroll-demo/blob/31a2b5f997f3c907f971dab79b3e8f4bcb521329/src/cljs/scroll_demo/scroll_engine.cljs#L117&quot;&gt;animate!&lt;/a&gt; is doing. Whenever new scroll values come in, it’s up to &lt;code&gt;animate!&lt;/code&gt; to figure out where the element should go next. The new animation goals really get figured out in &lt;code&gt;update-tween-props&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-clojure&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;defn&lt;/span&gt;&lt;/span&gt; update-tween-props
  &lt;span class=&quot;string&quot;&gt;&quot;Given a tween object and the new state of the world, updates
  the tween so it can now progress towards the new goal. Takes into
  account how far the tween already progressed when deciding the tweens new goals.&quot;&lt;/span&gt;
  [tween pv cv duration ani]
  (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;let&lt;/span&gt;&lt;/span&gt; [current (&lt;span class=&quot;symbol&quot;&gt;:current&lt;/span&gt; tween pv)
        remaining (&lt;span class=&quot;symbol&quot;&gt;:remaining&lt;/span&gt; tween &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)
        new-duration (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;+&lt;/span&gt;&lt;/span&gt; duration remaining)]
    (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;assoc&lt;/span&gt;&lt;/span&gt; tween
           &lt;span class=&quot;symbol&quot;&gt;:ani&lt;/span&gt; ani
           &lt;span class=&quot;symbol&quot;&gt;:slice&lt;/span&gt; [current cv]
           &lt;span class=&quot;symbol&quot;&gt;:duration&lt;/span&gt; new-duration
           &lt;span class=&quot;symbol&quot;&gt;:remaining&lt;/span&gt; new-duration
           &lt;span class=&quot;symbol&quot;&gt;:current&lt;/span&gt; current)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Each animating component has a &lt;code&gt;tween&lt;/code&gt; map that keeps track of its current animation state. This method is inspecting that map, and using the new scroll position (&lt;code&gt;pv&lt;/code&gt; for previous value and &lt;code&gt;cv&lt;/code&gt; for current value) as well as how long the new animation should take. From there the tween takes the remainder of its current animation, adds it onto the new needed animation, and then it’s all set.&lt;/p&gt;
&lt;p&gt;The other piece of the puzzle is &lt;a href=&quot;https://github.com/city41/reagent-scroll-demo/blob/31a2b5f997f3c907f971dab79b3e8f4bcb521329/src/cljs/scroll_demo/scroll_engine.cljs#L112&quot;&gt;(start-loop!)&lt;/a&gt;. This part is a bit simpler. Whenever an animation-container is created, it calls &lt;code&gt;start-loop!&lt;/code&gt; to kick off a &lt;code&gt;requestAnimationFrame&lt;/code&gt; rendering loop. Inside the &lt;code&gt;requestAnimationFrame&lt;/code&gt; callback, that same tween object is told to tween itself, and move the CSS properties the appropriate amount to accomplish the animation.&lt;/p&gt;
&lt;p&gt;Both &lt;code&gt;start-loop!&lt;/code&gt; and &lt;code&gt;animate!&lt;/code&gt; make use of the same tween map (which is stored in an atom). So at the end of the day, &lt;code&gt;start-loop!&lt;/code&gt; continually marches the animation towards its current goal, and &lt;code&gt;animate!&lt;/code&gt; continually updates what the goal is based on new window scroll information.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I’m reasonably happy with this setup so far, but I’ll be tweaking and improving things as well. The code is demo quality at best and there’s a few improvements needed right off the bat, for example &lt;code&gt;requestAnimationFrame&lt;/code&gt; is always called no matter what, even if no animation is currently needed.&lt;/p&gt;
&lt;p&gt;I’m building one of those gimmicky scrolling pages now, so thought I’d have a little fun with my own engine. I’ll be improving things as the page progresses. I’ll be sure to update my blog when I have anything interesting to share.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Embedding SVG into a Reagent Component</title>
      <link>http://mattgreer.org/articles/embedding-svg-into-a-reagent-component/</link>
      <pubDate>Sun, 08 Feb 2015 16:00:00 -0800</pubDate>
      <guid isPermaLink="true">http://mattgreer.org/articles/embedding-svg-into-a-reagent-component/</guid>
      <author></author>
      <description>&lt;p&gt;SVG is still a pretty strange beast in browsers. I’m intrigued by it, but still haven’t found a truly killer way to bend it to my will. I’ve used D3 and other libraries in the past and enjoyed them, but I feel like SVG’s potential still has yet to be really unlocked. Can Clojure macros and Reagent be helpful with SVG?&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;react-and-reagent-s-svg-support&quot;&gt;React and Reagent’s SVG support&lt;/h2&gt;
&lt;p&gt;React supports SVG pretty well, you can directly place SVG in your React components, and that is true of Reagent as well&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-clojure&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;defn&lt;/span&gt;&lt;/span&gt; some-svg-component []
  [&lt;span class=&quot;symbol&quot;&gt;:svg&lt;/span&gt; {&lt;span class=&quot;symbol&quot;&gt;:x&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;:y&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;:width&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;:height&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;}
    [&lt;span class=&quot;symbol&quot;&gt;:rect&lt;/span&gt; {&lt;span class=&quot;symbol&quot;&gt;:x&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;:y&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;:width&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;:height&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;}]])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;but man, how often do you want to write out SVG by hand?&lt;/p&gt;
&lt;h2 id=&quot;embedding-svg-directly-into-a-reagent-component&quot;&gt;Embedding SVG directly into a Reagent component&lt;/h2&gt;
&lt;p&gt;With macros and &lt;a href=&quot;https://github.com/nathell/clj-tagsoup&quot;&gt;clj-tagsoup&lt;/a&gt; in hand, it’s super easy to embed an SVG file right into your Reagent code&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-clojure&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;ns&lt;/span&gt;&lt;/span&gt; embed.svg
  (&lt;span class=&quot;symbol&quot;&gt;:require&lt;/span&gt; [pl.danieljanus.tagsoup &lt;span class=&quot;symbol&quot;&gt;:as&lt;/span&gt; ts]))

(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;defmacro&lt;/span&gt;&lt;/span&gt; embed-svg [svg-file]
  (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;let&lt;/span&gt;&lt;/span&gt; [hiccup (&lt;span class=&quot;name&quot;&gt;ts/parse-string&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;slurp&lt;/span&gt;&lt;/span&gt; svg-file))]
    `~hiccup))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and then in the component&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-clojure&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;defn&lt;/span&gt;&lt;/span&gt; some-svg-component []
  (&lt;span class=&quot;name&quot;&gt;embed-svg&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;cool-svg-image.svg&quot;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This works perfectly well. The output from &lt;code&gt;clj-tagsoup&lt;/code&gt; is perfectly compatible with Reagent (so great the Clojure community has largely agreed on &lt;a href=&quot;https://github.com/weavejester/hiccup&quot;&gt;hiccup&lt;/a&gt; syntax!)&lt;/p&gt;
&lt;h2 id=&quot;taking-it-further-&quot;&gt;Taking It Further?&lt;/h2&gt;
&lt;p&gt;The above doesn’t buy you much, you’re better off including the svg in an &lt;code&gt;img&lt;/code&gt; tag. So can we do more? I’m not sure yet …&lt;/p&gt;
&lt;p&gt;I have one SVG diagram that I want users to be able to click on different parts of. From there, the page focuses on that part of the diagram. I was able to do this with macros&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-clojure&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;defn-&lt;/span&gt;&lt;/span&gt; assoc-click-handler [m]
  (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;assoc&lt;/span&gt;&lt;/span&gt; m &lt;span class=&quot;symbol&quot;&gt;:class&lt;/span&gt; `(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;if&lt;/span&gt;&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;=&lt;/span&gt;&lt;/span&gt; ~'focused-id ~(&lt;span class=&quot;symbol&quot;&gt;:id&lt;/span&gt; m)) &lt;span class=&quot;string&quot;&gt;&quot;focused&quot;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;)
           &lt;span class=&quot;symbol&quot;&gt;:on-click&lt;/span&gt;
           `(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;fn&lt;/span&gt;&lt;/span&gt; [] (&lt;span class=&quot;name&quot;&gt;history/go-to&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;str&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;/basics/rink/&quot;&lt;/span&gt; ~(&lt;span class=&quot;symbol&quot;&gt;:id&lt;/span&gt; m))))))

(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;declare&lt;/span&gt;&lt;/span&gt; create-click-handlers)

(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;defn-&lt;/span&gt;&lt;/span&gt; add-click-handlers-for-ids [obj]
  (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;cond&lt;/span&gt;&lt;/span&gt;
    (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;vector?&lt;/span&gt;&lt;/span&gt; obj) (&lt;span class=&quot;name&quot;&gt;create-click-handlers&lt;/span&gt; obj)
    (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;and&lt;/span&gt;&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;map?&lt;/span&gt;&lt;/span&gt; obj) (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;contains?&lt;/span&gt;&lt;/span&gt; obj &lt;span class=&quot;symbol&quot;&gt;:id&lt;/span&gt;)) (&lt;span class=&quot;name&quot;&gt;assoc-click-handler&lt;/span&gt; obj)
    &lt;span class=&quot;symbol&quot;&gt;:else&lt;/span&gt; obj))

(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;defn&lt;/span&gt;&lt;/span&gt; create-click-handlers [tags]
  (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;apply&lt;/span&gt;&lt;/span&gt; vector (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;map&lt;/span&gt;&lt;/span&gt; add-click-handlers-for-ids tags)))

(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;defmacro&lt;/span&gt;&lt;/span&gt; embed-clickable [svg-file]
  (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;let&lt;/span&gt;&lt;/span&gt; [hiccup (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;slurp&lt;/span&gt;&lt;/span&gt; svg-file)
                   (&lt;span class=&quot;name&quot;&gt;ts/parse-string&lt;/span&gt;)
                   (&lt;span class=&quot;name&quot;&gt;create-click-handlers&lt;/span&gt;))]
  `~hiccup))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Doing just about the same thing as before, but for any map inside of clj-tagsoup’s output that has an &lt;code&gt;id&lt;/code&gt; in it (in other words, the SVG element has an id), I also swoop in and throw a click handler on it. It’s bad practice that &lt;code&gt;assoc-click-handler&lt;/code&gt; makes assumption about its environment (&lt;code&gt;focused-id&lt;/code&gt; and &lt;code&gt;(history/go-to)&lt;/code&gt; live in the same file as where I call the macro), but I’m ok with that, at least for now.&lt;/p&gt;
&lt;p&gt;Any elements in my SVG that have ids will be “focusable” by the user clicking on them. So I am free to build a very complicated SVG in a vector editor, and still get interactivity out of it pretty painlessly.&lt;/p&gt;
&lt;h2 id=&quot;more-&quot;&gt;More?&lt;/h2&gt;
&lt;p&gt;I’m still exploring macros+SVG. I’m not convinced there’s all that much here, but if I stumble upon anything super cool I’ll definitely put up a new post here.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>A Game Made With Reagent</title>
      <link>http://mattgreer.org/articles/a-game-made-with-reagent/</link>
      <pubDate>Mon, 02 Feb 2015 16:00:00 -0800</pubDate>
      <guid isPermaLink="true">http://mattgreer.org/articles/a-game-made-with-reagent/</guid>
      <author></author>
      <description>&lt;p&gt;Mostly for the heck of it, I built Breakout using ClojureScript and Reagent. I was pretty pleased with the results.
&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;I based it off of the &lt;a href=&quot;http://www.jsbreakouts.org&quot;&gt;Breakouts project&lt;/a&gt; that I started a while back.&lt;/p&gt;
&lt;div class=&quot;center diagram&quot;&gt;
  &lt;img src=&quot;img/reagent-breakout.png&quot; alt=&quot;screenshot of breakout&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;You can play it &lt;a href=&quot;http://city41.github.io/reagent-breakout&quot;&gt;here&lt;/a&gt;, and the repo is &lt;a href=&quot;https://github.com/city41/reagent-breakout&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;the-reagent-components&quot;&gt;The Reagent Components&lt;/h2&gt;
&lt;p&gt;The components such as the ball and bricks are dead simple, there’s pretty much nothing to them. Here is the ball&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-clojure&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;ns&lt;/span&gt;&lt;/span&gt; breakout.cmp.ball)

(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;defn&lt;/span&gt;&lt;/span&gt; cmp [pos size]
  [&lt;span class=&quot;symbol&quot;&gt;:div.ball&lt;/span&gt; {&lt;span class=&quot;symbol&quot;&gt;:style&lt;/span&gt; {&lt;span class=&quot;symbol&quot;&gt;:background-image&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;url(img/tiles.png)&quot;&lt;/span&gt;
                      &lt;span class=&quot;symbol&quot;&gt;:position&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;absolute&quot;&lt;/span&gt;
                      &lt;span class=&quot;symbol&quot;&gt;:width&lt;/span&gt; (&lt;span class=&quot;symbol&quot;&gt;:width&lt;/span&gt; size)
                      &lt;span class=&quot;symbol&quot;&gt;:height&lt;/span&gt; (&lt;span class=&quot;symbol&quot;&gt;:height&lt;/span&gt; size)
                      &lt;span class=&quot;symbol&quot;&gt;:top&lt;/span&gt; (&lt;span class=&quot;symbol&quot;&gt;:y&lt;/span&gt; pos)
                      &lt;span class=&quot;symbol&quot;&gt;:left&lt;/span&gt; (&lt;span class=&quot;symbol&quot;&gt;:x&lt;/span&gt; pos)}}])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All of the animation is accomplished with &lt;a href=&quot;https://github.com/city41/reagent-breakout/blob/master/resources/public/css/site.css&quot;&gt;CSS&lt;/a&gt;, which helped make everything that much more simple. Small lesson learned, even on a tiny project like this I should have used a CSS generation tool. CSS, why are you so tedious?&lt;/p&gt;
&lt;h3 id=&quot;using-react-s-csstransitiongroup-for-the-bricks&quot;&gt;Using React’s CSSTransitionGroup for the bricks&lt;/h3&gt;
&lt;p&gt;Whenever a brick is hit, it fades out using a CSS animation. React’s &lt;a href=&quot;http://facebook.github.io/react/docs/animation.html&quot;&gt;CSSTransitionGroup&lt;/a&gt; is perfect for this, and easy to get going in Reagent. Just add it as one of your components, and underneath it place all the components that need animation&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-clojure&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;def&lt;/span&gt;&lt;/span&gt; ctg (&lt;span class=&quot;name&quot;&gt;aget&lt;/span&gt; js/React &lt;span class=&quot;string&quot;&gt;&quot;addons&quot;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;CSSTransitionGroup&quot;&lt;/span&gt;))

&lt;span class=&quot;comment&quot;&gt;;; ...&lt;/span&gt;

[ctg {&lt;span class=&quot;symbol&quot;&gt;:transitionName&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;spawn&quot;&lt;/span&gt;}
  (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;for&lt;/span&gt;&lt;/span&gt; [brick @bricks]
    &lt;span class=&quot;comment&quot;&gt;^{:key brick}&lt;/span&gt; [brick/cmp brick])]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I was really happy how seamlessly CSSTransitionGroup dropped right in.&lt;/p&gt;
&lt;h2 id=&quot;the-game-logic&quot;&gt;The Game Logic&lt;/h2&gt;
&lt;p&gt;By far the beefiest file is &lt;a href=&quot;https://github.com/city41/reagent-breakout/blob/master/src/cljs/breakout/engine/level.cljs&quot;&gt;level.cljs&lt;/a&gt;. Weighing in at 184 lines of code, it manages everything related to playing the game.&lt;/p&gt;
&lt;p&gt;The hit detection could still use some work, but 184 lines to whip up a Breakout game from scratch isn’t bad at all. I have no game engine helping me out, and needed to pretty much roll everything myself. The entire game from head to toe is 403 lines of code.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;level.cljs&lt;/code&gt; calls &lt;code&gt;requestAnimationFrame&lt;/code&gt; in order to accomplish its game loop, and from there it just updates a lot of atoms that represent the current state of the game. From there the Reagent components just render that state, with almost no logic at all of their own. This worked out well, but I think &lt;code&gt;level&lt;/code&gt; could probably still be cleaner and simpler.&lt;/p&gt;
&lt;h3 id=&quot;multimethods-and-watching-atoms&quot;&gt;multimethods and watching atoms&lt;/h3&gt;
&lt;p&gt;When playing the game there are two phases&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;the countdown phase: where the player waits for numbers to count down before beginning, giving them a chance to get ready&lt;/li&gt;
&lt;li&gt;the play phase: standard breakout gameplay&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I was able to separate out these phases using multimethods, which made the code cleaner.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-clojure&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;defn-&lt;/span&gt;&lt;/span&gt; update! [ts]
  (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;when&lt;/span&gt;&lt;/span&gt; @running
    (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;let&lt;/span&gt;&lt;/span&gt; [delta (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;-&lt;/span&gt;&lt;/span&gt; ts (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;or&lt;/span&gt;&lt;/span&gt; @last-ts ts))]
      (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;reset!&lt;/span&gt;&lt;/span&gt; last-ts ts)
      (&lt;span class=&quot;name&quot;&gt;update-phase!&lt;/span&gt; delta @phase))
    (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;.&lt;/span&gt;&lt;/span&gt; js/window (&lt;span class=&quot;name&quot;&gt;requestAnimationFrame&lt;/span&gt; update!))))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here &lt;code&gt;update-phase!&lt;/code&gt; will end up calling the appropriate function for the current phase, for example here is what the countdown phase does&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-clojure&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;defmethod&lt;/span&gt;&lt;/span&gt; update-phase! &lt;span class=&quot;symbol&quot;&gt;:countdown&lt;/span&gt; [delta _]
  (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;swap!&lt;/span&gt;&lt;/span&gt; countdown-duration - delta)
  (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;when&lt;/span&gt;&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;/span&gt; @countdown-duration &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)
    (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;reset!&lt;/span&gt;&lt;/span&gt; phase &lt;span class=&quot;symbol&quot;&gt;:gameplay&lt;/span&gt;)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By adding a watch to the &lt;code&gt;phase&lt;/code&gt; atom, it was really easy to set up a tiny little state machine in the game&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-clojure&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;add-watch&lt;/span&gt;&lt;/span&gt; phase &lt;span class=&quot;symbol&quot;&gt;:scene-phase&lt;/span&gt;
           (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;fn&lt;/span&gt;&lt;/span&gt; [key r old-phase new-phase]
             (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;when&lt;/span&gt;&lt;/span&gt; new-phase
               (&lt;span class=&quot;name&quot;&gt;init-phase!&lt;/span&gt; new-phase))))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Whenever switching phases, this watch handler kicks in and asks the new phase to do any initialization it needs (such as placing the ball back to its starting location). Again multimethods helped to separate the initialization of the phases into separate methods.&lt;/p&gt;
&lt;h2 id=&quot;performance&quot;&gt;Performance&lt;/h2&gt;
&lt;p&gt;Granted this is a very simple game, but my computer has no problem running it at 60fps. And despite creating a &lt;em&gt;ton&lt;/em&gt; of objects, the memory never gets out of control nor do I see any garbage collection hiccups. It seems like modern JavaScript engines can handle ClojureScript’s immutable approach pretty well.&lt;/p&gt;
&lt;h2 id=&quot;figwheel&quot;&gt;Figwheel&lt;/h2&gt;
&lt;p&gt;I’m digging &lt;a href=&quot;https://github.com/bhauman/lein-figwheel&quot;&gt;Figwheel&lt;/a&gt;. It creates a connection between your dev environment and the browser, and pushes changes as they happen. This is great for tweaking CSS and Reagent components in real time. I found with a game Figwheel can get a little confused and thus a hard refresh is occasionally needed, &lt;code&gt;requestAnimationFrame&lt;/code&gt; and the loads of game state seem to foil it. Or maybe I just need to explore the tool some more.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Not the most practical project I’ve ever taken on, but it was fun. I’m impressed with how far DOM manipulation performance has come, especially with React’s virtual DOM.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>ClojureScript Internals - Vectors</title>
      <link>http://mattgreer.org/articles/clojurescript-internals-vectors/</link>
      <pubDate>Sun, 25 Jan 2015 16:00:00 -0800</pubDate>
      <guid isPermaLink="true">http://mattgreer.org/articles/clojurescript-internals-vectors/</guid>
      <author></author>
      <description>&lt;p&gt;Today we’re taking a look at how vectors are implemented in ClojureScript. We’ll explore some of the trade offs made between performance and immutability, and we’ll get a feel for how a language like Clojure gets mapped into a language like JavaScript.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;style&gt;
.bit-table {
  margin: 30px 0;
}

.bit-table .number td div {
  background-color: grey;
  color: white;
  padding: 8px;
  text-align: center;
}


.bit-table .bit-chunks td div {
  background-color: grey;
  color: white;
  padding: 8px;
  text-align: center;
}

.bit-table .indices td div {
  background-color: #C27F0F;
  color: white;
  padding: 8px;
  text-align: center;
}
&lt;/style&gt;

&lt;h2 id=&quot;a-little-background&quot;&gt;A Little Background&lt;/h2&gt;
&lt;p&gt;Before diving into the how, we need to talk about the why a little bit. If you’re not new to Clojure, feel free to &lt;a href=&quot;#inside-clojurescript-s-persistentvector&quot;&gt;skip to the next section&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;persistent-data-structures&quot;&gt;Persistent Data Structures&lt;/h3&gt;
&lt;p&gt;Clojure data structures are persistent and immutable.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-clojure&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;def&lt;/span&gt;&lt;/span&gt; a [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;])
(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;def&lt;/span&gt;&lt;/span&gt; b (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;conj&lt;/span&gt;&lt;/span&gt; a &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;))
(&lt;span class=&quot;name&quot;&gt;println&lt;/span&gt; a) &lt;span class=&quot;comment&quot;&gt;; [1 2 3]&lt;/span&gt;
(&lt;span class=&quot;name&quot;&gt;println&lt;/span&gt; b) &lt;span class=&quot;comment&quot;&gt;; [1 2 3 4]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;a&lt;/code&gt; &lt;em&gt;persists on&lt;/em&gt; despite &lt;code&gt;b&lt;/code&gt; being created based off of it. &lt;code&gt;a&lt;/code&gt; can never change in the Clojure world. ClojureScript needs to maintain this promise of immutability and persistence too.&lt;/p&gt;
&lt;h3 id=&quot;data-structure-characteristics&quot;&gt;Data Structure Characteristics&lt;/h3&gt;
&lt;p&gt;Clojure’s different data structures have different tendencies. Vector’s claim to fame is it is efficient when working with the &lt;em&gt;back&lt;/em&gt; of the vector. Lists on the other hand optimize their efficiency at the front. &lt;code&gt;conj&lt;/code&gt; is the classic example of when these differences can come to light&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-clojure&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;def&lt;/span&gt;&lt;/span&gt; a [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;])  &lt;span class=&quot;comment&quot;&gt;; a vector&lt;/span&gt;
(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;def&lt;/span&gt;&lt;/span&gt; b '(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;)) &lt;span class=&quot;comment&quot;&gt;; a list&lt;/span&gt;

&lt;span class=&quot;comment&quot;&gt;;; vectors conj to the back&lt;/span&gt;
(&lt;span class=&quot;name&quot;&gt;println&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;conj&lt;/span&gt;&lt;/span&gt; a &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;)) &lt;span class=&quot;comment&quot;&gt;; [1 2 3 42]&lt;/span&gt;

&lt;span class=&quot;comment&quot;&gt;;; and lists conj to the front&lt;/span&gt;
(&lt;span class=&quot;name&quot;&gt;println&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;conj&lt;/span&gt;&lt;/span&gt; b &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;)) &lt;span class=&quot;comment&quot;&gt;; (42 4 5 6)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When the ClojureScript team implemented vectors, they needed to maintain this characteristic. This will become apparent as we dig deeper.&lt;/p&gt;
&lt;h2 id=&quot;inside-clojurescript-s-persistentvector&quot;&gt;Inside ClojureScript’s PersistentVector&lt;/h2&gt;
&lt;p&gt;Whenever you create a vector in ClojureScript either with the literal form &lt;code&gt;[1 2 3]&lt;/code&gt; or perhaps by calling &lt;code&gt;(vector 4 5 6)&lt;/code&gt;, ultimately this becomes an instance of &lt;code&gt;cljs.core.PersistentVector&lt;/code&gt;. PersistentVector lives in the core ClojureScript namespace, which does mean it is accessible from standard ClojureScript code&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-clojure&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;def&lt;/span&gt;&lt;/span&gt; my-vector (&lt;span class=&quot;name&quot;&gt;PersistentVector.&lt;/span&gt;
                 &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;
                 &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;
                 &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;
                 (&lt;span class=&quot;name&quot;&gt;.-EMPTY_NODE&lt;/span&gt; PersistentVector)
                 #js [&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]
                 &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;))

(&lt;span class=&quot;name&quot;&gt;println&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;first&lt;/span&gt;&lt;/span&gt; my-vector)) &lt;span class=&quot;comment&quot;&gt;; 5&lt;/span&gt;
(&lt;span class=&quot;name&quot;&gt;println&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;rest&lt;/span&gt;&lt;/span&gt; my-vector))  &lt;span class=&quot;comment&quot;&gt;; [4 3 2]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This hints at the fact that &lt;code&gt;cljs.core&lt;/code&gt; is written in ClojureScript itself; and it is, you can see the implementation of PersistentVector &lt;a href=&quot;https://github.com/clojure/clojurescript/blob/22dd4fbeed72398cbc3336fccffe8196c56cd209/src/cljs/cljs/core.cljs#L4191&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;the-vector-s-root-and-tail&quot;&gt;The vector’s root and tail&lt;/h3&gt;
&lt;p&gt;Internally, vectors have a &lt;em&gt;root&lt;/em&gt; and a &lt;em&gt;tail&lt;/em&gt;. Up above where we directly instantiated a &lt;code&gt;PersistentVector&lt;/code&gt;, the &lt;code&gt;EMPTY_NODE&lt;/code&gt; was the root, and the &lt;code&gt;#js [5 4 3 2]&lt;/code&gt; was the tail. Small vectors put all of their elements into their tail, leaving an empty root. The tail is simply a JavaScript array.&lt;/p&gt;
&lt;div class=&quot;callout addendum&quot;&gt;
Technically the root is not empty, it actually contains an array of 32 nulls. Each null slot is a spot where the root can allow grow
&lt;/div&gt;

&lt;p&gt;&lt;img class=&quot;diagram&quot; src=&quot;/articles/clojurescript-internals-vectors/img/vector-4-diagram.svg&quot; /&gt;&lt;/p&gt;
&lt;div class=&quot;callout btw&quot;&gt;
(there is a &lt;a href=&quot;http://stackoverflow.com/questions/21938875/text-in-svg-does-not-use-proper-font-when-drawn-to-an-img-element-in-chrome&quot;&gt;bug&lt;/a&gt; in Chrome that makes these diagrams look a bit off)
&lt;/div&gt;

&lt;p&gt;What happens when the vector is larger than 32 elements? That is where the root comes into play. Generally, the root contains &lt;code&gt;floor(count / 32) * 32&lt;/code&gt; elements  and the tail contains &lt;code&gt;count % 32&lt;/code&gt; elements. So if the vector is 900 elements long, 896 elements go to the root, and the remaining 4 head to the tail.&lt;/p&gt;
&lt;div class=&quot;callout addendum&quot;&gt;
This is simplified and not entirely true. It’s important that the tail never be empty. If a vector’s length is a multiple of 32 (say 64), then the above would suggest all the elements go into the root. But in reality, 32 will be diverted to the tail
&lt;/div&gt;

&lt;p&gt;Here is what a vector created by &lt;code&gt;(apply vector (range 0 64))&lt;/code&gt; looks like
&lt;img class=&quot;diagram&quot; src=&quot;/articles/clojurescript-internals-vectors/img/vector-64-diagram.svg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;here’s &lt;code&gt;(apply vector (range 0 900))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;diagram&quot; src=&quot;/articles/clojurescript-internals-vectors/img/vector-900-diagram.svg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;and here’s &lt;code&gt;(apply vector (range 0 11000))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;diagram&quot; src=&quot;/articles/clojurescript-internals-vectors/img/vector-11000-diagram.svg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The root’s nodes are instances of &lt;code&gt;cljs.core.VectorNode&lt;/code&gt;. A VectorNode basically just contains a JavaScript array which either contains more VectorNodes, or actual elements of the vector. &lt;code&gt;VectorNode&lt;/code&gt; is not too important for our discussion, so we’ll gloss over it from here on out. Notice elements are always found at the leaves of the tree.&lt;/p&gt;
&lt;h2 id=&quot;conj-ing-vectors&quot;&gt;Conj’ing Vectors&lt;/h2&gt;
&lt;p&gt;Let’s get a feel for how the root and tail work by exploring &lt;code&gt;conj&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Here is Vector’s conj implementation. Don’t worry about studying this block too much, we’re going to break it into pieces&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-clojure&quot;&gt;(&lt;span class=&quot;name&quot;&gt;-conj&lt;/span&gt; [coll o]
    (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;if&lt;/span&gt;&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;&amp;lt;&lt;/span&gt;&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;-&lt;/span&gt;&lt;/span&gt; cnt (&lt;span class=&quot;name&quot;&gt;tail-off&lt;/span&gt; coll)) &lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;)
      (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;let&lt;/span&gt;&lt;/span&gt; [len (&lt;span class=&quot;name&quot;&gt;alength&lt;/span&gt; tail)
            new-tail (&lt;span class=&quot;name&quot;&gt;make-array&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;inc&lt;/span&gt;&lt;/span&gt; len))]
        (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;dotimes&lt;/span&gt;&lt;/span&gt; [i len]
          (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;aset&lt;/span&gt;&lt;/span&gt; new-tail i (&lt;span class=&quot;name&quot;&gt;aget&lt;/span&gt; tail i)))
        (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;aset&lt;/span&gt;&lt;/span&gt; new-tail len o)
        (&lt;span class=&quot;name&quot;&gt;PersistentVector.&lt;/span&gt; meta (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;inc&lt;/span&gt;&lt;/span&gt; cnt) shift root new-tail &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;))
      (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;let&lt;/span&gt;&lt;/span&gt; [root-overflow? (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;bit-shift-right-zero-fill&lt;/span&gt; cnt &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) (&lt;span class=&quot;name&quot;&gt;bit-shift-left&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; shift))
            new-shift (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;if&lt;/span&gt;&lt;/span&gt; root-overflow? (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;+&lt;/span&gt;&lt;/span&gt; shift &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) shift)
            new-root (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;if&lt;/span&gt;&lt;/span&gt; root-overflow?
                       (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;let&lt;/span&gt;&lt;/span&gt; [n-r (&lt;span class=&quot;name&quot;&gt;pv-fresh-node&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;)]
                           (&lt;span class=&quot;name&quot;&gt;pv-aset&lt;/span&gt; n-r &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; root)
                           (&lt;span class=&quot;name&quot;&gt;pv-aset&lt;/span&gt; n-r &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;new-path&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; shift (&lt;span class=&quot;name&quot;&gt;VectorNode.&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; tail)))
                           n-r)
                       (&lt;span class=&quot;name&quot;&gt;push-tail&lt;/span&gt; coll shift root (&lt;span class=&quot;name&quot;&gt;VectorNode.&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; tail)))]
        (&lt;span class=&quot;name&quot;&gt;PersistentVector.&lt;/span&gt; meta (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;inc&lt;/span&gt;&lt;/span&gt; cnt) new-shift new-root (&lt;span class=&quot;name&quot;&gt;array&lt;/span&gt; o) &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;))))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(This code was taken from &lt;a href=&quot;https://github.com/clojure/clojurescript/blob/22dd4fbeed72398cbc3336fccffe8196c56cd209/src/cljs/cljs/core.cljs#L4226&quot;&gt;here&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&quot;callout addendum&quot;&gt;
This is the vector specific &lt;code&gt;-conj&lt;/code&gt; method, the actual &lt;code&gt;conj&lt;/code&gt; method we just called is &lt;a href=&quot;https://github.com/clojure/clojurescript/blob/22dd4fbeed72398cbc3336fccffe8196c56cd209/src/cljs/cljs/core.cljs#L1115&quot;&gt;here&lt;/a&gt;, it uses Clojure protocols to find and invoke vector’s &lt;code&gt;-conj&lt;/code&gt; when called with a vector
&lt;/div&gt;

&lt;p&gt;Vector’s &lt;code&gt;-conj&lt;/code&gt; essentially works out to this&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if the tail has room in it (less than 32 elements)
    stick the new element in a new tail
    return a new vector created with the existing root and a new tail
else
    if there is room in the root
        create a new root that has the tail moved into it
        create a new tail containing the new element
        return a new vector with the new root and new tail
    else
        create a new root that is larger by one level
        move things around so there is now room in the new root
        proceed similar to the &amp;quot;room in root&amp;quot; case from here
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;when-the-tail-has-room&quot;&gt;When the tail has room&lt;/h3&gt;
&lt;p&gt;Let’s start with a simple case&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-clojure&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;def&lt;/span&gt;&lt;/span&gt; a (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;apply&lt;/span&gt;&lt;/span&gt; vector (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;range&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;34&lt;/span&gt;)))
(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;def&lt;/span&gt;&lt;/span&gt; b (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;conj&lt;/span&gt;&lt;/span&gt; a &lt;span class=&quot;number&quot;&gt;99&lt;/span&gt;))
(&lt;span class=&quot;name&quot;&gt;println&lt;/span&gt; b) &lt;span class=&quot;comment&quot;&gt;; [0 1 2 3 4 5 ... 31 32 33 99]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;a&lt;/code&gt; is 34 elements long, with 32 elements sitting in the root and 2 hanging out in the tail. There’s plenty of room in the tail, so this is the first case inside &lt;code&gt;conj&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-clojure&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;; the chunk of conj that handles the &quot;tail has room&quot; case&lt;/span&gt;
(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;let&lt;/span&gt;&lt;/span&gt; [len (&lt;span class=&quot;name&quot;&gt;alength&lt;/span&gt; tail)
      new-tail (&lt;span class=&quot;name&quot;&gt;make-array&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;inc&lt;/span&gt;&lt;/span&gt; len))]
  (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;dotimes&lt;/span&gt;&lt;/span&gt; [i len]
    (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;aset&lt;/span&gt;&lt;/span&gt; new-tail i (&lt;span class=&quot;name&quot;&gt;aget&lt;/span&gt; tail i)))
  (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;aset&lt;/span&gt;&lt;/span&gt; new-tail len o)
  (&lt;span class=&quot;name&quot;&gt;PersistentVector.&lt;/span&gt; meta (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;inc&lt;/span&gt;&lt;/span&gt; cnt) shift root new-tail &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;make-array&lt;/code&gt; will create our new tail that is one larger than the original tail (&lt;code&gt;(inc len)&lt;/code&gt;), then we iterate over the original tail and copy its contents into the new tail. At the end of the new tail, the new value &lt;code&gt;o&lt;/code&gt; is placed and from there a new instance of &lt;code&gt;PersistentVector&lt;/code&gt; is returned.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;diagram&quot; src=&quot;/articles/clojurescript-internals-vectors/img/vector-34-conj-diagram.svg&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;no-room-in-the-tail-but-room-in-the-root&quot;&gt;No room in the tail, but room in the root&lt;/h2&gt;
&lt;p&gt;This time let’s consider conj’ing onto a vector that has 64 elements&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-clojure&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;def&lt;/span&gt;&lt;/span&gt; a (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;apply&lt;/span&gt;&lt;/span&gt; vector (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;range&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;64&lt;/span&gt;)))
(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;def&lt;/span&gt;&lt;/span&gt; b (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;conj&lt;/span&gt;&lt;/span&gt; a &lt;span class=&quot;number&quot;&gt;99&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This time the tail is full, so that makes the tail a candidate to become a new leaf in the root’s tree. And from there we just create a brand new tail containing the new element. We can see this happening in the &lt;code&gt;conj&lt;/code&gt; code&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-clojure&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;; the part of conj that deals with the &quot;tail is full&quot; case&lt;/span&gt;
(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;let&lt;/span&gt;&lt;/span&gt; [root-overflow? (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;bit-shift-right-zero-fill&lt;/span&gt; cnt &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)
                        (&lt;span class=&quot;name&quot;&gt;bit-shift-left&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; shift))
      new-shift (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;if&lt;/span&gt;&lt;/span&gt; root-overflow? (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;+&lt;/span&gt;&lt;/span&gt; shift &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) shift)
      new-root (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;if&lt;/span&gt;&lt;/span&gt; root-overflow?
                  (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;let&lt;/span&gt;&lt;/span&gt; [n-r (&lt;span class=&quot;name&quot;&gt;pv-fresh-node&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;)]
                    (&lt;span class=&quot;name&quot;&gt;pv-aset&lt;/span&gt; n-r &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; root)
                    (&lt;span class=&quot;name&quot;&gt;pv-aset&lt;/span&gt; n-r &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;new-path&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; shift (&lt;span class=&quot;name&quot;&gt;VectorNode.&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; tail)))
                    n-r)
                  (&lt;span class=&quot;name&quot;&gt;push-tail&lt;/span&gt; coll shift root (&lt;span class=&quot;name&quot;&gt;VectorNode.&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; tail)))]
  (&lt;span class=&quot;name&quot;&gt;PersistentVector.&lt;/span&gt; meta (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;inc&lt;/span&gt;&lt;/span&gt; cnt) new-shift new-root (&lt;span class=&quot;name&quot;&gt;array&lt;/span&gt; o) &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above code has both root cases (whether the root is full or not) intertwined. If &lt;code&gt;root-overflow?&lt;/code&gt; is false, then our root still has some room in it. In that case all that really happens is &lt;code&gt;new-root&lt;/code&gt; gets set by the call to &lt;code&gt;push-tail&lt;/code&gt;, which returns a new root with our existing tail added to it. Then ultimately we return a new vector housing the new root and we quickly whip up a new tail for it that contains the appended element with &lt;code&gt;(array o)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;diagram&quot; src=&quot;/articles/clojurescript-internals-vectors/img/vector-64-conj-diagram.svg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;This diagram is pretty telling. &lt;code&gt;b&lt;/code&gt; “borrows” everything from &lt;code&gt;a&lt;/code&gt;, and &lt;code&gt;a&lt;/code&gt; remains unaffected. A great example of how ClojureScript accomplishes persistence and immutability all while maintaining a good performance footprint.&lt;/p&gt;
&lt;h2 id=&quot;the-final-case-the-root-is-full&quot;&gt;The final case, the root is full&lt;/h2&gt;
&lt;p&gt;This is the most complex case. If your conj’ed out, feel free to &lt;a href=&quot;#advantages-to-the-root-tail-design&quot;&gt;head onto the next section&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;introducing-shift&quot;&gt;introducing shift&lt;/h3&gt;
&lt;p&gt;It’s no coincidence that 32 is how large VectorNodes can be and the upper bound for the tail’s size. Working with powers of 2 has some nice advantages. You probably noticed the &lt;code&gt;bit-shift...&lt;/code&gt; methods up above in the conj code. Clever usage of bitwise operations enables the vector to efficiently determine things about itself like whether its root has overflown, or how many of its elements are in the tail.&lt;/p&gt;
&lt;p&gt;Each vector has a &lt;code&gt;shift&lt;/code&gt; property, which is a multiple of 5, &lt;code&gt;1 &amp;lt;&amp;lt; 5&lt;/code&gt; is 32. Basically the shift is telling us how many elements the root can hold. When shift is 5, the root has a depth of 1, 10 means a depth of 2, and so on. Way up there when we manually created our own PersistentVector, we passed in &lt;code&gt;5&lt;/code&gt; as our shift. Shift also tells other things about the vector, as we’ll see later on when we index into one (its name will make more sense then too).&lt;/p&gt;
&lt;p&gt;When a vector has a shift of 5, its root can at most hold 32 * 32 elements (1024). That is, the root contains 32 VectorNodes, and each VectorNode holds 32 elements of the vector.&lt;/p&gt;
&lt;p&gt;Now we can begin to understand how vectors determine if their root is full&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-clojure&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;let&lt;/span&gt;&lt;/span&gt; [root-overflow? (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;bit-shift-right-zero-fill&lt;/span&gt; cnt &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)
                        (&lt;span class=&quot;name&quot;&gt;bit-shift-left&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; shift))])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Take the case of a vector having 1056 elements&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-clojure&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;def&lt;/span&gt;&lt;/span&gt; a (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;apply&lt;/span&gt;&lt;/span&gt; vector (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;range&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1056&lt;/span&gt;)))
(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;def&lt;/span&gt;&lt;/span&gt; b (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;conj&lt;/span&gt;&lt;/span&gt; a &lt;span class=&quot;number&quot;&gt;9999&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img class=&quot;diagram&quot; src=&quot;/articles/clojurescript-internals-vectors/img/vector-1056-diagram.svg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;This vector is packed to the gills, &lt;code&gt;root-overflow?&lt;/code&gt; will be true. Before it can proceed, the root needs to grow by one level&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-clojure&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;; creation of the new root.&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;;; the root not overflowing case removed for better clarity&lt;/span&gt;
(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;let&lt;/span&gt;&lt;/span&gt;
  [new-shift (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;+&lt;/span&gt;&lt;/span&gt; shift &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)
  [new-root (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;let&lt;/span&gt;&lt;/span&gt; [n-r (&lt;span class=&quot;name&quot;&gt;pv-fresh-node&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;)]
              (&lt;span class=&quot;name&quot;&gt;pv-aset&lt;/span&gt; n-r &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; root)
              (&lt;span class=&quot;name&quot;&gt;pv-aset&lt;/span&gt; n-r &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;new-path&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; shift (&lt;span class=&quot;name&quot;&gt;VectorNode.&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; tail)))
              n-r))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here a new root node is created with &lt;code&gt;pv-fresh-node&lt;/code&gt;, then the existing root is  pushed down to become a child, and then the tail becomes the second child with &lt;code&gt;new-path&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;diagram&quot; src=&quot;/articles/clojurescript-internals-vectors/img/vector-1056-conj-diagram.svg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;This last diagram’s a little noisy, but again everything gets shared between &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;advantages-to-the-root-tail-design&quot;&gt;Advantages to the Root/Tail Design&lt;/h2&gt;
&lt;p&gt;This is a lot of hoopla just to add a new element onto a vector. Why all the fuss?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-clojure&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;def&lt;/span&gt;&lt;/span&gt; a (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;apply&lt;/span&gt;&lt;/span&gt; vector (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;range&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;100000&lt;/span&gt;)))
&lt;span class=&quot;comment&quot;&gt;; this conj happens quickly&lt;/span&gt;
(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;def&lt;/span&gt;&lt;/span&gt; b (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;conj&lt;/span&gt;&lt;/span&gt; a &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Big deal! In JavaScript &lt;code&gt;myGiantArray.push(1)&lt;/code&gt; is also very fast! In fact, it’s faster! But ClojureScript is maintaining immutability (and persistence), where &lt;code&gt;push&lt;/code&gt; mutates in place. A naive approach to accomplishing immutability in JavaScript would be&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;arrayConj&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;array, x&lt;/span&gt;)
  &lt;span class=&quot;title&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;newArray&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;array&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;slice&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;);
  &lt;span class=&quot;title&quot;&gt;newArray&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x&lt;/span&gt;);
  &lt;span class=&quot;title&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;newArray&lt;/span&gt;;
}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That &lt;code&gt;slice()&lt;/code&gt; is very costly in time and memory when the array is large. Obviously that’s a terrible way to accomplish immutability, a real JavaScript immutable data structure would probably end up working very similar to ClojureScript’s vector.&lt;/p&gt;
&lt;p&gt;Fair enough, but can’t the root just be an array? Not ideally, because as we saw in the above case where the vector had 64 elements, we were able to create a second root very efficiently. The first root is maintained, as the first vector still needs it. The second root was just a matter of moving some tree nodes around. If the root was a flat array, then this would have called for more cloning.&lt;/p&gt;
&lt;h3 id=&quot;indexing-into-the-vector&quot;&gt;Indexing into the vector&lt;/h3&gt;
&lt;p&gt;Since the root is a tree, some performance is lost when we need to look up an element. With an array, finding an element is a matter of simple arithmetic. But &lt;code&gt;(nth my-giant-vector 200)&lt;/code&gt; will require the vector to dig inside the root and figure out where its 200th element lives before it can return it. This requires a little tree traversal, and is done with the &lt;a href=&quot;https://github.com/clojure/clojurescript/blob/22dd4fbeed72398cbc3336fccffe8196c56cd209/src/cljs/cljs/core.cljs#L4129&quot;&gt;&lt;code&gt;unchecked-array-for&lt;/code&gt; function&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-clojure&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;defn-&lt;/span&gt;&lt;/span&gt; unchecked-array-for [pv i]
  (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;if&lt;/span&gt;&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;/span&gt; i (&lt;span class=&quot;name&quot;&gt;tail-off&lt;/span&gt; pv))
      (&lt;span class=&quot;name&quot;&gt;.-tail&lt;/span&gt; pv)
      (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;loop&lt;/span&gt;&lt;/span&gt; [node (&lt;span class=&quot;name&quot;&gt;.-root&lt;/span&gt; pv)
             level (&lt;span class=&quot;name&quot;&gt;.-shift&lt;/span&gt; pv)]
        (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;if&lt;/span&gt;&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;pos?&lt;/span&gt;&lt;/span&gt; level)
          (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;recur&lt;/span&gt;&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;pv-aget&lt;/span&gt; node (&lt;span class=&quot;name&quot;&gt;bit-and&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;bit-shift-right-zero-fill&lt;/span&gt; i level) &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x01f))
                 (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;-&lt;/span&gt;&lt;/span&gt; level &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;))
          (&lt;span class=&quot;name&quot;&gt;.-arr&lt;/span&gt; node)))))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ultimately a vector is a tree of arrays, so &lt;code&gt;unchecked-array-for&lt;/code&gt; is finding the array that contains the queried index, and from there it’s just a matter of indexing into a standard JavaScript array. The top of the &lt;code&gt;if&lt;/code&gt; first figures out if the index is in the tail, if so the answer is easy. Otherwise &lt;code&gt;loop&lt;/code&gt; is used to move down through the tree. Again, clever use of bitwise operations enables finding the path through the tree to be efficient.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pv-aget&lt;/code&gt; is a simple method that knows a VectorNode contains an array, it effectively does &lt;code&gt;node.arr[i]&lt;/code&gt;, and determining what &lt;code&gt;i&lt;/code&gt; is relies on some bit-wise logic. &lt;code&gt;(bit-and (bit-shift-right-zero-fill i level) 0x01f)&lt;/code&gt; works out to be &lt;code&gt;(i &amp;gt;&amp;gt;&amp;gt; level) &amp;amp; 31&lt;/code&gt;, which tells us which array at each level is the one we need to traverse down into.&lt;/p&gt;
&lt;p&gt;That was pretty dense, no? To put that nonsense another way, the index contains its own path into the tree. Let’s take a look at&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-clojure&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;def&lt;/span&gt;&lt;/span&gt; my-giant-vector (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;apply&lt;/span&gt;&lt;/span&gt; vector (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;range&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1048586&lt;/span&gt;)))
&lt;span class=&quot;comment&quot;&gt;;; grab the 142600th element&lt;/span&gt;
(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;def&lt;/span&gt;&lt;/span&gt; n (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;nth&lt;/span&gt;&lt;/span&gt; my-giant-vector &lt;span class=&quot;number&quot;&gt;142600&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This looks like:&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;diagram&quot; src=&quot;/articles/clojurescript-internals-vectors/img/vector-traversal.svg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;By chopping &lt;code&gt;142600&lt;/code&gt; into 5 bit chunks, we find the path into the vector&lt;/p&gt;
&lt;table class=&quot;bit-table&quot;&gt;
&lt;tr class=&quot;number&quot;&gt;
&lt;td colspan=&quot;4&quot;&gt;
&lt;div&gt;142600&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;

&lt;tr class=&quot;number&quot;&gt;
&lt;td colspan=&quot;4&quot;&gt;
&lt;div&gt;00100010110100001000&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;

&lt;tr class=&quot;bit-chunks&quot;&gt;
&lt;td&gt;&lt;div&gt;00100&lt;/div&gt;&lt;/td&gt;&lt;td&gt;&lt;div&gt;01011&lt;/div&gt;&lt;/td&gt;&lt;td&gt;&lt;div&gt;01000&lt;/div&gt;&lt;/td&gt;&lt;td&gt;&lt;div&gt;01000&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr class=&quot;indices&quot;&gt;
&lt;td&gt;&lt;div&gt;4&lt;/div&gt;&lt;/td&gt;&lt;td&gt;&lt;div&gt;11&lt;/div&gt;&lt;/td&gt;&lt;td&gt;&lt;div&gt;8&lt;/div&gt;&lt;/td&gt;&lt;td&gt;&lt;div&gt;8&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;/table&gt;

&lt;p&gt;And “chopping into 5 bit chunks” is what &lt;code&gt;unchecked-array-for&lt;/code&gt; is doing. Pretty clever.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-it-up&quot;&gt;Wrapping It Up&lt;/h2&gt;
&lt;p&gt;The immutability offered by ClojureScript data structures is great. But at the same time, vectors look and feel like arrays. That familiar feeling can be deceiving. It is useful to get a sense for how they are implemented, so you can make better choices when using them. I was inspired to make this post when one of my first ClojureScript apps ended up being really slow. I was using large vectors and lots of lazy sequences, causing a significant performance degradation. I decided to dig into the code to find out why. I hope to one day also write a bit on how lazy sequences work in ClojureScript too, so stay tuned!&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Reagent Rocks!</title>
      <link>http://mattgreer.org/articles/reagent-rocks/</link>
      <pubDate>Fri, 23 Jan 2015 16:00:00 -0800</pubDate>
      <guid isPermaLink="true">http://mattgreer.org/articles/reagent-rocks/</guid>
      <author></author>
      <description>&lt;p&gt;Lately all of my front end work has been in &lt;a href=&quot;http://holmsand.github.io/reagent/&quot;&gt;Reagent&lt;/a&gt;, a &lt;a href=&quot;https://github.com/clojure/clojurescript&quot;&gt;ClojureScript&lt;/a&gt; interface to Facebook’s &lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;React&lt;/a&gt;. I’m really enjoying working with Reagent, this post attempts to shed some light on why.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;clojurescript-crash-course&quot;&gt;ClojureScript Crash Course&lt;/h2&gt;
&lt;p&gt;If you’re at all familiar with Clojure, go ahead and &lt;a href=&quot;#on-to-reagent&quot;&gt;skip to the next section&lt;/a&gt;. This is a &lt;em&gt;very&lt;/em&gt; quick introduction to the language, it will help make the Reagent bits coming later more clear.&lt;/p&gt;
&lt;h3 id=&quot;functions&quot;&gt;Functions&lt;/h3&gt;
&lt;p&gt;Functions are created with &lt;code&gt;defn&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-clojure&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;defn&lt;/span&gt;&lt;/span&gt; add [a b]
  (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;+&lt;/span&gt;&lt;/span&gt; a b))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;is roughly equivalent to:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; add = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;a, b&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a + b;
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ClojureScript functions always return the last expression that was evaluated.&lt;/p&gt;
&lt;h3 id=&quot;maps&quot;&gt;Maps&lt;/h3&gt;
&lt;p&gt;Maps are similar to JavaScript objects, they are collections of key/value pairs:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-clojure&quot;&gt;{&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Calvin&quot;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;position&quot;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;goalie&quot;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;is roughly equivalent to:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;{
  &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Calvin&quot;&lt;/span&gt;,
  &lt;span class=&quot;attr&quot;&gt;position&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;goalie&quot;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;keywords&quot;&gt;Keywords&lt;/h3&gt;
&lt;p&gt;Notice how the map above used strings for keys? That’s a little awkward. More commonly keywords are used. Think of them as simple constants:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-clojure&quot;&gt;{&lt;span class=&quot;symbol&quot;&gt;:name&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Calvin&quot;&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;:position&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;goalie&quot;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;vectors&quot;&gt;Vectors&lt;/h3&gt;
&lt;p&gt;Vectors are similar to JavaScript arrays:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-clojure&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;; simple vector&lt;/span&gt;
[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]

&lt;span class=&quot;comment&quot;&gt;;; you can put anything in a vector&lt;/span&gt;
[&lt;span class=&quot;string&quot;&gt;&quot;a string&quot;&lt;/span&gt; [&lt;span class=&quot;symbol&quot;&gt;:even&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;:another&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;:vector&lt;/span&gt;]]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;callout pitfall&quot;&gt;
This crash course glossed over many many things. Clojure fans are clenching their teeth right about now. If you want more information, I recommend starting with David Nolen’s &lt;a href=&quot;https://github.com/swannodette/lt-cljs-tutorial&quot;&gt;ClojureScript tutorial&lt;/a&gt;
&lt;/div&gt;

&lt;h2 id=&quot;on-to-reagent&quot;&gt;On to Reagent&lt;/h2&gt;
&lt;p&gt;Phew! Now let’s start building some Reagent components. Here’s a very simple one:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-clojure&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;defn&lt;/span&gt;&lt;/span&gt; hello []
  [&lt;span class=&quot;symbol&quot;&gt;:div&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;hello world&quot;&lt;/span&gt;])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By itself it doesn’t do much, but we can render it to the page like so&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-clojure&quot;&gt;(&lt;span class=&quot;name&quot;&gt;reagent/render&lt;/span&gt; hello (&lt;span class=&quot;name&quot;&gt;.getElementById&lt;/span&gt; js/document &lt;span class=&quot;string&quot;&gt;&quot;my-container&quot;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Take another look at the &lt;code&gt;hello&lt;/code&gt; component. It’s simply a function that returns a vector containing a keyword and a string. Nothing more than bread and butter Clojure. If you’re familiar with React, you might be wondering where &lt;code&gt;createClass&lt;/code&gt;, &lt;code&gt;componentDidMount&lt;/code&gt;, &lt;code&gt;render&lt;/code&gt; and all of that other hoopla went. &lt;em&gt;There’s no boilerplate at all!&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;callout wisdom&quot;&gt;
React fans might be crying fowl about now. The above would be &lt;code&gt;React.createElement(&amp;#39;div&amp;#39;, null, &amp;#39;hello world&amp;#39;)&lt;/code&gt; in React. Also pretty simple. But in Reagent, there is no distinction between elements and components, they’re all just vanilla ClojureScript functions.
&lt;/div&gt;


&lt;p&gt;Of course you’ll be doing more than rendering “hello world” into your webpages, and Reagent doesn’t manage to keep this abstraction up indefinitely. But it does a great job overall. If you need to, dropping down to the “metal” of React is possible, as is integrating Reagent with native React components. Reagent covers all the bases.&lt;/p&gt;
&lt;h3 id=&quot;getting-more-involved&quot;&gt;Getting More Involved&lt;/h3&gt;
&lt;p&gt;Components can take parameters&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-clojure&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;defn&lt;/span&gt;&lt;/span&gt; hello [name]
  [&lt;span class=&quot;symbol&quot;&gt;:div&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;hello &quot;&lt;/span&gt; name])

(&lt;span class=&quot;name&quot;&gt;reagent/render&lt;/span&gt; [hello &lt;span class=&quot;string&quot;&gt;&quot;Bob&quot;&lt;/span&gt;] (&lt;span class=&quot;name&quot;&gt;.-body&lt;/span&gt; js/document))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice &lt;code&gt;hello&lt;/code&gt; was passed to &lt;code&gt;render&lt;/code&gt; inside a vector? Since hello is just a function, shouldn’t it be &lt;code&gt;(hello &amp;quot;Bob&amp;quot;)&lt;/code&gt;? Technically you can get away with that in simple scenarios, but by handing Reagent a vector, Reagent can then only invoke your component when it needs to, allowing for more efficient rendering.&lt;/p&gt;
&lt;p&gt;Components can also contain other components:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-clojure&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;defn&lt;/span&gt;&lt;/span&gt; page [body]
  [&lt;span class=&quot;symbol&quot;&gt;:div.page&lt;/span&gt;
    [&lt;span class=&quot;symbol&quot;&gt;:div.header&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;This is the header&quot;&lt;/span&gt;]
    body
    [&lt;span class=&quot;symbol&quot;&gt;:div.footer&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;This is the footer&quot;&lt;/span&gt;]])

(&lt;span class=&quot;name&quot;&gt;reagent/render&lt;/span&gt; [page [hello &lt;span class=&quot;string&quot;&gt;&quot;Bob&quot;&lt;/span&gt;]] (&lt;span class=&quot;name&quot;&gt;.-body&lt;/span&gt; js/document))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And yeah, adding classes to elements is as simple as appending them to the keyword, ie &lt;code&gt;:div.header&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;clojurescript-crash-course-part-two&quot;&gt;ClojureScript Crash Course Part Two&lt;/h2&gt;
&lt;p&gt;Almost everything in ClojureScript is immutable. You can’t alter a vector after it’s been created, for example. To accomplish mutability, ClojureScript has atoms:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-clojure&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;def&lt;/span&gt;&lt;/span&gt; my-atom (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;atom&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An atom is a reference to an object. You can get at the object by dereferencing the atom:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-clojure&quot;&gt;(&lt;span class=&quot;name&quot;&gt;.log&lt;/span&gt; js/console (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;deref&lt;/span&gt;&lt;/span&gt; my-atom))

&lt;span class=&quot;comment&quot;&gt;;; or, use the @ sugar&lt;/span&gt;
(&lt;span class=&quot;name&quot;&gt;.log&lt;/span&gt; js/console @my-atom)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It’s very similar to dereferencing a pointer in C.&lt;/p&gt;
&lt;p&gt;You can update the atom with &lt;code&gt;reset!&lt;/code&gt; or &lt;code&gt;swap!&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-clojure&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;; reset! causes the atom to point at a different object&lt;/span&gt;
(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;reset!&lt;/span&gt;&lt;/span&gt; my-atom &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;)

&lt;span class=&quot;comment&quot;&gt;;; this now prints 6&lt;/span&gt;
(&lt;span class=&quot;name&quot;&gt;.log&lt;/span&gt; js/console @my-atom)

&lt;span class=&quot;comment&quot;&gt;;; swap is a little trickier&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;;; you give it a function and any needed arguments to update the atom&lt;/span&gt;
(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;swap!&lt;/span&gt;&lt;/span&gt; my-atom + &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)

&lt;span class=&quot;comment&quot;&gt;;; the above is effectively this:&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;;; (reset! my-atom (+ @my-atom 5))&lt;/span&gt;

&lt;span class=&quot;comment&quot;&gt;;; this will print 11&lt;/span&gt;
(&lt;span class=&quot;name&quot;&gt;.log&lt;/span&gt; js/console @my-atom)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;callout pitfall&quot;&gt;
And again, this is super glossed over
&lt;/div&gt;

&lt;h2 id=&quot;atoms-and-reagent&quot;&gt;Atoms and Reagent&lt;/h2&gt;
&lt;p&gt;Not surprisingly, atoms are how Reagent deals with state too. Let’s create a component that expands and collapses whenever the user clicks it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-clojure&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;def&lt;/span&gt;&lt;/span&gt; expanded (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;atom&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;))

(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;defn&lt;/span&gt;&lt;/span&gt; on-header-click []
  (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;swap!&lt;/span&gt;&lt;/span&gt; expanded not))

(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;defn&lt;/span&gt;&lt;/span&gt; expandable-view []
  [&lt;span class=&quot;symbol&quot;&gt;:div.expandable&lt;/span&gt;
    [&lt;span class=&quot;symbol&quot;&gt;:div.header&lt;/span&gt; {&lt;span class=&quot;symbol&quot;&gt;:on-click&lt;/span&gt; on-header-click}
      &lt;span class=&quot;string&quot;&gt;&quot;Click me to expand and collapse the body&quot;&lt;/span&gt;]
    (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;if&lt;/span&gt;&lt;/span&gt; @expanded
      [&lt;span class=&quot;symbol&quot;&gt;:div.body&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;I am the body&quot;&lt;/span&gt;])])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here the header div gets a map, allowing us to add a click handler. Every time the header gets clicked, the atom alternates between &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; (that’s what &lt;code&gt;swap!&lt;/code&gt; and &lt;code&gt;not&lt;/code&gt; are up to, &lt;code&gt;not&lt;/code&gt; flips booleans). Whether the body is present depends on the state of the &lt;code&gt;expanded&lt;/code&gt; atom.&lt;/p&gt;
&lt;p&gt;Except this isn’t &lt;em&gt;entirely&lt;/em&gt; true. In order to pull off the above, we need to swap out the native atom with an atom that Reagent provides:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-clojure&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;; use a Reagent atom instead&lt;/span&gt;
(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;def&lt;/span&gt;&lt;/span&gt; expanded (&lt;span class=&quot;name&quot;&gt;reagent/atom&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;))

&lt;span class=&quot;comment&quot;&gt;;; as before ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Reagent atoms (aka ratoms) are a little magical. Reagent keeps track of all the components that are using ratoms. Whenever a ratom changes, all of the affected components are rerendered. Since React is underneath, the rendering is super efficient and fast (virtual DOM and all that good stuff). Other than the magic, ratoms behave just like real atoms.&lt;/p&gt;
&lt;h2 id=&quot;all-this-adds-up-to-&quot;&gt;All This Adds Up To …&lt;/h2&gt;
&lt;p&gt;I took you through this whirlwind tour of ClojureScript and Reagent to finally be able to make the point that Reagent and ClojureScript are really a stellar combo.&lt;/p&gt;
&lt;p&gt;Notice in the last component the call to &lt;code&gt;if&lt;/code&gt;? It’s trivial to build up your components using just about anything in your ClojureScript toolbox as you see fit. Atoms are a simple, straightforward way to deal with state, and at the end of the day your code just describes your components and how they should behave. It’s easy to reason about and a pleasure to work with.&lt;/p&gt;
&lt;h3 id=&quot;ratom-flavors&quot;&gt;Ratom Flavors&lt;/h3&gt;
&lt;p&gt;Ratoms tend to come in two flavors, and roughly correspond to props and state in React. Prop-like ratoms contain data, typically pulled down from your server with an AJAX call. And state-like ratoms just keep track of things like “expanded or collapsed”. I tend to couple state-like ratoms directly into my components:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-clojure&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;defn&lt;/span&gt;&lt;/span&gt; expandable-view []
  (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;let&lt;/span&gt;&lt;/span&gt; [expanded (&lt;span class=&quot;name&quot;&gt;reagent/atom&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;)]
    (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;fn&lt;/span&gt;&lt;/span&gt; []
      [&lt;span class=&quot;symbol&quot;&gt;:div.expandable&lt;/span&gt;
        [&lt;span class=&quot;symbol&quot;&gt;:div.header&lt;/span&gt; {&lt;span class=&quot;symbol&quot;&gt;:on-click&lt;/span&gt; #(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;swap!&lt;/span&gt;&lt;/span&gt; expanded not)}
         &lt;span class=&quot;string&quot;&gt;&quot;Click me to expand and collapse&quot;&lt;/span&gt;]
        (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;if&lt;/span&gt;&lt;/span&gt; @expanded
          [&lt;span class=&quot;symbol&quot;&gt;:div.body&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;I am the body&quot;&lt;/span&gt;])])))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the above the &lt;code&gt;expanded&lt;/code&gt; atom got pulled inside of the component. This is a bit more advanced than the other examples, but the general concept should be clear.&lt;/p&gt;
&lt;p&gt;And I tend to decouple my prop-like data ratoms from my components. I instead manage them elsewhere and simply pass them to the component as a parameter. This makes reusing and testing components very easy:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-clojure&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;defn&lt;/span&gt;&lt;/span&gt; comment-view [comment]
  [&lt;span class=&quot;symbol&quot;&gt;:div.comment&lt;/span&gt;
    [&lt;span class=&quot;symbol&quot;&gt;:span.author&lt;/span&gt; (&lt;span class=&quot;symbol&quot;&gt;:author&lt;/span&gt; comment)]
    [&lt;span class=&quot;symbol&quot;&gt;:span.body&lt;/span&gt;   (&lt;span class=&quot;symbol&quot;&gt;:body&lt;/span&gt; comment)]])

&lt;span class=&quot;comment&quot;&gt;;; here comments is a ratom that probably got populated&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;;; with an AJAX call. But comment-list doesn't care,&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;;; it just takes the comments and runs with them&lt;/span&gt;
(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;defn&lt;/span&gt;&lt;/span&gt; comment-list [comments]
  [&lt;span class=&quot;symbol&quot;&gt;:div.comment-list&lt;/span&gt;
    (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;for&lt;/span&gt;&lt;/span&gt; [comment @comments]
      [comment-view comment])])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again, Reagent simplifies things and lets you construct your components in whatever way works best for you. The hard distinction between props and state is completely gone, instead just use ratoms however you prefer.&lt;/p&gt;
&lt;p&gt;That about wraps it up for now. If you’re on the fence about ClojureScript,  I’m hoping I piqued your interest a little bit.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Creating a Pegdown Plugin</title>
      <link>http://mattgreer.org/articles/creating-a-pegdown-plugin/</link>
      <pubDate>Thu, 25 Dec 2014 16:00:00 -0800</pubDate>
      <guid isPermaLink="true">http://mattgreer.org/articles/creating-a-pegdown-plugin/</guid>
      <author></author>
      <description>&lt;p&gt;I recently found myself needing to create a &lt;a href=&quot;http://pegdown.org&quot;&gt;Pegdown&lt;/a&gt; plugin. The documentation was a bit all over the place on this, so I figured I’d dump my end-to-end experience into a blog post for Google to consume.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;what-is-pegdown-&quot;&gt;What is Pegdown?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://pegdown.org&quot;&gt;Pegdown&lt;/a&gt; is a Markdown parser and HTML generator for the JVM. Converting Markdown to HTML is as simple as &lt;code&gt;new PegDownProcessor().markdownToHtml(markdown);&lt;/code&gt;, which is awesome. If you want to extend Markdown with your own syntax, Pegdown’s got you covered with its plugin system. However creating a Pegdown plugin is not quite as simple.&lt;/p&gt;
&lt;h2 id=&quot;the-two-phases-of-pegdown&quot;&gt;The Two Phases of Pegdown&lt;/h2&gt;
&lt;p&gt;Pegdown works in two phases. First it converts Markdown into an abstract syntax tree, then it takes that AST and serializes it into HTML. Your plugin probably needs to be involved in both phases, but you are free to only work with one phase if it suits you.&lt;/p&gt;
&lt;h2 id=&quot;the-parsing-plugin&quot;&gt;The Parsing Plugin&lt;/h2&gt;
&lt;p&gt;First, create a plugin that participates in the parsing/AST phase. In my case, I wanted to parse this extension to Markdown&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-markdown&quot;&gt;%%% someMethod(someParam=someValue)
body goes here
%%%
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You need to create a class that implements &lt;a href=&quot;https://github.com/sirthias/pegdown/blob/master/src/main/java/org/pegdown/plugins/InlinePluginParser.java&quot;&gt;InlinePluginParser&lt;/a&gt; and/or &lt;a href=&quot;https://github.com/sirthias/pegdown/blob/master/src/main/java/org/pegdown/plugins/BlockPluginParser.java&quot;&gt;BlockPluginParser&lt;/a&gt;. An inline plugin parses something that happens during the course of a sentence, such as &lt;code&gt;using backticks for code&lt;/code&gt;, and a block level plugin parses an entire top level chunk of Markdown, like the example above.&lt;/p&gt;
&lt;p&gt;Here is my parsing plugin in its entirety. Afterwards I’ll dive into some of its specifics:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-java&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.Map;

&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.parboiled.BaseParser;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.parboiled.Rule;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.parboiled.support.StringBuilderVar;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.pegdown.Parser;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.pegdown.plugins.BlockPluginParser;

&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ComponentParser&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BlockPluginParser&lt;/span&gt; &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String TAG = &lt;span class=&quot;string&quot;&gt;&quot;%%%&quot;&lt;/span&gt;;

  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ComponentParser&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(ALL, &lt;span class=&quot;number&quot;&gt;1000l&lt;/span&gt;, DefaultParseRunnerProvider);
  }

  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Rule[] blockPluginRules() {
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Rule[] { component() };
  }

  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Rule &lt;span class=&quot;title&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{

    &lt;span class=&quot;comment&quot;&gt;// stack ends up like this:&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;// body&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;// params map&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;// component name&lt;/span&gt;

    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; NodeSequence(
             open(),
             body(),
             close(),
             push(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ComponentNode(
                        (String)pop(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;),
                        (Map&amp;lt;String, String&amp;gt;)pop(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;),
                        (String)pop())));
  }

  &lt;span class=&quot;comment&quot;&gt;/*
   * parses out the component name and its parameters
   *
   * example:
   * %%% myComponent(foo=bar)
   */&lt;/span&gt;
  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Rule &lt;span class=&quot;title&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
    StringBuilderVar componentName = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StringBuilderVar();

    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Sequence(
             TAG,
             whitespace(),
             OneOrMore(
               TestNot(&lt;span class=&quot;string&quot;&gt;'('&lt;/span&gt;),
               BaseParser.ANY,
               componentName.append(matchedChar())
             ),
             push(componentName.getString()),
             whitespace(),
             &lt;span class=&quot;string&quot;&gt;'('&lt;/span&gt;,
               whitespace(),
               params(),
               whitespace(),
             &lt;span class=&quot;string&quot;&gt;')'&lt;/span&gt;,
             whitespace(),
             Newline());
  }

  &lt;span class=&quot;comment&quot;&gt;/*
   * parses out parameters from in between the parentheses
   * they look like: foo=bar,baz=boo
   * and optionally have whitespace around any tokens
   * foo = bar , baz=boo
   */&lt;/span&gt;
  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Rule &lt;span class=&quot;title&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
    ParamVar params = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ParamVar();
    StringBuilderVar paramName = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StringBuilderVar();
    StringBuilderVar paramValue = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StringBuilderVar();

    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Sequence(
             ZeroOrMore(
               whitespace(),
               OneOrMore(
                 TestNot(&lt;span class=&quot;string&quot;&gt;'='&lt;/span&gt;),
                 TestNot(&lt;span class=&quot;string&quot;&gt;' '&lt;/span&gt;),
                 BaseParser.ANY,
                 paramName.append(matchedChar())),
               whitespace(),
               &lt;span class=&quot;string&quot;&gt;'='&lt;/span&gt;,
               whitespace(),
               OneOrMore(
                 TestNot(&lt;span class=&quot;string&quot;&gt;')'&lt;/span&gt;),
                 TestNot(&lt;span class=&quot;string&quot;&gt;','&lt;/span&gt;),
                 TestNot(&lt;span class=&quot;string&quot;&gt;' '&lt;/span&gt;),
                 BaseParser.ANY,
                 paramValue.append(matchedChar())),
               whitespace(),
               Optional(&lt;span class=&quot;string&quot;&gt;','&lt;/span&gt;),
               whitespace(),
               params.put(paramName.getString(), paramValue.getString()),
               paramName.clear(),
               paramValue.clear()),
             push(params.get()));
  }

  &lt;span class=&quot;comment&quot;&gt;/*
   * extracts the body of the component into a raw string
   */&lt;/span&gt;
  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Rule &lt;span class=&quot;title&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
    StringBuilderVar rawBody = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StringBuilderVar();

    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Sequence(
             OneOrMore(
               TestNot(TAG),
               BaseParser.ANY,
               rawBody.append(matchedChar())),
             push(rawBody.getString().trim()));
  }

  &lt;span class=&quot;comment&quot;&gt;/*
   * end of the component, ie &quot;%%%&quot;
   */&lt;/span&gt;
  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; TAG;
  }

  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Rule &lt;span class=&quot;title&quot;&gt;whitespace&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ZeroOrMore(
             AnyOf(&lt;span class=&quot;string&quot;&gt;&quot; \t\f&quot;&lt;/span&gt;));
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;implementing-blockpluginparser&quot;&gt;Implementing BlockPluginParser&lt;/h3&gt;
&lt;p&gt;This interface only has one method, &lt;code&gt;Rule[] blockPluginRules()&lt;/code&gt;, which returns all of the top level rules you want the parser to follow. In my case I am just returning the &lt;code&gt;component&lt;/code&gt; Rule, which has subrules that altogether tell Pegdown how to parse an entire component block.&lt;/p&gt;
&lt;h3 id=&quot;the-value-stack&quot;&gt;The Value Stack&lt;/h3&gt;
&lt;p&gt;Notice in my plugin calls to &lt;code&gt;push()&lt;/code&gt; and &lt;code&gt;pop()&lt;/code&gt;, that is where I am interacting with Pegdown’s value stack. This is a typical stack where Rules can stash temporary values. As the parser works its way through parsing my component, I push stuff onto the stack as I figure them out.&lt;/p&gt;
&lt;div class=&quot;callout wisdom&quot;&gt;
Pegdown has one expectation here: &lt;em&gt;your plugin should finish its job with one Node pushed onto the stack&lt;/em&gt;. In other words, after your plugin completely finishes, the stack should be one deeper, and that top value you left behind needs to be a Node, which is your plugin’s contribution to the overall AST that is getting built.
&lt;/div&gt;

&lt;p&gt;Leaving behind two nodes or zero nodes won’t cut it. The last thing my plugin does in &lt;code&gt;component()&lt;/code&gt; is push on a &lt;code&gt;ComponentNode&lt;/code&gt;, which is covered below.&lt;/p&gt;
&lt;h3 id=&quot;parboiled-s-rule-rewriting-magic&quot;&gt;Parboiled’s Rule Rewriting Magic&lt;/h3&gt;
&lt;p&gt;Pegdown is built on top of &lt;a href=&quot;http://parboiled.org&quot;&gt;Parboiled&lt;/a&gt;. So your plugin is really working with Parboiled mostly. Notice how the rules directly call methods like &lt;code&gt;push()&lt;/code&gt;? That seems odd, wouldn’t they just get called right away and have no effect? You want them to get invoked while the actual parsing is happening.&lt;/p&gt;
&lt;p&gt;That’s where Parboiled comes in, it will rewrite your Rule methods so that everything you’re declaring actually happens at parse time. It’s an interesting approach, and has the advantage of making writing Rules simpler.&lt;/p&gt;
&lt;h3 id=&quot;rules-matching-and-actions&quot;&gt;Rules, Matching and Actions&lt;/h3&gt;
&lt;p&gt;Your Rule methods are attempting to match the Markdown text and see if the text conforms to what they expect. If the text does, then Rules can also take actions, which are responses to when a successful match happens.&lt;/p&gt;
&lt;p&gt;Take a look at the &lt;code&gt;open()&lt;/code&gt; Rule, which parses the opening line of my components. It’s working with&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-markdown&quot;&gt;%%% someMethod(someParam=someValue)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;here it is, in a slightly simplified form&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-java&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Rule &lt;span class=&quot;title&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
    StringBuilderVar componentName = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StringBuilderVar();

    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Sequence(
             &lt;span class=&quot;string&quot;&gt;&quot;%%%&quot;&lt;/span&gt;,
             OneOrMore(
               TestNot(&lt;span class=&quot;string&quot;&gt;'('&lt;/span&gt;),
               BaseParser.ANY,
               componentName.append(matchedChar())
             ),
             push(componentName.getString()),
             &lt;span class=&quot;string&quot;&gt;'('&lt;/span&gt;,
               params(),
             &lt;span class=&quot;string&quot;&gt;')'&lt;/span&gt;,
             Newline());
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here a &lt;code&gt;Sequence()&lt;/code&gt; is being returned. It wants to match the entire opening line.&lt;/p&gt;
&lt;div class=&quot;callout wisdom&quot;&gt;
  &lt;code&gt;Sequence()&lt;/code&gt; comes from &lt;a href=&quot;https://github.com/sirthias/parboiled/blob/master/parboiled-java/src/main/java/org/parboiled/BaseParser.java&quot;&gt;&lt;code&gt;org.parboiled.BaseParser&lt;/code&gt;&lt;/a&gt;. Notice my plugin extends &lt;code&gt;org.pegdown.Parser&lt;/code&gt;, which is a subclass of &lt;code&gt;BaseParser&lt;/code&gt;. You don’t have to extend these classes, but doing so is highly recommended. They provide many parsing primitives you will need, such as &lt;code&gt;Sequence()&lt;/code&gt; and &lt;code&gt;Newline()&lt;/code&gt;
&lt;/div&gt;

&lt;p&gt;After finding the opening &lt;code&gt;%%%&lt;/code&gt;, I then want to extract the name. &lt;code&gt;OneOrMore()&lt;/code&gt; is doing just that. First &lt;code&gt;TestNot(&amp;#39;(&amp;#39;)&lt;/code&gt; says “as long as the next character isn’t a &lt;code&gt;(&lt;/code&gt;, then keep doing your thing”. &lt;code&gt;BaseParser.ANY&lt;/code&gt; then matches any character at all (since &lt;code&gt;TestNot&lt;/code&gt; has succeeded at this point, I know I like what &lt;code&gt;ANY&lt;/code&gt; is going to find). From there I grab what was matched out of the text stream and throw it into &lt;code&gt;componentName&lt;/code&gt;. This will happen repeatedly until a &lt;code&gt;(&lt;/code&gt; is hit. At that point, &lt;code&gt;push(componentName.getString())&lt;/code&gt; will happen, and the name of the component is tucked away onto the stack.&lt;/p&gt;
&lt;p&gt;The rest of the method looks for a set of parentheses and has the &lt;code&gt;params()&lt;/code&gt; rule handle whatever is found inside of them.&lt;/p&gt;
&lt;h3 id=&quot;what-if-a-rule-fizzles-out-&quot;&gt;What If a Rule Fizzles Out?&lt;/h3&gt;
&lt;p&gt;What if the input was actually&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-markdown&quot;&gt;%%% someComponent thisIsUnexpected
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;wouldn’t the above Rule push the name onto the stack, then crap out? Yes, it would. But if a Rule doesn’t fully finish parsing, then Pegdown/Parboiled will abandon the changes the Rule made to the stack. So don’t worry, just charge ahead.&lt;/p&gt;
&lt;h3 id=&quot;dealing-with-vars&quot;&gt;Dealing with Vars&lt;/h3&gt;
&lt;p&gt;At this point, you’re pretty much good to go on how parsing plugins work. It’s then mostly a matter of getting a feel for composing primitive Rules together.&lt;/p&gt;
&lt;p&gt;But there is one more funky thing you might have to deal with, Parboiled Vars. Remember that magic that Parboiled does to your Rules methods? This magic means you can’t just use any ol’ Java you want. If you need to work with a data structure, such as a string, then you need to do so with it wrapped up in a &lt;code&gt;Var&lt;/code&gt;. Notice in &lt;code&gt;open()&lt;/code&gt; the &lt;code&gt;componentName&lt;/code&gt; was being added to a &lt;code&gt;StringBuilderVar&lt;/code&gt;? That’s just a simple class that wraps a &lt;code&gt;StringBuilder&lt;/code&gt;, and does so in such a way that is compatible with Parboiled’s rewrite magic.&lt;/p&gt;
&lt;p&gt;Here is &lt;code&gt;params()&lt;/code&gt;, which parses out the parameters to the component:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-java&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Rule &lt;span class=&quot;title&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
    ParamVar params = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ParamVar();
    StringBuilderVar paramName = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StringBuilderVar();
    StringBuilderVar paramValue = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StringBuilderVar();

    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Sequence(
             ...
             params.put(paramName.getString(), paramValue.getString())
             ...
          );
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It’s using &lt;code&gt;StringBuilderVar&lt;/code&gt;s again, which come with Parboiled. But &lt;code&gt;ParamVar&lt;/code&gt; is my own creation. It wraps a &lt;code&gt;Map&amp;lt;String,String&amp;gt;&lt;/code&gt; into a Var. Basically all you need to do is have working with your data structure return &lt;code&gt;true&lt;/code&gt; to let Parboiled know it can continue with the next step of your Rule.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-java&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ParamVar&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Var&amp;lt;Map&amp;lt;String,String&amp;gt;&amp;gt;&lt;/span&gt; {&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ParamVar&lt;/span&gt;() {
    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;String,String&amp;gt;());
  }

  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;put&lt;/span&gt;(String key, String value) {
    get().put(key, value);
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s as far as I needed to take Vars, I’m sure they get more involved if you need to do fancier stuff.&lt;/p&gt;
&lt;h2 id=&quot;having-pegdown-use-your-parser-plugin&quot;&gt;Having Pegdown Use Your Parser Plugin&lt;/h2&gt;
&lt;p&gt;Now with the parser plugin written, I need to tell Pegdown to use it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-java&quot;&gt;  PegDownPlugins plugins = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; PegDownPlugins.Builder()
    .withPlugin(ComponentParser.class).build();

  PegDownProcessor processor = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; PegDownProcessor(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, plugins);
  RootNode ast = processor.parseMarkdown(markdown.toCharArray());
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;callout pitfall&quot;&gt;
You need to give Pegdown your parser’s &lt;strong&gt;class&lt;/strong&gt;, this is key to allowing Parboiled to perform its rewrite magic.
&lt;/div&gt;

&lt;h2 id=&quot;nodes&quot;&gt;Nodes&lt;/h2&gt;
&lt;p&gt;Pegdown parses Markdown into a tree of Nodes, where &lt;code&gt;RootNode&lt;/code&gt; is the root. In my parser plugin above, I created a &lt;code&gt;ComponentNode&lt;/code&gt;, which is my own class. This allows your custom parsing’s results to live in the AST. Here is my &lt;code&gt;ComponentNode&lt;/code&gt; class, simplified a bit:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-java&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ComponentNode&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AbstractNode&lt;/span&gt; &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String name;
  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Map&amp;lt;String,String&amp;gt; params;
  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String body;

  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ComponentNode&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String name, Map&amp;lt;String,String&amp;gt; params, String body)&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.params = params;
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.body = body;
  }

  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Visitor visitor)&lt;/span&gt; &lt;/span&gt;{
    visitor.visit((Node) &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);
  }

  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; List&amp;lt;Node&amp;gt; &lt;span class=&quot;title&quot;&gt;getChildren&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;
  }
  ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Converting from AST to HTML involves the visitor pattern, hence the &lt;code&gt;accept()&lt;/code&gt; method.&lt;/p&gt;
&lt;h2 id=&quot;from-ast-to-html&quot;&gt;From AST to HTML&lt;/h2&gt;
&lt;p&gt;Now I’ll serialize the custom node into the final HTML. This requires me to give Pegdown a serializer plugin during the serialization phase:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-java&quot;&gt;  List&amp;lt;ToHtmlSerializerPlugin&amp;gt; serializePlugins =
    Arrays.asList((ToHtmlSerializerPlugin)(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ComponentSerializer()));

  String finalHtml =
    &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ToHtmlSerializer(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkRenderer(), serializePlugins)
      .toHtml(ast);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And of course &lt;code&gt;ComponentSerializer&lt;/code&gt; is a class I wrote to handle my custom stuff:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-java&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ComponentSerializer&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ToHtmlSerializerPlugin&lt;/span&gt; &lt;/span&gt;{

  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Node node, Visitor visitor, Printer printer)&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (node &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; ComponentNode) {
      ComponentNode cNode = (ComponentNode)node;

      printer.print(&lt;span class=&quot;string&quot;&gt;&quot;This gets dumped into the final HTML&quot;&lt;/span&gt;);
      printer.print(cNode.getName());
      printer.println();

      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;
    }
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You need to return &lt;code&gt;true&lt;/code&gt; to let Pegdown know you’ve successfully handled the node.&lt;/p&gt;
&lt;p&gt;And that’s all it takes to add custom Markdown extensions with Pegdown.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Node sql-fixtures (a new module)</title>
      <link>http://mattgreer.org/articles/node-sql-fixtures/</link>
      <pubDate>Wed, 15 Oct 2014 17:00:00 -0700</pubDate>
      <guid isPermaLink="true">http://mattgreer.org/articles/node-sql-fixtures/</guid>
      <author></author>
      <description>&lt;p&gt;I don’t think a fixture generator for PostgreSQL exists in NPM. If one does, I could not find it. So I went ahead and &lt;a href=&quot;https://github.com/city41/node-sql-fixtures&quot;&gt;made one&lt;/a&gt;. Added bonus, it works with MySQL, MariaDB and sqlite as well.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;fixtures-&quot;&gt;Fixtures?&lt;/h2&gt;
&lt;p&gt;“Fixture” is just a fancy word for “sample data”. I first encountered the idea of fixtures in Ruby on Rails almost a decade ago (egads!). Typically in Ruby you lay out some sample data using YAML, and this data then gets populated into your database. This is ideal for integration tests, dummy data and end-to-end tests.&lt;/p&gt;
&lt;h2 id=&quot;sql-fixtures-for-node&quot;&gt;SQL Fixtures for Node&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/city41/node-sql-fixtures&quot;&gt;sql-fixtures&lt;/a&gt; applies the same idea, except this time for Node. Since JavaScript is such a flexible language, no need for something like YAML, it’s easy to just define the fixture data in JavaScript itself.&lt;/p&gt;
&lt;p&gt;For example, here’s how to populate some data in a Users table in your database:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fixtures = {
  &lt;span class=&quot;attr&quot;&gt;Users&lt;/span&gt;: [{
    &lt;span class=&quot;attr&quot;&gt;username&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;'Henry'&lt;/span&gt;
  }, {
    &lt;span class=&quot;attr&quot;&gt;username&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;'Catherine'&lt;/span&gt;
  }]
};

&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sqlFixtures = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'sql-fixtures'&lt;/span&gt;);

sqlFixtures.create(databaseConfig, fixtures).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;result&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;comment&quot;&gt;// the Users table now has two more rows in it&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;// result returns what got created,&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;// so you can make use of the data in your tests&lt;/span&gt;
  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(result.Users[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].username); &lt;span class=&quot;comment&quot;&gt;// Henry&lt;/span&gt;
  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(result.Users[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].id);       &lt;span class=&quot;comment&quot;&gt;// the id the db generated&lt;/span&gt;
  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(result.Users[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;].username); &lt;span class=&quot;comment&quot;&gt;// Catherine&lt;/span&gt;
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;databaseConfig&lt;/code&gt; parameter tells sql-fixtures how to connect to your database, more info on that in the &lt;a href=&quot;https://github.com/city41/node-sql-fixtures/blob/master/README.md&quot;&gt;README&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;foreign-key-resolution&quot;&gt;Foreign Key Resolution&lt;/h2&gt;
&lt;p&gt;The neatest feature of sql-fixtures is automatic foreign key resolution. If you want to insert data into two tables and have their keys point at each other, it can be tedious to do manually. With sql-fixtures you can specify the relation in the fixture spec:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fixtures = {
  &lt;span class=&quot;attr&quot;&gt;Users&lt;/span&gt;: {
    &lt;span class=&quot;attr&quot;&gt;username&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;'Henry'&lt;/span&gt;
  },
  &lt;span class=&quot;attr&quot;&gt;Purchase&lt;/span&gt;: {
    &lt;span class=&quot;attr&quot;&gt;purchaseDate&lt;/span&gt;: &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;(),
    &lt;span class=&quot;attr&quot;&gt;userId&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Users:0&quot;&lt;/span&gt;
  }
};

sqlFixtures.create(databaseConfig, fixtures).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;result&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(result.Purchase[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].userId === result.Users[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].id); &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the above, sql-fixtures will create the User row first, then circle back and populate &lt;code&gt;Purchase.userId&lt;/code&gt; with Henry’s actual id before adding the new row in the Purchase table.&lt;/p&gt;
&lt;p&gt;The default is to use indices to indicate which record you want to point to, but you can also use a &lt;code&gt;specId&lt;/code&gt;. This is useful if you’re generating a lot of data or complex data, as keeping track of which index is which can get tedious:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fixtures = {
  &lt;span class=&quot;attr&quot;&gt;Users&lt;/span&gt;: {
    &lt;span class=&quot;attr&quot;&gt;username&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;'Henry'&lt;/span&gt;,
    &lt;span class=&quot;attr&quot;&gt;specId&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;'mySpecialUser'&lt;/span&gt;
  },
  &lt;span class=&quot;attr&quot;&gt;Purchase&lt;/span&gt;: {
    &lt;span class=&quot;attr&quot;&gt;purchaseDate&lt;/span&gt;: &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;(),
    &lt;span class=&quot;attr&quot;&gt;userId&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Users:mySpecialUser&quot;&lt;/span&gt;
  }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and with the specId, the association is made just like when using an index.&lt;/p&gt;
&lt;h2 id=&quot;that-s-it-&quot;&gt;That’s it!&lt;/h2&gt;
&lt;p&gt;Not much to this one. And a shout out to &lt;a href=&quot;http://knexjs.org/&quot;&gt;Knex.js&lt;/a&gt; which is the library that sql-fixtures uses to communicate with the database. I’m a fan of Knex.js and the ORM built on top of it, &lt;a href=&quot;http://bookshelfjs.org/&quot;&gt;Bookshelf.js&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;by-the-way&quot;&gt;By the way&lt;/h3&gt;
&lt;p&gt;Knex.js is why I make the claim this works with Postgres, MySql, Maria and sqlite, as Knex.js supports all of them. However, I only need Postgres so far, so Postgres is the only database that’s seen any real usage. If you use sql-fixtures with one of the other database engines, let me know if you hit any problems.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Traceur, Gulp, Browserify and ES6</title>
      <link>http://mattgreer.org/articles/traceur-gulp-browserify-es6/</link>
      <pubDate>Fri, 19 Sep 2014 17:00:00 -0700</pubDate>
      <guid isPermaLink="true">http://mattgreer.org/articles/traceur-gulp-browserify-es6/</guid>
      <author></author>
      <description>&lt;p&gt;Here’s a brain dump of my experience getting these recent-ish techs up and running together on a small project …&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;project-structure-and-goal&quot;&gt;Project Structure and Goal&lt;/h2&gt;
&lt;p&gt;My project (named baby-engine), is structured like this, you can see it &lt;a href=&quot;https://github.com/city41/baby-engine&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;src/
    &amp;lt;ES6 JavaScript source&amp;gt;

lib/
    &amp;lt;the ES6 js in src/ gets built and dumped into here as ES5 JS&amp;gt;

index.js  &amp;lt;-- npm module entry point written in vanilla ES5
              and require()s stuff from lib/

sandbox/
    &amp;lt;a small webpage that consumes the module and uses it&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I have two goals:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;A standard npm module with the entry point at &lt;code&gt;index.js&lt;/code&gt;, which then &lt;code&gt;require()&lt;/code&gt;s stuff from &lt;code&gt;lib/&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A browserify’ed webpage that pulls in baby-engine and then uses it. This is a small test sandbox for dev purposes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;step-one-es6-modules&quot;&gt;Step One: ES6 Modules&lt;/h2&gt;
&lt;p&gt;My ES6 code is ES6 through and through, including modules. For example, I have a type called &lt;code&gt;RectEntity&lt;/code&gt; that subclasses &lt;code&gt;BaseEntity&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; BaseEntity &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'./base-entity'&lt;/span&gt;;

&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RectEntity&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BaseEntity&lt;/span&gt; &lt;/span&gt;{
    ...
}

&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; RectEntity;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the ES6 world, this all works just fine and as you’d expect. Traceur, however, does not quite turn this into a CommonJS module in the way I wanted.&lt;/p&gt;
&lt;p&gt;Traceur will define the export from above as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.defineProperties(exports, {
  &lt;span class=&quot;attr&quot;&gt;default&lt;/span&gt;: {&lt;span class=&quot;attr&quot;&gt;get&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; $__default;
    }},
  &lt;span class=&quot;attr&quot;&gt;__esModule&lt;/span&gt;: {&lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;}
});

...

var $__default = RectEntity;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What I really wanted was effectively &lt;code&gt;module.exports = RectEntity&lt;/code&gt;, but I’m pretty convinced Traceur just won’t do that. In ES6, &lt;code&gt;export &amp;lt;name&amp;gt; &amp;lt;value&amp;gt;&lt;/code&gt; is how it works, and Traceur will use that name verbatim. Even if you do this in ES6&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export class RectEntity ... {

}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;which is perfectly legal, but still Traceur will give you an exports with a &lt;code&gt;RectEntity&lt;/code&gt; property defined on it. I don’t want a property, I just want &lt;code&gt;RectEntity&lt;/code&gt; itself to be the export.&lt;/p&gt;
&lt;p&gt;In ES6 land, &lt;code&gt;export default &amp;lt;value&amp;gt;&lt;/code&gt; basically means “this is the default thing we are exporting from this module, if someone just imports this module, give them this”. So you’d think &lt;code&gt;default&lt;/code&gt; would translate into effectively &lt;code&gt;module.exports = RectEntity&lt;/code&gt;, but it doesn’t, it puts a &lt;code&gt;default&lt;/code&gt; property on there. You can even see this in Traceur’s code when you import another module:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; BaseEntity = ($__base_45_entity__ = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;./base-entity&quot;&lt;/span&gt;), $__base_45_entity__ &amp;amp;&amp;amp; $__base_45_entity__.__esModule &amp;amp;&amp;amp; $__base_45_entity__ || {&lt;span class=&quot;attr&quot;&gt;default&lt;/span&gt;: $__base_45_entity__}).default;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That long line of generated code basically boils down to – in CommonJS speak – &lt;code&gt;var BaseEntity = require(&amp;#39;./base-entity&amp;#39;).default&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This meant my &lt;code&gt;index.js&lt;/code&gt; ended up looking like this&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = {
  &lt;span class=&quot;attr&quot;&gt;Engine&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'./lib/engine'&lt;/span&gt;).default,
  &lt;span class=&quot;attr&quot;&gt;RectEntity&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'./lib/rect-entity'&lt;/span&gt;).default
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which is weird, but I can live with it.&lt;/p&gt;
&lt;h2 id=&quot;step-two-the-traceur-runtime&quot;&gt;Step Two: The Traceur Runtime&lt;/h2&gt;
&lt;p&gt;Traceur requires a small runtime, it provides shims and some other utilities to help pull off ES6 features in ES5 land. There are several ways to get this runtime into your module, I’ll list them in order of best to worst. If there is an even better way to pull this off &lt;a href=&quot;mailto:matt.e.greer@gmail.com&quot;&gt;please let me know!&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;approach-one-pull-it-in-yourself&quot;&gt;Approach one: pull it in yourself&lt;/h3&gt;
&lt;p&gt;This seems the cleanest to me. Install traceur as a dependency (&lt;code&gt;npm install --save traceur&lt;/code&gt;), then in &lt;code&gt;index.js&lt;/code&gt;, require the runtime&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'traceur/bin/traceur-runtime'&lt;/span&gt;);

&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = {
  &lt;span class=&quot;attr&quot;&gt;Engine&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'./lib/engine'&lt;/span&gt;).default,
  &lt;span class=&quot;attr&quot;&gt;RectEntity&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'./lib/rect-entity'&lt;/span&gt;).default
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It will define the runtime on &lt;code&gt;global&lt;/code&gt; and from there the rest of your transpiled code will be happy. Pretty simple.&lt;/p&gt;
&lt;h3 id=&quot;approach-two-pull-it-in-with-gulp-traceur&quot;&gt;Approach two: pull it in with gulp-traceur&lt;/h3&gt;
&lt;p&gt;I am transpiling from ES6-&amp;gt;ES5 using &lt;a href=&quot;https://github.com/sindresorhus/gulp-traceur&quot;&gt;gulp-traceur&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;'build:lib'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; gulp.src(&lt;span class=&quot;string&quot;&gt;'src/**/*.js'&lt;/span&gt;)
    .pipe(traceur({&lt;span class=&quot;attr&quot;&gt;modules&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;'commonjs'&lt;/span&gt;}))
    .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;'./lib'&lt;/span&gt;));
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;the above will transpile the code but not include the runtime. gulp-traceur makes it available at &lt;code&gt;traceur.RUNTIME_PATH&lt;/code&gt;, so you can just do&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;'build:lib'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; gulp.src([traceur.RUNTIME_PATH, &lt;span class=&quot;string&quot;&gt;'src/**/*.js'&lt;/span&gt;])
    .pipe(traceur({&lt;span class=&quot;attr&quot;&gt;modules&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;'commonjs'&lt;/span&gt;}))
    .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;'./lib'&lt;/span&gt;));
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;except &lt;em&gt;this does not work!&lt;/em&gt; At least, it does not work for me because I am using ES6 modules. I want Traceur to output CommonJS modules for me, and the above causes a chicken and egg scenario. The Traceur runtime itself will be made into a CommonJS module. Which is fine, except any CommonJS module built by Traceur first needs the Traceur runtime. You will get an error that &lt;code&gt;Reflect is not defined&lt;/code&gt;. This is because &lt;code&gt;Reflect&lt;/code&gt; gets defined inside the runtime.&lt;/p&gt;
&lt;p&gt;There are two solutions to this:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Don’t use ES6 modules in your ES6 code:&lt;/strong&gt; Stick with the classic &lt;code&gt;module.exports&lt;/code&gt; and &lt;code&gt;require()&lt;/code&gt; as always, then turn off commonjs modules when invoking gulp-traceur.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Create a second gulp task to pull the runtime in:&lt;/strong&gt; this is hacky and ugly, but basically if you do&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gulp.task(&amp;#39;traceur:runtime&amp;#39;, function() {
  return gulp.src(traceur.RUNTIME_PATH)
    .pipe(gulp.dest(&amp;#39;./lib&amp;#39;));
});

gulp.task(&amp;#39;build:lib&amp;#39;, [&amp;#39;traceur:runtime&amp;#39;], function() {
  return gulp.src(&amp;#39;src/**/*.js&amp;#39;)
    .pipe(traceur({modules:&amp;#39;commonjs&amp;#39;}))
    .pipe(gulp.dest(&amp;#39;./lib&amp;#39;));
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;for either of the above solutions you still need to require the runtime in &lt;code&gt;index.js&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;approach-three-punt-on-it-and-let-browserify-bring-the-runtime&quot;&gt;Approach Three: punt on it and let Browserify bring the runtime&lt;/h3&gt;
&lt;p&gt;Browserify and ES6 get along great thanks to &lt;a href=&quot;https://github.com/thlorenz/es6ify&quot;&gt;es6ify&lt;/a&gt;. es6ify can bring the runtime in too, and for some scenarios this is the way to go. For me it’s not, as it leaves my core NPM module dead in the water unless whoever consumes it knows they need to provide the runtime. Which is pretty lame.&lt;/p&gt;
&lt;p&gt;With gulp, browserify and es6ify, it looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;'browserify:sandbox'&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;'build:lib'&lt;/span&gt;], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; browserify()
    .add(es6ify.runtime)
    .transform(es6ify)
    .require(&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;.resolve(&lt;span class=&quot;string&quot;&gt;'./sandbox/sandbox.js'&lt;/span&gt;), { &lt;span class=&quot;attr&quot;&gt;entry&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; })
    .bundle()
    .pipe(source(&lt;span class=&quot;string&quot;&gt;'sandbox-bundle.js'&lt;/span&gt;))
    .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;'./sandbox/'&lt;/span&gt;));
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice the strange call to Browserify’s require? This is because you must include the runtime first. Otherwise your code will come first and it will be without its runtime and crap out.&lt;/p&gt;
&lt;p&gt;An alternative way is this, which I actually prefer:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;'browserify:sandbox'&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;'build:lib'&lt;/span&gt;], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; browserify(es6ify.runtime)
    .transform(es6ify)
    .add(&lt;span class=&quot;string&quot;&gt;'./sandbox/sandbox.js'&lt;/span&gt;)
    .bundle()
    .pipe(source(&lt;span class=&quot;string&quot;&gt;'sandbox-bundle.js'&lt;/span&gt;))
    .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;'./sandbox/'&lt;/span&gt;));
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I think this makes it more clear what’s going on.&lt;/p&gt;
&lt;h2 id=&quot;phew-&quot;&gt;Phew!&lt;/h2&gt;
&lt;p&gt;Traceur, Gulp and all of these tools are still pretty new. Documentation is sparse, and blog posts (of which I just added to…) are all over the place. Hopefully this helps someone. If you know better ways to do any of this, I’d love to hear it. If you &lt;a href=&quot;mailto:matt.e.greer@gmail.com&quot;&gt;email&lt;/a&gt; with any tips, I’ll be sure to update this post with them.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Pair Programming Is Not a Panacea</title>
      <link>http://mattgreer.org/articles/pair-programming-is-not-a-panacea/</link>
      <pubDate>Tue, 26  Aug 2014 17:00:00 -0700</pubDate>
      <guid isPermaLink="true">http://mattgreer.org/articles/pair-programming-is-not-a-panacea/</guid>
      <author></author>
      <description>&lt;p&gt;For the past 3 years, I have almost exclusively pair programmed at my job. I have paired with many people in many situations and learned a lot about this practice. I have found pairing can be effective, but it can also be ineffective and costly. Pair programming seems to be gaining traction, which concerns me a little bit. Some of us really don’t like to pair, and I feel it’s important to recognize that and maintain a balance here. Pairing is just a tool like anything else; it definitely should not be your company’s default mode of work.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;if-you-re-going-to-start-pairing-&quot;&gt;If You’re Going to Start Pairing…&lt;/h2&gt;
&lt;p&gt;Before I really begin, I want to point out it’s important to create a proper pairing environment. Sticking two people at one desk with a laptop won’t cut it. Start with two desks, arranged at 90 degrees. One computer feeds two mirrored monitors (or four), two keyboards and two mice.&lt;/p&gt;
&lt;div class=&quot;center&quot;&gt;
  &lt;img class=&quot;diagram&quot; width=&quot;253&quot; height=&quot;253&quot; src=&quot;./pairing-station.svg&quot; alt=&quot;pairing station diagram&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;This gives each participant their own space, a comfortable neutral zone, and sets them up as equals as far as the environment is concerned. You don’t want the environment itself to cause any inhibitions.&lt;/p&gt;
&lt;h2 id=&quot;when-pairing-is-great&quot;&gt;When Pairing Is Great&lt;/h2&gt;
&lt;p&gt;Knowledge transfer is pairing’s killer feature.&lt;/p&gt;
&lt;p&gt;When one person knows the subject matter well and the other doesn’t, then pairing can be &lt;em&gt;highly&lt;/em&gt; effective. A slight variation includes when both people bring their own set of knowledge to the table, such as a front end developer and a back end developer joining to solve a problem that lies somewhere in the middle. Transferring knowledge through pairing is almost always effective, regardless of personalities involved or what knowledge is being transfered.&lt;/p&gt;
&lt;p&gt;The knowledge transfer doesn’t necessarily have to be the main focus of the pairing session. Small things like new key commands also get shared nicely. I find I can enjoy pairing with someone new just to get added exposure to tools, tricks, etc.&lt;/p&gt;
&lt;h3 id=&quot;impromptu-knowledge-transfers-are-great-too&quot;&gt;Impromptu Knowledge Transfers are Great Too&lt;/h3&gt;
&lt;p&gt;When you need help from someone, often the two of you end up crowded around one machine. If you can swap that machine with a pairing station, the help arrives faster and smoother. Instead of verbally relaying commands to enter, both people can just type and explore as needed, greatly improving communication.&lt;/p&gt;
&lt;h3 id=&quot;and-when-the-pair-gels&quot;&gt;And … When the Pair Gels&lt;/h3&gt;
&lt;p&gt;This is the other circumstance I have found where pairing is highly effective. When the two members gel well. Their personalities slide together just right, and the end result is a super being that is more than the sum of its parts. Sometimes way more. When this happens, it almost doesn’t matter what they are working on, they tend to do it very well.&lt;/p&gt;
&lt;h2 id=&quot;that-super-being-is-mythical-most-of-the-time&quot;&gt;That Super Being is Mythical Most of the Time&lt;/h2&gt;
&lt;p&gt;Throwing two random people together and expecting magic is optimistic at best. We see this all the time in the real world. A star studded cast yet the movie is a dud. Baseball’s all-star game rarely leads to two unstoppable teams. More is not necessarily better, and relationships are tricky.&lt;/p&gt;
&lt;h2 id=&quot;exploring-the-unknown-and-solving-hard-problems&quot;&gt;Exploring the Unknown and Solving Hard Problems&lt;/h2&gt;
&lt;p&gt;Tough problems are also where companies might gravitate towards pairing. Surely if one smart person can solve a difficult problem, two can solve it faster and better?&lt;/p&gt;
&lt;p&gt;I can’t think of a single time I’ve made a great breakthrough while pairing. Yet I can point to numerous times when the breakthroughs happen once the pair disperses. One person has to go to the dentist, or the other had to work from home that day. These are the moments when the hard problems suddenly make leaps toward being solved. This is a key area where i find pairing to be highly ineffective.&lt;/p&gt;
&lt;p&gt;I don’t want to have to constantly explain everything I’m thinking about when digging into hard problems. It slows me down and prevents me from getting into the zone, where deep thought really comes from and where breakthroughs happen. I want to feel free to try something silly or even stupid if I think it might increase my knowledge about the problem, without first having to justify why I’m doing it. Vice versa too with the person I’m working with, I want them to get into the zone as well. Susan Cain wrote a &lt;a href=&quot;http://www.nytimes.com/2012/01/15/opinion/sunday/the-rise-of-the-new-groupthink.html?pagewanted=all&amp;amp;_r=0&quot;&gt;great article&lt;/a&gt; all about this. There’s pretty compelling evidence that solitude is where innovation comes from.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you have talented and motivated people, they should be encouraged to work alone when creativity or efficiency is the highest priority.&lt;/p&gt;
&lt;p&gt;– Adrian Furnham &lt;em&gt;taken from the article linked just above&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Regardless of your personality or comfort level with other people, it’s hard to deny that keeping both people in the loop slows down and can even prevent deep thought. Being in the zone and really digging deep into a problem requires quiet and focus. Something pairing actively takes away from you. The recent backlash against open offices (such as &lt;a href=&quot;http://www.theguardian.com/news/2013/nov/18/open-plan-offices-bad-harvard-business-review&quot;&gt;here&lt;/a&gt;, &lt;a href=&quot;http://www.newyorker.com/online/blogs/currency/2014/01/the-open-office-trap.html&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;http://www.fastcompany.com/3022456/dialed/the-10-worst-things-about-working-in-an-open-office-in-your-words&quot;&gt;here&lt;/a&gt;) largely applies to pairing too.&lt;/p&gt;
&lt;h2 id=&quot;i-am-an-introvert&quot;&gt;I &lt;em&gt;am&lt;/em&gt; an introvert&lt;/h2&gt;
&lt;p&gt;I’m totally an introvert. For sure, my disposition makes me more critical of pairing.&lt;/p&gt;
&lt;p&gt;Roughly a third of the population is introverted, and there is no correlation between introversion/extroversion and intelligence. These facts are concerning when it comes to pairing regardless of where you personally lie on the spectrum.&lt;/p&gt;
&lt;p&gt;Pairing lets the loud idea win. Which might be the correct idea, or … it might not be. Why leave it to chance? In a pairing situation a quieter, more introverted or anxious person is far less likely to push their idea forward. Pairing usually ensures that the more extroverted – or more engaged – person’s idea to be the one that gets implemented.&lt;/p&gt;
&lt;p&gt;Many of us just don’t shine in this situation. Heck for many of us this situation is down right uncomfortable. Programming has stereotypically attracted the quieter, more introverted types. It’s clearly not a loud or very social activity. Pairing may be shutting this type of person down, which is not what you want.&lt;/p&gt;
&lt;h2 id=&quot;other-pairing-problems&quot;&gt;Other Pairing Problems&lt;/h2&gt;
&lt;p&gt;Leaving behind the whole introversion/extroversion arguments, there are problems with pairing that affect everyone.&lt;/p&gt;
&lt;h3 id=&quot;different-levels-of-engagement-within-the-pair&quot;&gt;Different levels of engagement within the pair&lt;/h3&gt;
&lt;p&gt;Much like group work back in high school, pairing can lead to a situation where the two people are engaged at different levels. One person may contribute more simply because they are more interested, are having a particularly good day, are more disciplined, whatever it may be. The other person may contribute less due to being uncomfortable, bored, less disciplined or internally not agreeing with the chosen approach. If nothing else, this is costly. A perfectly good employee is really not doing much.&lt;/p&gt;
&lt;h3 id=&quot;how-long-things-take&quot;&gt;How long things take&lt;/h3&gt;
&lt;p&gt;In my experience pairing almost always takes more chronological time to complete a task. Take that value and multiply it by two and that’s a pretty large cost to the company. Sometimes that cost is worth it. Knowledge transfer is very important in a company, and pairing can be an effective way to pull that off. Sometimes the extra cost of pairing is worth the benefits that come from it. But sometimes it isn’t.&lt;/p&gt;
&lt;h3 id=&quot;physical-space&quot;&gt;Physical Space&lt;/h3&gt;
&lt;p&gt;Proper pairing stations take more space and hardware. That can be hard to justify sometimes. I’ve even seen more pairing stations meaning the removal of personal desks and personal space, leaving fewer places people can escape to for some solitude.&lt;/p&gt;
&lt;h2 id=&quot;pairing-is-not-necessarily-collaboration&quot;&gt;Pairing is Not Necessarily Collaboration&lt;/h2&gt;
&lt;p&gt;Pairing leads to collaboration much like blind dates lead to romance. The act of pairing itself has little influence on the actual collaboration that may or may not happen. There are more natural and more efficient ways to collaborate, such as code reviews and ad hoc conversations. Rather than confine yourself to one person, workers should feel free to seek out the input they are after.&lt;/p&gt;
&lt;p&gt;More recently, a focus on office spaces that balance open spaces with private coves are becoming more common. This gives people the power to decide when to be collaborative, and when to work in quiet focus. Letting people naturally make this decision seems much more effective.&lt;/p&gt;
&lt;h2 id=&quot;pairing-is-a-tool&quot;&gt;Pairing is a Tool&lt;/h2&gt;
&lt;p&gt;In the end that’s all it is and all I am really arguing. Sometimes pairing is great, other times it’s costly and ineffective. The key is to recognize this and utilize pairing intelligently. If your company is new to pairing, you need to get familiar with it and find out for yourself when it’s effective. This is no different from any other tool. But please don’t propose it as the new default for all work going forward, it probably won’t work.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>JavaScript Promises ... In Wicked Detail</title>
      <link>http://mattgreer.org/articles/promises-in-wicked-detail/</link>
      <pubDate>Sat, 08 Feb 2014 16:00:00 -0800</pubDate>
      <guid isPermaLink="true">http://mattgreer.org/articles/promises-in-wicked-detail/</guid>
      <author></author>
      <description>&lt;p&gt;I’ve been using promises in my JavaScript code for a while now. They can be a little brain bending at first. I now use them pretty effectively, but when it came down to it, I didn’t fully understand how they work. This article is my resolution to that. If you stick around until the end, you should understand promises well too.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;We will be incrementally creating a promise implementation that by the end will &lt;em&gt;mostly&lt;/em&gt; meet the &lt;a href=&quot;http://promises-aplus.github.io/promises-spec/&quot;&gt;Promises/A+ spec&lt;/a&gt;, and understand how promises meet the needs of asynchronous programming along the way. This article assumes you already have some familiarity with promises. If you don’t, &lt;a href=&quot;http://promisejs.org&quot;&gt;promisejs.org&lt;/a&gt; is a good site to checkout.&lt;/p&gt;
&lt;h2 id=&quot;change-log&quot;&gt;Change log&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;2014-12-23:&lt;/strong&gt; Added &lt;a href=&quot;#recovering-from-rejection&quot;&gt;Recovering from Rejection&lt;/a&gt; section. The article was a bit ambiguous on handling rejection, this new section should clear things up.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#why-&quot;&gt;Why?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-simplest-use-case&quot;&gt;The Simplest Use Case&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#defining-the-promise-type&quot;&gt;Defining the Promise type&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#this-code-is-brittle-and-bad&quot;&gt;This Code is Brittle and Bad&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;&lt;a href=&quot;#promises-have-state&quot;&gt;Promises have State&lt;/a&gt;&lt;/li&gt;
   &lt;li&gt;&lt;a href=&quot;#chaining-promises&quot;&gt;Chaining Promises&lt;/a&gt;
     &lt;ul&gt;
       &lt;li&gt;&lt;a href=&quot;#the-callback-is-optional&quot;&gt;The Callback is Optional&lt;/a&gt;&lt;/li&gt;
       &lt;li&gt;&lt;a href=&quot;#returning-promises-inside-the-chain&quot;&gt;Returning Promises Inside the Chain&lt;/a&gt;&lt;/li&gt;
    &lt;/li&gt;
    &lt;/ul&gt;
    &lt;/li&gt;
   &lt;li&gt;&lt;a href=&quot;#rejecting-promises&quot;&gt;Rejecting Promises&lt;/a&gt;
   &lt;ul&gt;
     &lt;li&gt;&lt;a href=&quot;#unexpected-errors-should-also-lead-to-rejection&quot;&gt;Unexpected Errors Should Also Lead to Rejection&lt;/a&gt;&lt;/li&gt;
     &lt;li&gt;&lt;a href=&quot;#promises-can-swallow-errors-&quot;&gt;Promises Can Swallow Errors!&lt;/a&gt;&lt;/li&gt;
     &lt;li&gt;&lt;a href=&quot;#done-to-the-rescue&quot;&gt;done() to the Rescue&lt;/a&gt;&lt;/li&gt;
     &lt;li&gt;&lt;a href=&quot;#recovering-from-rejection&quot;&gt;Recovering from Rejection&lt;/a&gt;&lt;/li&gt;
   &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;&lt;a href=&quot;#promise-resolution-needs-to-be-async&quot;&gt;Promise Resolution Needs to be Async&lt;/a&gt;
   &lt;ul&gt;
     &lt;li&gt;&lt;a href=&quot;#why-is-this-async-requirement-in-the-spec-&quot;&gt;Why is this Async Requirement in the Spec?&lt;/a&gt;
     &lt;/li&gt;
   &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;&lt;a href=&quot;#before-we-wrap-up-then-promise&quot;&gt;Before We Wrap Up … then/promise&lt;/a&gt;&lt;/li&gt;
   &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
   &lt;li&gt;&lt;a href=&quot;#further-reading&quot;&gt;Further Reading&lt;/a&gt;&lt;/li&gt;
   &lt;li&gt;&lt;a href=&quot;#translations&quot;&gt;Translations&lt;/a&gt;&lt;/li&gt;

&lt;/ol&gt;

&lt;h2 id=&quot;why-&quot;&gt;Why?&lt;/h2&gt;
&lt;p&gt;Why bother to understand promises to this level of detail? Really understanding how something works can increase your ability to take advantage of it, and debug it more successfully when things go wrong. I was inspired to write this article when a coworker and I got stumped on a tricky promise scenario. Had I known then what I know now, we wouldn’t have gotten stumped.&lt;/p&gt;
&lt;h2 id=&quot;the-simplest-use-case&quot;&gt;The Simplest Use Case&lt;/h2&gt;
&lt;p&gt;Let’s begin our promise implementation as simple as can be. We want to go from this&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;doSomething(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;value&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;'Got a value:'&lt;/span&gt; + value);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to this&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;doSomething().then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;value&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;'Got a value:'&lt;/span&gt; + value);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To do this, we just need to change &lt;code&gt;doSomething()&lt;/code&gt; from this&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;doSomething&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;callback&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; value = &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;;
  callback(value);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to this “promise” based solution&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;doSomething&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; {
    &lt;span class=&quot;attr&quot;&gt;then&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;callback&lt;/span&gt;) &lt;/span&gt;{
      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; value = &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;;
      callback(value);
    }
  };
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a class=&quot;fiddle&quot; target=&quot;_blank&quot; href=&quot;http://jsfiddle.net/city41/zdgrC/1/&quot;&gt;fiddle&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is just a little sugar for the callback pattern. It’s pretty pointless sugar so far. But it’s a start and yet we’ve already hit upon a core idea behind promises&lt;/p&gt;
&lt;div class=&quot;callout wisdom&quot;&gt;
Promises capture the notion of an eventual value into an object
&lt;/div&gt;

&lt;p&gt;This is the main reason promises are so interesting. Once the concept of eventuality is captured like this, we can begin to do some very powerful things. We’ll explore this more later on.&lt;/p&gt;
&lt;h3 id=&quot;defining-the-promise-type&quot;&gt;Defining the Promise type&lt;/h3&gt;
&lt;p&gt;This simple object literal isn’t going to hold up. Let’s define an actual &lt;code&gt;Promise&lt;/code&gt; type that we’ll be able to expand upon&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;fn&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; callback = &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;;
  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.then = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;cb&lt;/span&gt;) &lt;/span&gt;{
    callback = cb;
  };

  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;value&lt;/span&gt;) &lt;/span&gt;{
    callback(value);
  }

  fn(resolve);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and reimplement &lt;code&gt;doSomething()&lt;/code&gt; to use it&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;doSomething&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;resolve&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; value = &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;;
    resolve(value);
  });
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There is a problem here. If you trace through the execution, you’ll see that &lt;code&gt;resolve()&lt;/code&gt; gets called before &lt;code&gt;then()&lt;/code&gt;, which means &lt;code&gt;callback&lt;/code&gt; will be &lt;code&gt;null&lt;/code&gt;. Let’s hide this problem in a little hack involving &lt;code&gt;setTimeout&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;fn&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; callback = &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;;
  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.then = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;cb&lt;/span&gt;) &lt;/span&gt;{
    callback = cb;
  };

  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;value&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;comment&quot;&gt;// force callback to be called in the next&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;// iteration of the event loop, giving&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;// callback a chance to be set by then()&lt;/span&gt;
    setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
      callback(value);
    }, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);
  }

  fn(resolve);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a class=&quot;fiddle&quot; target=&quot;_blank&quot; href=&quot;http://jsfiddle.net/city41/uQrza/1/&quot;&gt;fiddle&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;With the hack in place, this code now works … sort of.&lt;/p&gt;
&lt;h3 id=&quot;this-code-is-brittle-and-bad&quot;&gt;This Code is Brittle and Bad&lt;/h3&gt;
&lt;p&gt;Our naive, poor promise implementation must use asynchronicity to work. It’s easy to make it fail again, just call &lt;code&gt;then()&lt;/code&gt; asynchronously and we are right back to the callback being &lt;code&gt;null&lt;/code&gt; again. Why am I setting you up for failure so soon? Because the above implementation has the advantage of being pretty easy to wrap your head around. &lt;code&gt;then()&lt;/code&gt; and &lt;code&gt;resolve()&lt;/code&gt; won’t go away. They are key concepts in promises.&lt;/p&gt;
&lt;h2 id=&quot;promises-have-state&quot;&gt;Promises have State&lt;/h2&gt;
&lt;p&gt;Our brittle code above revealed something unexpectedly. Promises have state. We need to know what state they are in before proceeding, and make sure we move through the states correctly. Doing so gets rid of the brittleness.&lt;/p&gt;
&lt;div class=&quot; callout wisdom&quot;&gt;
&lt;ul&gt;
&lt;li&gt;A promise can be &lt;strong&gt;pending&lt;/strong&gt; waiting for a value, or &lt;strong&gt;resolved&lt;/strong&gt; with a value.
&lt;li&gt;Once a promise resolves to a value, it will always remain at that value and never resolve again.
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;(A promise can also be rejected, but we’ll get to error handling later)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Let’s explicitly track the state inside of our implementation, which will allow us to do away with our hack&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;fn&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; state = &lt;span class=&quot;string&quot;&gt;'pending'&lt;/span&gt;;
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; value;
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; deferred;

  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;newValue&lt;/span&gt;) &lt;/span&gt;{
    value = newValue;
    state = &lt;span class=&quot;string&quot;&gt;'resolved'&lt;/span&gt;;

    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(deferred) {
      handle(deferred);
    }
  }

  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handle&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;onResolved&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(state === &lt;span class=&quot;string&quot;&gt;'pending'&lt;/span&gt;) {
      deferred = onResolved;
      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;
    }

    onResolved(value);
  }

  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.then = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;onResolved&lt;/span&gt;) &lt;/span&gt;{
    handle(onResolved);
  };

  fn(resolve);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a class=&quot;fiddle&quot; target=&quot;_blank&quot; href=&quot;http://jsfiddle.net/city41/QX85J/1/&quot;&gt;fiddle&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It’s getting more complicated, but the caller can invoke &lt;code&gt;then()&lt;/code&gt; whenever they want, and the callee can invoke &lt;code&gt;resolve()&lt;/code&gt; whenever they want. It fully works with synchronous or asynchronous code.&lt;/p&gt;
&lt;p&gt;This is because of the &lt;code&gt;state&lt;/code&gt; flag. Both &lt;code&gt;then()&lt;/code&gt; and &lt;code&gt;resolve()&lt;/code&gt; hand off to the new method &lt;code&gt;handle()&lt;/code&gt;, which will do one of two things depending on the situation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The caller has called &lt;code&gt;then()&lt;/code&gt; before the callee calls &lt;code&gt;resolve()&lt;/code&gt;, that means there is no value ready to hand back. In this case the state will be pending, and so we hold onto the caller’s callback to use later. Later when &lt;code&gt;resolve()&lt;/code&gt; gets called, we can then invoke the callback and send the value on its way.&lt;/li&gt;
&lt;li&gt;The callee calls &lt;code&gt;resolve()&lt;/code&gt; before the caller calls &lt;code&gt;then()&lt;/code&gt;: In this case we hold onto the resulting value. Once &lt;code&gt;then()&lt;/code&gt; gets called, we are ready to hand back the value.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Notice &lt;code&gt;setTimeout&lt;/code&gt; went away? That’s temporary, it will be coming back. But one thing at a time.&lt;/p&gt;
&lt;div class=&quot;callout wisdom&quot;&gt;
With promises, the order in which we work with them doesn’t matter. We are free to call &lt;code&gt;then()&lt;/code&gt; and &lt;code&gt;resolve()&lt;/code&gt; whenever they suit our purposes. This is one of the powerful advantages of capturing the notion of eventual results into an object
&lt;/div&gt;

&lt;p&gt;We still have quite a few more things in the spec to implement, but our promises are already pretty powerful. This system allows us to call &lt;code&gt;then()&lt;/code&gt; as many times as we want, we will always get the same value back&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; promise = doSomething();

promise.then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;value&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;'Got a value:'&lt;/span&gt;, value);
});

promise.then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;value&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;'Got the same value again:'&lt;/span&gt;, value);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;callout pitfall&quot;&gt;
This is not completely true for the promise implementation in this article. If the opposite happens, ie the caller calls &lt;code&gt;then()&lt;/code&gt; multiple times before &lt;code&gt;resolve()&lt;/code&gt; is called, only the last call to &lt;code&gt;then()&lt;/code&gt; will be honored. The fix for this is to keep a running list of deferreds inside of the promise instead of just one. I decided to not do that in the interest of keeping the article more simple, it’s long enough as it is :)
&lt;/div&gt;

&lt;h2 id=&quot;chaining-promises&quot;&gt;Chaining Promises&lt;/h2&gt;
&lt;p&gt;Since promises capture the notion of asynchronicity in an object, we can chain them, map them, have them run in parallel or sequential, all kinds of useful things. Code like the following is very common with promises&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;getSomeData()
.then(filterTheData)
.then(processTheData)
.then(displayTheData);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;getSomeData&lt;/code&gt; is returning a promise, as evidenced by the call to &lt;code&gt;then()&lt;/code&gt;, but the result of that first then must also be a promise, as we call &lt;code&gt;then()&lt;/code&gt; again (and yet again!) That’s exactly what happens, if we can convince &lt;code&gt;then()&lt;/code&gt; to return a promise, things get more interesting.&lt;/p&gt;
&lt;div class=&quot;callout wisdom&quot;&gt;
&lt;code&gt;then()&lt;/code&gt; always returns a promise
&lt;/div&gt;

&lt;p&gt;Here is our promise type with chaining added in&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;fn&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; state = &lt;span class=&quot;string&quot;&gt;'pending'&lt;/span&gt;;
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; value;
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; deferred = &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;;

  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;newValue&lt;/span&gt;) &lt;/span&gt;{
    value = newValue;
    state = &lt;span class=&quot;string&quot;&gt;'resolved'&lt;/span&gt;;

    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(deferred) {
      handle(deferred);
    }
  }

  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handle&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;handler&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(state === &lt;span class=&quot;string&quot;&gt;'pending'&lt;/span&gt;) {
      deferred = handler;
      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;
    }

    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!handler.onResolved) {
      handler.resolve(value);
      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;
    }

    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ret = handler.onResolved(value);
    handler.resolve(ret);
  }

  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.then = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;onResolved&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;resolve&lt;/span&gt;) &lt;/span&gt;{
      handle({
        &lt;span class=&quot;attr&quot;&gt;onResolved&lt;/span&gt;: onResolved,
        &lt;span class=&quot;attr&quot;&gt;resolve&lt;/span&gt;: resolve
      });
    });
  };

  fn(resolve);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a class=&quot;fiddle&quot; target=&quot;_blank&quot; href=&quot;http://jsfiddle.net/city41/HdzLv/2/&quot;&gt;fiddle&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hoo, it’s getting a little squirrelly. Aren’t you glad we’re building this up slowly? The real key here is that &lt;code&gt;then()&lt;/code&gt; is returning a new promise.&lt;/p&gt;
&lt;div class=&quot;callout pitfall&quot;&gt;
Since &lt;code&gt;then()&lt;/code&gt; always returns a new promise object, there will always be at least one promise object that gets created, resolved and then ignored. Which can be seen as wasteful. The callback approach does not have this problem. Another ding against promises. You can start to appreciate why some in the JavaScript community have shunned them.
&lt;/div&gt;

&lt;p&gt;What value does the second promise resolve to? &lt;em&gt;It receives the return value of the first promise.&lt;/em&gt; This is happening at the bottom of &lt;code&gt;handle()&lt;/code&gt;, The &lt;code&gt;handler&lt;/code&gt; object carries around both an &lt;code&gt;onResolved&lt;/code&gt; callback as well as a reference to &lt;code&gt;resolve()&lt;/code&gt;. There is more than one copy of &lt;code&gt;resolve()&lt;/code&gt; floating around, each promise gets their own copy of this function, and a closure for it to run within. This is the bridge from the first promise to the second. We are concluding the first promise at this line:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ret = handler.onResolved(value);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the examples I’ve been using here, &lt;code&gt;handler.onResolved&lt;/code&gt; is&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;value&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;Got a value:&quot;&lt;/span&gt;, value);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;in other words, it’s what was passed into the first call to &lt;code&gt;then()&lt;/code&gt;. The return value of that first handler is used to resolve the second promise. Thus chaining is accomplished&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;doSomething().then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;result&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;'first result'&lt;/span&gt;, result);
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;88&lt;/span&gt;;
}).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;secondResult&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;'second result'&lt;/span&gt;, secondResult);
});

&lt;span class=&quot;comment&quot;&gt;// the output is&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;// first result 42&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;// second result 88&lt;/span&gt;


doSomething().then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;result&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;'first result'&lt;/span&gt;, result);
  &lt;span class=&quot;comment&quot;&gt;// not explicitly returning anything&lt;/span&gt;
}).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;secondResult&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;'second result'&lt;/span&gt;, secondResult);
});

&lt;span class=&quot;comment&quot;&gt;// now the output is&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;// first result 42&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;// second result undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since &lt;code&gt;then()&lt;/code&gt; always returns a new promise, this chaining can go as deep as we like&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;doSomething().then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;result&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;'first result'&lt;/span&gt;, result);
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;88&lt;/span&gt;;
}).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;secondResult&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;'second result'&lt;/span&gt;, secondResult);
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;99&lt;/span&gt;;
}).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;thirdResult&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;'third result'&lt;/span&gt;, thirdResult);
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;;
}).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;fourthResult&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;comment&quot;&gt;// on and on...&lt;/span&gt;
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What if in the above example, we wanted all the results in the end? With chaining, we would need to manually build up the result ourself&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;doSomething().then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;result&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; results = [result];
  results.push(&lt;span class=&quot;number&quot;&gt;88&lt;/span&gt;);
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; results;
}).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;results&lt;/span&gt;) &lt;/span&gt;{
  results.push(&lt;span class=&quot;number&quot;&gt;99&lt;/span&gt;);
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; results;
}).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;results&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(results.join(&lt;span class=&quot;string&quot;&gt;', '&lt;/span&gt;);
});

&lt;span class=&quot;comment&quot;&gt;// the output is&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;// 42, 88, 99&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;callout wisdom&quot;&gt;
  Promises always resolve to one value. If you need to pass more than one value along, you need to create a multi-value in some fashion (an array, an object, concatting strings, etc)
&lt;/div&gt;

&lt;p&gt;A potentially better way is to use a promise library’s &lt;code&gt;all()&lt;/code&gt; method or any number of other utility methods that increase the usefulness of promises, which I’ll leave to you to go and discover.&lt;/p&gt;
&lt;h3 id=&quot;the-callback-is-optional&quot;&gt;The Callback is Optional&lt;/h3&gt;
&lt;p&gt;The callback to &lt;code&gt;then()&lt;/code&gt; is not strictly required. If you leave it off, the promise resolves to the same value as the previous promise&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;doSomething().then().then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;result&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;'got a result'&lt;/span&gt;, result);
});

&lt;span class=&quot;comment&quot;&gt;// the output is&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;// got a result 42&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see this inside of &lt;code&gt;handle()&lt;/code&gt;, where if there is no callback, it simply resolves the promise and exits. &lt;code&gt;value&lt;/code&gt; is still the value of the previous promise.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!handler.onResolved) {
  handler.resolve(value);
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;returning-promises-inside-the-chain&quot;&gt;Returning Promises Inside the Chain&lt;/h3&gt;
&lt;p&gt;Our chaining implementation is a bit naive. It’s blindly passing the resolved values down the line. What if one of the resolved values is a promise? For example&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;doSomething().then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;result&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;comment&quot;&gt;// doSomethingElse returns a promise&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; doSomethingElse(result);
}).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;finalResult&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;the final result is&quot;&lt;/span&gt;, finalResult);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As it stands now, the above won’t do what we want. &lt;code&gt;finalResult&lt;/code&gt; won’t actually be a fully resolved value, it will instead be a promise. To get the intended result, we’d need to do&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;doSomething().then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;result&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;comment&quot;&gt;// doSomethingElse returns a promise&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; doSomethingElse(result);
}).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;anotherPromise&lt;/span&gt;) &lt;/span&gt;{
  anotherPromise.then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;finalResult&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;the final result is&quot;&lt;/span&gt;, finalResult);
  });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Who wants that crud in their code? Let’s have the promise implementation seamlessly handle this for us. This is simple to do, inside of &lt;code&gt;resolve()&lt;/code&gt; just add a special case if the resolved value is a promise&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;newValue&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(newValue &amp;amp;&amp;amp; &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; newValue.then === &lt;span class=&quot;string&quot;&gt;'function'&lt;/span&gt;) {
    newValue.then(resolve);
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;
  }
  state = &lt;span class=&quot;string&quot;&gt;'resolved'&lt;/span&gt;;
  value = newValue;

  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(deferred) {
    handle(deferred);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a class=&quot;fiddle&quot; target=&quot;_blank&quot; href=&quot;http://jsfiddle.net/city41/38CCb/2/&quot;&gt;fiddle&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We’ll keep calling &lt;code&gt;resolve()&lt;/code&gt; recursively as long as we get a promise back. Once it’s no longer a promise, then proceed as before.&lt;/p&gt;
&lt;div class=&quot;callout pitfall&quot;&gt;
It &lt;em&gt;is&lt;/em&gt; possible for this to be an infinite loop. The Promises/A+ spec recommends implementations detect infinite loops, but it’s not required.
&lt;/div&gt;

&lt;div class=&quot;callout pitfall&quot;&gt;
Also worth pointing out, this implementation does not meet the spec. Nor will we fully meet the spec in this regard in the article. For the more curious, I recommend reading the &lt;a href=&quot;http://promises-aplus.github.io/promises-spec/#the_promise_resolution_procedure&quot;&gt;promise resolution procedure&lt;/a&gt;.
&lt;/div&gt;

&lt;p&gt;Notice how loose the check is to see if &lt;code&gt;newValue&lt;/code&gt; is a promise? We are only looking for a &lt;code&gt;then()&lt;/code&gt; method. This duck typing is intentional, it allows different promise implementations to interopt with each other. It’s actually quite common for promise libraries to intermingle, as different third party libraries you use can each use different promise implementations.&lt;/p&gt;
&lt;div class=&quot;callout wisdom&quot;&gt;
Different promise implementations can interopt with each other, as long as they all are following the spec properly.
&lt;/div&gt;

&lt;p&gt;With chaining in place, our implementation is pretty complete. But we’ve completely ignored error handling.&lt;/p&gt;
&lt;h2 id=&quot;rejecting-promises&quot;&gt;Rejecting Promises&lt;/h2&gt;
&lt;p&gt;When something goes wrong during the course of a promise, it needs to be &lt;strong&gt;rejected&lt;/strong&gt; with a &lt;em&gt;reason&lt;/em&gt;. How does the caller know when this happens? They can find out by passing in a second callback to &lt;code&gt;then()&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;doSomething().then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;value&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;'Success!'&lt;/span&gt;, value);
}, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;error&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;'Uh oh'&lt;/span&gt;, error);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;callout wisdom&quot;&gt;
As mentioned earlier, the promise will transition from &lt;strong&gt;pending&lt;/strong&gt; to either &lt;strong&gt;resolved&lt;/strong&gt; or &lt;strong&gt;rejected&lt;/strong&gt;, never both. In other words, only one of the above callbacks ever gets called.
&lt;/div&gt;

&lt;p&gt;Promises enable rejection by means of &lt;code&gt;reject()&lt;/code&gt;, the evil twin of &lt;code&gt;resolve()&lt;/code&gt;. Here is &lt;code&gt;doSomething()&lt;/code&gt; with error handling support added&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;doSomething&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;resolve, reject&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; result = somehowGetTheValue();
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(result.error) {
      reject(result.error);
    } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {
      resolve(result.value);
    }
  });
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Inside the promise implementation, we need to account for rejection.&lt;/p&gt;
&lt;p&gt;Let’s see the full promise implementation again, this time with rejection support added&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;fn&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; state = &lt;span class=&quot;string&quot;&gt;'pending'&lt;/span&gt;;
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; value;
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; deferred = &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;;

  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;newValue&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(newValue &amp;amp;&amp;amp; &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; newValue.then === &lt;span class=&quot;string&quot;&gt;'function'&lt;/span&gt;) {
      newValue.then(resolve, reject);
      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;
    }
    state = &lt;span class=&quot;string&quot;&gt;'resolved'&lt;/span&gt;;
    value = newValue;

    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(deferred) {
      handle(deferred);
    }
  }

  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;reject&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;reason&lt;/span&gt;) &lt;/span&gt;{
    state = &lt;span class=&quot;string&quot;&gt;'rejected'&lt;/span&gt;;
    value = reason;

    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(deferred) {
      handle(deferred);
    }
  }

  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handle&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;handler&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(state === &lt;span class=&quot;string&quot;&gt;'pending'&lt;/span&gt;) {
      deferred = handler;
      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;
    }

    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; handlerCallback;

    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(state === &lt;span class=&quot;string&quot;&gt;'resolved'&lt;/span&gt;) {
      handlerCallback = handler.onResolved;
    } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {
      handlerCallback = handler.onRejected;
    }

    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!handlerCallback) {
      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(state === &lt;span class=&quot;string&quot;&gt;'resolved'&lt;/span&gt;) {
        handler.resolve(value);
      } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {
        handler.reject(value);
      }

      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;
    }

    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ret = handlerCallback(value);
    handler.resolve(ret);
  }

  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.then = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;onResolved, onRejected&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;resolve, reject&lt;/span&gt;) &lt;/span&gt;{
      handle({
        &lt;span class=&quot;attr&quot;&gt;onResolved&lt;/span&gt;: onResolved,
        &lt;span class=&quot;attr&quot;&gt;onRejected&lt;/span&gt;: onRejected,
        &lt;span class=&quot;attr&quot;&gt;resolve&lt;/span&gt;: resolve,
        &lt;span class=&quot;attr&quot;&gt;reject&lt;/span&gt;: reject
      });
    });
  };

  fn(resolve, reject);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a class=&quot;fiddle&quot; target=&quot;_blank&quot; href=&quot;http://jsfiddle.net/city41/rLXsL/2/&quot;&gt;fiddle&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Other than the addition of &lt;code&gt;reject()&lt;/code&gt; itself, &lt;code&gt;handle()&lt;/code&gt; also has to be aware of rejection. Within &lt;code&gt;handle()&lt;/code&gt;, either the rejection path or resolve path will be taken depending on the value of &lt;code&gt;state&lt;/code&gt;. This value of &lt;code&gt;state&lt;/code&gt; gets pushed into the next promise, because calling the next promises’ &lt;code&gt;resolve()&lt;/code&gt; or &lt;code&gt;reject()&lt;/code&gt; sets its &lt;code&gt;state&lt;/code&gt; value accordingly.&lt;/p&gt;
&lt;div class=&quot;callout pitfall&quot;&gt;
When using promises, it’s very easy to omit the error callback. But if you do, you’ll never get &lt;em&gt;any&lt;/em&gt; indication something went wrong. At the very least, the final promise in your chain should have an error callback. See the section further down about swallowed errors for more info.
&lt;/div&gt;

&lt;h3 id=&quot;unexpected-errors-should-also-lead-to-rejection&quot;&gt;Unexpected Errors Should Also Lead to Rejection&lt;/h3&gt;
&lt;p&gt;So far our error handling only accounts for known errors. It’s possible an unhandled exception will happen, completely ruining everything. It’s essential that the promise implementation catch these exceptions and reject accordingly.&lt;/p&gt;
&lt;p&gt;This means that &lt;code&gt;resolve()&lt;/code&gt; should get wrapped in a try/catch block&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;newValue&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; {
    &lt;span class=&quot;comment&quot;&gt;// ... as before&lt;/span&gt;
  } &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt;(e) {
    reject(e);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It’s also important to make sure the callbacks given to us by the caller don’t throw unhandled exceptions. These callbacks are called in &lt;code&gt;handle()&lt;/code&gt;, so we end up with&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handle&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;deferred&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;comment&quot;&gt;// ... as before&lt;/span&gt;

  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ret;
  &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; {
    ret = handlerCallback(value);
  } &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt;(e) {
    handler.reject(e);
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;
  }

  handler.resolve(ret);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;promises-can-swallow-errors-&quot;&gt;Promises can Swallow Errors!&lt;/h3&gt;
&lt;div class=&quot;callout pitfall&quot;&gt;
It’s possible for a misunderstanding of promises to lead to completely swallowed errors! This trips people up a lot
&lt;/div&gt;

&lt;p&gt;Consider this example&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getSomeJson&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;resolve, reject&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; badJson = &lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;div&amp;gt;uh oh, this is not JSON at all!&amp;lt;/div&amp;gt;&quot;&lt;/span&gt;;
    resolve(badJson);
  });
}

getSomeJson().then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;json&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.parse(json);
  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(obj);
}, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;error&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;'uh oh'&lt;/span&gt;, error);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a class=&quot;fiddle&quot; target=&quot;_blank&quot; href=&quot;http://jsfiddle.net/city41/M7SRM/3/&quot;&gt;fiddle&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What is going to happen here? Our callback inside &lt;code&gt;then()&lt;/code&gt; is expecting some valid JSON. So it naively tries to parse it, which leads to an exception. But we have an error callback, so we’re good, right?&lt;/p&gt;
&lt;div class=&quot;callout pitfall&quot;&gt;
&lt;strong&gt;Nope.&lt;/strong&gt; &lt;em&gt;That error callback will not be invoked!&lt;/em&gt; If you run this example via the above fiddle, you will get no output at all. No errors, no nothing. Pure &lt;em&gt;chilling&lt;/em&gt; silence.
&lt;/div&gt;

&lt;p&gt;Why is this? Since the unhandled exception took place in our callback to &lt;code&gt;then()&lt;/code&gt;, it is being caught inside of &lt;code&gt;handle()&lt;/code&gt;. This causes &lt;code&gt;handle()&lt;/code&gt; to reject the promise that &lt;code&gt;then()&lt;/code&gt; returned, not the promise we are already responding to, as that promise has already properly resolved.&lt;/p&gt;
&lt;div class=&quot;callout wisdom&quot;&gt;
Always remember, inside of &lt;code&gt;then()&lt;/code&gt;‘s callback, the promise you are responding to has already resolved. The result of your callback will have no influence on this promise
&lt;/div&gt;

&lt;p&gt;If you want to capture the above error, you need an error callback further downstream&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;getSomeJson().then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;json&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.parse(json);
  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(obj);
}).then(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;error&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;an error occured: &quot;&lt;/span&gt;, error);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we will properly log the error.&lt;/p&gt;
&lt;div class=&quot;callout pitfall&quot;&gt;
In my experience, this is the biggest pitfall of promises. Read onto the next section for a potentially better solution
&lt;/div&gt;

&lt;h3 id=&quot;done-to-the-rescue&quot;&gt;done() to the Rescue&lt;/h3&gt;
&lt;p&gt;Most (but not all) promise libraries have a &lt;code&gt;done()&lt;/code&gt; method. It’s very similar to &lt;code&gt;then()&lt;/code&gt;, except it avoids the above pitfalls of &lt;code&gt;then()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;done()&lt;/code&gt; can be called whenever &lt;code&gt;then()&lt;/code&gt; can. The key differences are it does not return a promise, and any unhandled exception inside of &lt;code&gt;done()&lt;/code&gt; is not captured by the promise implementation. In other words, &lt;code&gt;done()&lt;/code&gt; represents when the entire promise chain has fully resolved. Our &lt;code&gt;getSomeJson()&lt;/code&gt; example can be more robust using &lt;code&gt;done()&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;getSomeJson().done(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;json&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;comment&quot;&gt;// when this throws, it won't be swallowed&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.parse(json);
  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(obj);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;done()&lt;/code&gt; also takes an error callback, &lt;code&gt;done(callback, errback)&lt;/code&gt;, just like &lt;code&gt;then()&lt;/code&gt; does, and since the entire promise resolution is, well, done, you are assured of being informed of any errors that erupted.&lt;/p&gt;
&lt;div class=&quot;callout pitfall&quot;&gt;
&lt;code&gt;done()&lt;/code&gt; is not part of the Promises/A+ spec (at least not yet), so your promise library of choice might not have it.
&lt;/div&gt;

&lt;h3 id=&quot;recovering-from-rejection&quot;&gt;Recovering from Rejection&lt;/h3&gt;
&lt;p&gt;It is possible to recover from a rejected promise. If you pass in an errback to &lt;code&gt;then()&lt;/code&gt;, from then on any further promises in this chain will be resolved instead of rejected:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;aMethodThatRejects().then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;result&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;comment&quot;&gt;// won't get here&lt;/span&gt;
}, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;comment&quot;&gt;// since aMethodThatRejects calls reject()&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;// we end up here in the errback&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;recovered!&quot;&lt;/span&gt;;
}).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;result&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;after recovery: &quot;&lt;/span&gt;, result);
}, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;comment&quot;&gt;// we won't actually get here&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;// since the rejected promise had an errback&lt;/span&gt;
});

&lt;span class=&quot;comment&quot;&gt;// the output is&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;// after recovery: recovered!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don’t pass in an errback, then the rejection propagates to the next promise in the chain:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// notice the two calls to then()&lt;/span&gt;
aMethodThatRejects().then().then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;result&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;comment&quot;&gt;// we won't get here&lt;/span&gt;
}, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;error propagated&quot;&lt;/span&gt;);
});

&lt;span class=&quot;comment&quot;&gt;// the output is&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;// error propagated&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;promise-resolution-needs-to-be-async&quot;&gt;Promise Resolution Needs to be Async&lt;/h2&gt;
&lt;p&gt;Early in the article we cheated a bit by using &lt;code&gt;setTimeout&lt;/code&gt;. Once we fixed that hack, we’ve not used setTimeout since. But the truth is the Promises/A+ spec requires that promise resolution happen asynchronously. Meeting this requirement is simple, we simply need to wrap most of &lt;code&gt;handle()&lt;/code&gt;‘s implementation inside of a &lt;code&gt;setTimeout&lt;/code&gt; call&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handle&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;handler&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(state === &lt;span class=&quot;string&quot;&gt;'pending'&lt;/span&gt;) {
    deferred = handler;
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;
  }
  setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;comment&quot;&gt;// ... as before&lt;/span&gt;
  }, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is all that is needed. In truth, real promise libraries don’t tend to use &lt;code&gt;setTimeout&lt;/code&gt;. If the library is NodeJS oriented it will possibly use &lt;code&gt;process.nextTick&lt;/code&gt;, for browsers it might use the new &lt;code&gt;setImmediate&lt;/code&gt; or a &lt;a href=&quot;https://github.com/NobleJS/setImmediate&quot;&gt;setImmediate shim&lt;/a&gt; (so far only IE supports setImmediate), or perhaps an asynchronous library such as Kris Kowal’s &lt;a href=&quot;https://github.com/kriskowal/asap&quot;&gt;asap&lt;/a&gt; (Kris Kowal also wrote &lt;a href=&quot;https://github.com/kriskowal/q&quot;&gt;Q&lt;/a&gt;, a popular promise library)&lt;/p&gt;
&lt;h3 id=&quot;why-is-this-async-requirement-in-the-spec-&quot;&gt;Why Is This Async Requirement in the Spec?&lt;/h3&gt;
&lt;p&gt;It allows for consistency and reliable execution flow. Consider this contrived example&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; promise = doAnOperation();
invokeSomething();
promise.then(wrapItAllUp);
invokeSomethingElse();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What is the call flow here? Based on the naming you’d probably guess it is &lt;code&gt;invokeSomething()&lt;/code&gt; -&amp;gt; &lt;code&gt;invokeSomethingElse()&lt;/code&gt; -&amp;gt; &lt;code&gt;wrapItAllUp()&lt;/code&gt;. But this all depends on if the promise resolves synchronously or asynchronously in our current implementation. If &lt;code&gt;doAnOperation()&lt;/code&gt; works asynchronously, then that is the call flow. But if it works synchronously, then the call flow is actually &lt;code&gt;invokeSomething()&lt;/code&gt; -&amp;gt; &lt;code&gt;wrapItAllUp()&lt;/code&gt; -&amp;gt; &lt;code&gt;invokeSomethingElse()&lt;/code&gt;, which is probably bad.&lt;/p&gt;
&lt;p&gt;To get around this, promises &lt;strong&gt;always&lt;/strong&gt; resolve asynchronously, even if they don’t have to. It reduces surprise and allows people to use promises without having to take into consideration asynchronicity when reasoning about their code.&lt;/p&gt;
&lt;div class=&quot;callout pitfall&quot;&gt;
Promises always require at least one more iteration of the event loop to resolve. This is not necessarily true of the standard callback approach.
&lt;/div&gt;

&lt;h2 id=&quot;before-we-wrap-up-then-promise&quot;&gt;Before We Wrap Up … then/promise&lt;/h2&gt;
&lt;p&gt;There are many, full featured, promise libraries out there. The &lt;a href=&quot;https://github.com/then&quot;&gt;then&lt;/a&gt; organization’s &lt;a href=&quot;https://github.com/then/promise&quot;&gt;promise&lt;/a&gt; library takes a simpler approach. It is meant to be a simple implementation that meets the spec and nothing more. If you take a look at &lt;a href=&quot;https://github.com/then/promise/blob/master/src/core.js&quot;&gt;their implementation&lt;/a&gt;, you should see it looks quite familiar.&lt;/p&gt;
&lt;div class=&quot;callout pitfall&quot;&gt;
At the time this article was written, the final result looked very much like the then/promise implementation. That’s no longer true, they’ve completely rewritten their promise implementation
&lt;/div&gt;

&lt;p&gt;There are some differences in the real implementation and what is here in this article. That is because there are more details in the Promises/A+ spec that I have not addressed. I recommend &lt;a href=&quot;http://promises-aplus.github.io/promises-spec/&quot;&gt;reading the spec&lt;/a&gt;, it is short and pretty straightforward.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;If you made it this far, then thanks for reading! We’ve covered the core of promises, which is the only thing the spec addresses. Most implementations offer much more functionality, such as &lt;code&gt;all()&lt;/code&gt;, &lt;code&gt;spread()&lt;/code&gt;, &lt;code&gt;race()&lt;/code&gt;, &lt;code&gt;denodeify()&lt;/code&gt; and much more. I recommend browsing the &lt;a href=&quot;https://github.com/petkaantonov/bluebird/blob/master/API.md&quot;&gt;API docs for Bluebird&lt;/a&gt; to see what all is possible with promises.&lt;/p&gt;
&lt;p&gt;Once I came to understand how promises worked and their caveats, I came to really like them. They have led to very clean and elegant code in my projects. There’s so much more to talk about too, this article is just the beginning!&lt;/p&gt;
&lt;p&gt;If you enjoyed this, you should &lt;a href=&quot;http://twitter.com/mattegreer&quot;&gt;follow me on Twitter&lt;/a&gt; to find out when I write another guide like this.&lt;/p&gt;
&lt;h2 id=&quot;further-reading&quot;&gt;Further Reading&lt;/h2&gt;
&lt;p&gt;More great articles on promises&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://promisejs.org&quot;&gt;promisejs.org&lt;/a&gt; – great tutorial on promises (already mentioned it a few times)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kriskowal/q/blob/v1/design/README.js&quot;&gt;Q’s Design Rationale&lt;/a&gt; – an article much like this one, but goes into even more detail. By Kris Kowal, creator of Q&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/domenic/promises-unwrapping/issues/19&quot;&gt;Some debate over whether done() is a good thing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://solutionoptimist.com/2013/12/27/javascript-promise-chains-2/&quot;&gt;Flattening Promise Chains&lt;/a&gt; by Thomas Burleson. A nice article that goes into more advanced usage of promises. If my article is the “what”, then Thomas’s is a nice look at the “why”.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Found a mistake?&lt;/strong&gt; if I made an error and you want to let me know, please &lt;a href=&quot;mailto:matt.e.greer@gmail.com&quot;&gt;email me&lt;/a&gt; or &lt;a href=&quot;https://github.com/city41/blog/issues&quot;&gt;file an issue&lt;/a&gt;. Thanks!&lt;/p&gt;
&lt;h2 id=&quot;translations&quot;&gt;Translations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://p-baleine.hatenablog.com/entry/2014/03/12/190000&quot;&gt;Japanese Translation&lt;/a&gt;, translated by Junpei Tajima&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://987.tw/2014/05/23/javascript-promises-in-wicked-detail/&quot;&gt;Traditional Chinese Translation&lt;/a&gt;, translated by Jih-Chi Lee&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>CoffeeScript's Time is Waning For Me</title>
      <link>http://mattgreer.org/articles/coffeescripts-time-is-waning/</link>
      <pubDate>Sat, 11 Jan 2014 16:00:00 -0800</pubDate>
      <guid isPermaLink="true">http://mattgreer.org/articles/coffeescripts-time-is-waning/</guid>
      <author></author>
      <description>&lt;p&gt;CoffeeScript was a welcome addition when it first arrived. Nowadays though, I am
finding its benefits are decreasing, and its drawbacks are increasing. I plan to
no longer use CoffeeScript in my future projects, here is why.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;I’ve tweeted about this here and there, and today someone asked me why. 
So I thought I’d blog it out.&lt;/p&gt;
&lt;h2 id=&quot;ecmascript-6-has-the-key-coffeescript-features-i-like&quot;&gt;EcmaScript 6 Has the Key CoffeeScript Features I Like&lt;/h2&gt;
&lt;p&gt;arrow functions, destructuring assignment and shorthand object literals are my
favorite features of CoffeeScript. They are all in EcmaScript 6. This is the
biggest reason why CoffeeScript is becoming less relevant to me. For sure, ES6
has a ways to go and not even Node has these features yet. But by the time my
current project is done, Node’s Harmony support will likely meet my needs.&lt;/p&gt;
&lt;h2 id=&quot;ecmascript-6-has-none-of-the-coffeescript-features-i-hate&quot;&gt;EcmaScript 6 Has None of the CoffeeScript Features I Hate&lt;/h2&gt;
&lt;h3 id=&quot;significant-whitespace&quot;&gt;significant whitespace&lt;/h3&gt;
&lt;p&gt;I &lt;em&gt;hate&lt;/em&gt; significant whitespace, and always have. I downright think it’s wrong.
I grudgingly accepted it when adopting CoffeeScript. I really look forward to no
longer dealing with it.&lt;/p&gt;
&lt;p&gt;As my project grows in size, significant whitespace becomes more and more of a
problem. It’s just plain not readable or visually parsable. Your files become a
wall of dense text. Damn you Python, damn you to hell!&lt;/p&gt;
&lt;h3 id=&quot;implicit-return&quot;&gt;implicit return&lt;/h3&gt;
&lt;p&gt;Using CoffeeScript has also made me dislike implicit return. Saving one keyword
is not worth this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-ruby&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt;((&lt;span class=&quot;title&quot;&gt;provide&lt;/span&gt;) -&amp;gt;&lt;/span&gt;
  provide.value(&lt;span class=&quot;string&quot;&gt;'foo'&lt;/span&gt;, bar)
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# &amp;lt;-- bleh&lt;/span&gt;
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;without &lt;code&gt;return&lt;/code&gt; (or &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;, all ugly), the return value is
&lt;code&gt;provide.value()&lt;/code&gt;s return value (a function), which is not what &lt;code&gt;module()&lt;/code&gt;
wants here (leading to an error). I often have to do this to avoid loops
becoming unneeded expressions too. The real problem here though is not the
ugliness, but the occassional surprises. I don’t even use implicit return, so a
double whammy for me.&lt;/p&gt;
&lt;h2 id=&quot;ecmascript-5-is-ubiquitous-for-me&quot;&gt;EcmaScript 5 is Ubiquitous for Me&lt;/h2&gt;
&lt;p&gt;I have to support IE8 at work, but not at home. ES5’s features (especially the
array functions) negate even more of CoffeeScript’s features for me.
CoffeeScript compiling all of its loop constructs into a standard for loop is a
nice little bonus though.&lt;/p&gt;
&lt;h2 id=&quot;open-source-code-is-better-written-in-javascript&quot;&gt;Open Source Code is Better Written in JavaScript&lt;/h2&gt;
&lt;p&gt;If you’re contributing to the JS community, you’re better off writing in
JavaScript. More people will contribute and/or adopt your code. &lt;/p&gt;
&lt;h2 id=&quot;tooling-support&quot;&gt;Tooling Support&lt;/h2&gt;
&lt;p&gt;Tooling support for CoffeeScript is pretty darn good. But it’s not
perfect. It &lt;em&gt;is&lt;/em&gt; perfect with JavaScript, it has to be. This is a minor point, but
eliminating even a little bit of friction is a good thing. Tools all tend
to support CoffeeScript just a little bit differently: where they dump the
compiled JS, how to specify wrap, etc. &lt;/p&gt;
&lt;p&gt;Not having to &lt;code&gt;grunt watch&lt;/code&gt; your JS is another minor win.&lt;/p&gt;
&lt;h2 id=&quot;coffeescript-isn-t-irrelevant-yet&quot;&gt;CoffeeScript Isn’t Irrelevant Yet&lt;/h2&gt;
&lt;p&gt;Even for me, and it won’t be for a while yet. But I do suspect I’m on my last CS
project. If you need to support old IEs, want to use PhantomJS, etc, then CS is
still very welcome. &lt;/p&gt;
</description>
    </item>
    <item>
      <title>Dynamic Lighting and Shadows in my 2d Game</title>
      <link>http://mattgreer.org/articles/dynamic-lighting-and-shadows/</link>
      <pubDate>Tue, 16 Oct 2012 17:00:00 -0700</pubDate>
      <guid isPermaLink="true">http://mattgreer.org/articles/dynamic-lighting-and-shadows/</guid>
      <author></author>
      <description>&lt;p&gt;I’m working on a stealth action game where shadows will play a big role in the gameplay. Using WebGL shaders, I implemented dynamic lighting and shadows. This post is the blog post I wish existed before I started :) Gritty details on how I implemented these below…&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;callout pitfall&quot;&gt;
  I never released this game. Partly due to not seeing it through and partly because I never succeeded in making it fun :-/
&lt;/div&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; style=&quot;margin-top: 3em; margin-bottom: 3em;&quot; src=&quot;http://www.youtube.com/embed/ZMyg5erp-vk&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;part-one-dynamic-lighting&quot;&gt;Part one: dynamic lighting&lt;/h2&gt;
&lt;p&gt;I was inspired by &lt;a href=&quot;http://www.reddit.com/r/gamedev/comments/115f3y/how_to_dynamic_lighting_on_sprites/&quot;&gt;this post&lt;/a&gt; on Reddit, where aionskull used normal maps in Unity to dynamically light up his sprites. gpillow also posted in the comments how he had done &lt;a href=&quot;https://love2d.org/forums/viewtopic.php?f=5&amp;amp;t=11076&quot;&gt;something similar&lt;/a&gt; in Love2D. &lt;a href=&quot;/articles/dynamic-lighting-and-shadows/pixel_shading.gif&quot;&gt;Here’s a large gif illustrating gpillow’s results&lt;/a&gt;. I’d just include the gif here, but it’s 8 megs. Thanks to jusksmit for making the gif.&lt;/p&gt;
&lt;p&gt;So, what is dynamic lighting? It’s a 3D graphics technique where a light source lights up objects in the scene. It’s dynamic as the lighting effects update in real time as the light source moves around. This is pretty standard stuff in the 3D world and easy to translate into a 2D environment, assuming you can take advantage of shaders.&lt;/p&gt;
&lt;p&gt;The key is the angle the light hits a surface indicates how much the surface lights up.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/dynamic-lighting-and-shadows/lighting.gif&quot; alt=&quot;lighting diagram&quot;&gt;&lt;/p&gt;
&lt;p&gt;and the key to &lt;em&gt;that&lt;/em&gt; is the normal vector. A vector which indicates which way a surface is facing. In the above diagram, the arrow sticking out of the center of the panel is the normal vector. You can see that when the light’s rays come in at a shallower angle, the panel is less influenced by the light and not lit up as much. So in the end, the algorithm is quite simple, as that angle increases, have the light source influence less. A simple way to calculate the influence is to calculate the dot product between the light vector and the normal vector.&lt;/p&gt;
&lt;h3 id=&quot;dynamic-lighting-in-a-2d-environment&quot;&gt;dynamic lighting in a 2d environment&lt;/h3&gt;
&lt;p&gt;That’s all well and good, but how do you have normal vectors in a 2d game? There aren’t any real 3D objects in the traditional sense, but textures can step in to provide the needed info. I created &lt;em&gt;normal maps&lt;/em&gt; for the two houses in the above video, and use them to calculate the lighting:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/dynamic-lighting-and-shadows/mansionNormals.png&quot; alt=&quot;mansion normals&quot;&gt;&lt;/p&gt;
&lt;p&gt;For starters, you can see the actual house sprite has no shading drawn into it. Then the normal map encodes the normals for each pixel into a color. A vector needs to be specified with (x,y,z) coordinates, and an image has r,g and b values. So the encoding into the image is easy to do. Take the front face of the house, which is facing due south giving the normal vector values of &lt;code&gt;[x:0, y:0.5, z:0]&lt;/code&gt;. RGB values are positive, so need to shift the values up by 0.5 to force everything positive:  &lt;code&gt;[x:0.5, y:1, z:0.5]&lt;/code&gt;. And RGB values are normally represented as bytes, so multiply each value by &lt;code&gt;255&lt;/code&gt;, yielding (rounded up): &lt;code&gt;[x:128, y:255, z:128]&lt;/code&gt;, or in other words, this bright green &lt;span style=&quot;display:inline-block; width: 30px; height: 15px; background-color: rgb(128, 255, 128)&quot;&gt;&amp;nbsp;&lt;/span&gt;, the same green in the normal map image.&lt;/p&gt;
&lt;p&gt;With our normals in tow, we’re ready to have the graphics card do its magic. My game is using &lt;a href=&quot;http://www.impactjs.com&quot;&gt;ImpactJS&lt;/a&gt;, which is very compatibile with &lt;a href=&quot;https://github.com/gameclosure/webgl-2d&quot;&gt;WebGL2D&lt;/a&gt; Using WebGL2D, it was easy to add an additional fragment shader to implement the lighting:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-c&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;ifdef&lt;/span&gt; GL_ES&lt;/span&gt;
  precision highp &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;;
&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;

varying vec2 vTextureCoord;
uniform sampler2D uSampler;
uniform vec3 lightDirection;
uniform vec4 lightColor;

&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;{
  &lt;span class=&quot;comment&quot;&gt;// pull the normal vector out of the texture&lt;/span&gt;
  vec4 rawNormal = texture2D(uSampler, vTextureCoord);

  &lt;span class=&quot;comment&quot;&gt;// if the alpha channel is zero, then don't do lighting here&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(rawNormal.a == &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;) {
    gl_FragColor = vec4(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);
  } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {

    &lt;span class=&quot;comment&quot;&gt;// translate from 0 to 1 to -.5 to .5&lt;/span&gt;
    rawNormal -= &lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;;

    &lt;span class=&quot;comment&quot;&gt;// figure out how much the lighting influences this pixel&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; lightWeight =
      dot(normalize(rawNormal.xyz), normalize(lightDirection));

    lightWeight = max(lightWeight, &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;);

    &lt;span class=&quot;comment&quot;&gt;// and drop the pixel in&lt;/span&gt;
    gl_FragColor = lightColor * lightWeight;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Couple final points here. This is &lt;em&gt;per fragment lighting&lt;/em&gt;, which is a bit different from per vertex lighting. Since the vertices are completely
irrelevant in 2D rendering (just 4 vertices to drop the texture into the scene), have no choice but to do per fragment lighting. No problem, per
fragment lighting is more accurate anyway. Also this shader is only rendering the light itself. It assumes the main sprite has already been drawn. I have to admit I am cheating a little bit, as I am setting my &lt;code&gt;lightColor&lt;/code&gt; to a dark grey, and not sending out light but actually darkness. This
is because lighting the pixels up makes them looked washed out. There are ways to resolve this, but for now I’m cheating a smidge.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/dynamic-lighting-and-shadows/lightingExamples.png&quot; alt=&quot;lighting examples&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;part-two-casting-shadows&quot;&gt;part two: casting shadows&lt;/h2&gt;
&lt;p&gt;Casting shadows in 3D environments is a well solved problem, using techniques like &lt;a href=&quot;http://en.wikipedia.org/wiki/Ray_tracing_(graphics&quot;&gt;raytracing&lt;/a&gt;) or &lt;a href=&quot;http://en.wikipedia.org/wiki/Shadow_mapping&quot;&gt;shadow mapping&lt;/a&gt; casting shadows in the scene is pretty easy to accomplish. I struggled to find an implementation in my 2D environment that I was happy with. I think I came up with a good solution, but for sure it has drawbacks.&lt;/p&gt;
&lt;p&gt;In short, draw a line from a fragment (aka pixel) in the scene to the sun and see if anything gets in the way. if something does, that pixel is in the shade, else it’s in the sun. In the end it’s actually pretty simple.&lt;/p&gt;
&lt;p&gt;The shader will get &lt;code&gt;xyAngle&lt;/code&gt; and &lt;code&gt;zAngle&lt;/code&gt; passed into it, indicating where the sun is. Since the sun is so far away, these two angles are the same for all pixels, as sunrays are effectively parallel to each other.&lt;/p&gt;
&lt;p&gt;The other key piece of info the shader receives is the &lt;em&gt;height map&lt;/em&gt; for the world. This height map indicates how tall everything is, buildings, trees, etc. If a pixel is occupied by a building, then that pixel’s value will be something like 10, to indicate that building is 10 pixels tall.&lt;/p&gt;
&lt;p&gt;So starting at the current pixel and using &lt;code&gt;xyAngle&lt;/code&gt;, we move over just a bit towards the sun in the x/y direction. Using the height map, we figure out how tall the pixel is at this location. If the pixel here is the same height or lower, then we keep moving towards the sun until we find a pixel that is taller than the current pixel.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/dynamic-lighting-and-shadows/xyAngle.gif&quot; alt=&quot;xy angle&quot;&gt;&lt;/p&gt;
&lt;p&gt;Once we find a pixel that has some height to it, we need to see if it’s tall enough to block the sun. Using &lt;code&gt;zAngle&lt;/code&gt;, we determine how tall this pixel needs to be to block the sun:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/dynamic-lighting-and-shadows/zAngle.gif&quot; alt=&quot;z angle&quot;&gt;&lt;/p&gt;
&lt;p&gt;If it is tall enough, we are done, this pixel is in the shade. Otherwise we keep going. Eventually we give up and declare the pixel to be in the sun (currently I have that hard coded to 100 steps, which so far is working well)&lt;/p&gt;
&lt;p&gt;Here is the code for the shader in simplified/pseudo form&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-c&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; alpha = &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;;

  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(isInShadow()) {
    alpha = &lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;;
  }
  gl_FragColor = vec4(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, alpha);
}

&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isInShadow&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; height = getHeight(currentPixel);
  &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; distance = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;

  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;; ++i) {
    distance += moveALittle();

    vec2 otherPixel = getPixelAt(distance);
    &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; otherHeight = getHeight(otherPixel);

    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(otherHeight &amp;gt; height) {
      &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; traceHeight = getTraceHeightAt(distance);
      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(traceHeight &amp;lt;= otherHeight) {
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;
      }
    }
  }
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And here is the whole shebang:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-c&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;ifdef&lt;/span&gt; GL_ES&lt;/span&gt;
  precision highp &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;;
&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;function&quot;&gt;vec2 &lt;span class=&quot;title&quot;&gt;extrude&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(vec2 other, &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; angle, &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; length)&lt;/span&gt; &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; x = length * &lt;span class=&quot;built_in&quot;&gt;cos&lt;/span&gt;(angle);
  &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; y = length * &lt;span class=&quot;built_in&quot;&gt;sin&lt;/span&gt;(angle);

  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; vec2(other.x + x, other.y + y);
}

&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getHeightAt&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(vec2 texCoord, &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; xyAngle, &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; distance,
    sampler2D heightMap)&lt;/span&gt; &lt;/span&gt;{

  vec2 newTexCoord = extrude(texCoord, xyAngle, distance);
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; texture2D(heightMap, newTexCoord).r;
}

&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getTraceHeight&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; height, &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; zAngle, &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; distance)&lt;/span&gt; &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; distance * &lt;span class=&quot;built_in&quot;&gt;tan&lt;/span&gt;(zAngle) + height;
}

&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isInShadow&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; xyAngle, &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; zAngle, sampler2D heightMap,
    vec2 texCoord, &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; step)&lt;/span&gt; &lt;/span&gt;{

  &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; distance;
  &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; height;
  &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; otherHeight;
  &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; traceHeight;

  height = texture2D(heightMap, texCoord).r;

  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;; ++i) {
    distance = step * &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;(i);
    otherHeight = getHeightAt(texCoord, xyAngle, distance, heightMap);

    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(otherHeight &amp;gt; height) {
      traceHeight = getTraceHeight(height, zAngle, distance);
      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(traceHeight &amp;lt;= otherHeight) {
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;
      }
    }
  }

  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;
}

varying vec2 vTextureCoord;
uniform sampler2D uHeightMap;
uniform &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; uXYAngle;
uniform &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; uZAngle;
uniform &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; uMaxShadowSteps;
uniform &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; uTexStep;

&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; alpha = &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;;

  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(isInShadow(uXYAngle, uZAngle, uHeightMap, uMaxShadowSteps,
     vTextureCoord, uTexStep)) {

    alpha = &lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;;
  }

  gl_FragColor = vec4(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, alpha);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;uTexStep&lt;/code&gt; uniform is how far to move over each time we check a nearby pixel. This is set to either &lt;code&gt;1/heightMap.width&lt;/code&gt; or &lt;code&gt;1/heightMap.height&lt;/code&gt; before invoking the shader. This is because textures in OpenGL are typically mapped from 0 to 1, so the inverse is how far to move to get to the next pixel.&lt;/p&gt;
&lt;h3 id=&quot;shadow-wrap-up&quot;&gt;shadow wrap up&lt;/h3&gt;
&lt;p&gt;Truth be told there are some minor details I’m leaving out in the above code, but the core idea is definitely there. One major problem with this approach is each pixel in the scene can only have one height. A good example of how this is a limitation is trees. I can tell the engine to cast a really low, long shadow for a tree, but the trunk will never show up in the shadow. This is because the overhang area at the bottom of the leaves is not recorded in the height map.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/dynamic-lighting-and-shadows/shadow1.png&quot; alt=&quot;shadow example 1&quot;&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/dynamic-lighting-and-shadows/shadow2.png&quot; alt=&quot;shadow example 2&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;translations&quot;&gt;Translations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://habrahabr.ru/post/272427/&quot;&gt;Russian Translation&lt;/a&gt;, translated by &lt;a href=&quot;https://twitter.com/Fen1kz&quot;&gt;Fen1kz&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Still Waking up at 5am to Code?</title>
      <link>http://mattgreer.org/articles/still-waking-up-at-5am/</link>
      <pubDate>Sun, 26  Aug 2012 17:00:00 -0700</pubDate>
      <guid isPermaLink="true">http://mattgreer.org/articles/still-waking-up-at-5am/</guid>
      <author></author>
      <description>&lt;p&gt;Back in January I posted an article about &lt;a href=&quot;http://mattgreer.org/articles/waking-up-at-5am-to-code/&quot;&gt;waking up at 5am to code&lt;/a&gt;. It seemed to really strike a chord with a lot of people. Lately I’ve been getting a handful of emails asking me if I still do this and where I’m at with it now. So I thought I’d post a quick follow up.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;kept-it-solidly-up-for-about-6-weeks&quot;&gt;Kept it solidly up for about 6 weeks&lt;/h2&gt;
&lt;p&gt;Waking up early to tackle personal projects is a good strategy. But it’s not without its cost. I managed to maintain it quite solidly for about 6 weeks. From there I found myself not waking up early on most weekend days for another few weeks. The early hours and extra load do take their toll, nothing is free unfortunately. I could feel my stress levels rising and overall just an extra level of feeling worn out. But how my day job is going is a factor there too.&lt;/p&gt;
&lt;h2 id=&quot;anything-to-show-for-all-this-&quot;&gt;Anything to show for all this?&lt;/h2&gt;
&lt;p&gt;My early hours were mostly dedicated to writing a little JavaScript game engine. One thing I did with it was create an animation &lt;a href=&quot;http://yaysarahandmatt.org&quot;&gt;celebrating my wedding engagement&lt;/a&gt;. I’ve also been working on a game using the engine, an intro/preview of which can be found &lt;a href=&quot;/media/labAdder/index.html&quot;&gt;here&lt;/a&gt;. I was pretty happy with my results and overall felt pretty darn productive.&lt;/p&gt;
&lt;h2 id=&quot;sporadic-from-there-on&quot;&gt;Sporadic from there on&lt;/h2&gt;
&lt;p&gt;I still do wake up early, but now it’s more in “spurts”. I will go for a week or two doing it, then take a break for a while. I also find my desire to do it depends on where I’m at inspiration wise. Lately I’ve also been getting more involved with local hack nights. Having a set aside “event” to do personal hacking I am finding is also a good way to accomplish productivity. Being both out of the house and the office to focus on personal projects really amps the focus for me. Experimenting and finding what works best is key.&lt;/p&gt;
&lt;h2 id=&quot;also-finding-time-for-down-time&quot;&gt;Also finding time for down time&lt;/h2&gt;
&lt;p&gt;My personality is very work oriented. I have a hard time relaxing and almost always want to be pushing forward on something. But lately I’ve been forcing myself to take certain weekends and 100% do nothing but relaxing, non-taxing things. They really do wonders for rejuvination and balance. Probably more than I’ve ever realized in the past. Related to the topic at hand, I have also woken up early just to then go for a nice long walk or watch morning news shows. I think my experiments in trying to hyper increase productivity have shown that down time is equally as important.&lt;/p&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Waking Up at 5am to Code</title>
      <link>http://mattgreer.org/articles/waking-up-at-5am-to-code/</link>
      <pubDate>Sun, 22 Jan 2012 16:00:00 -0800</pubDate>
      <guid isPermaLink="true">http://mattgreer.org/articles/waking-up-at-5am-to-code/</guid>
      <author></author>
      <description>&lt;p&gt;I’m currently experimenting with waking up at 5am to work on personal projects before heading to work.&lt;/p&gt;
&lt;p&gt;Someone on Hacker News once mentioned they do this, and it stuck in the back of my head ever since. I’ve been at this for two weeks thus far.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;the-basic-idea&quot;&gt;The basic idea&lt;/h2&gt;
&lt;p&gt;At 5am I jump out of bed and code for two hours, then get ready for work. I do this every day, including weekends. I maintain an online Kanban board which I groom/prep in the evenings while watching TV, to ensure I am ready to be productive the next morning.&lt;/p&gt;
&lt;h2 id=&quot;enjoying-the-work-is-key&quot;&gt;Enjoying the work is key&lt;/h2&gt;
&lt;p&gt;It’s 5am &lt;em&gt;and&lt;/em&gt; I will be also putting in a full day’s work afterwards. Not being stressed out or frustrated during this time is essential. I ensure this by working on truly personal projects that interest me and I have complete control over. I’m only two weeks in but so far no signs of getting worn out, in fact quite the opposite. It’s been pretty invigorating.&lt;/p&gt;
&lt;h2 id=&quot;advantages&quot;&gt;Advantages&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;At 5am things are very quiet and serene. Nobody is on IM, no one is texting or emailing me. I find myself very focused. I am also aware of the cost of these two hours, which motivates me to be even more to focus and use them efficiently. So far, I have found I am very productive.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I have a well defined slot to do my work, and I am guaranteed at least 12 hours a week, typically 14-18 (how much I put in on a weekend can vary). This is very different from before when I’d try to carve time out of my life at the expense of other things. The strong structure has led to better time usage overall.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I am only going to bed one hour earlier than I used to. To do this I do sacrifice a bit of reading time, and I get between 7-8 hours of sleep. But I’m (so far) ok with all of this&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;My evenings – and much of my weekend – are more relaxing. I can enjoy myself and unwind and not have a little voice in the back of my head telling me I really should be pushing forward on the game. If I want to work in the evening I can. But so far I am finding ~12 really good hours a week to be enough to propel my project forward at a comfortable pace. The itch to create is well satiated.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;I am finding myself turning off the project thinking and daydreaming and being more in the moment for the rest of my day.&lt;/li&gt;
&lt;li&gt;When I head off to work I’m more awake, and feeling good about already having been productive.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;disadvantages&quot;&gt;Disadvantages&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;At first waking up at 5am was very painful. But I am adjusting.&lt;/li&gt;
&lt;li&gt;I may be wearing myself down more than I realize, and may not really know that for a while yet&lt;/li&gt;
&lt;li&gt;I can’t listen to music as effectively as I’d like, lest I wake my girlfriend up. This may become an advantage though…&lt;/li&gt;
&lt;li&gt;This could interfere with weekend plans. I do doubt it though, I’m not so young anymore and not really a late nighter these days.&lt;/li&gt;
&lt;li&gt;Getting in a pinch and not making much progress during these early morning sessions may be a drag on the rest of the day. Hopefully that never happens, but it may eventually.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;why-the-weekend-too-&quot;&gt;Why the weekend too?&lt;/h2&gt;
&lt;p&gt;I find I am more likely to stick with something like this if I do it every day. Letting myself sleep in on the weekends makes me more likely to then sleep in on Monday too. It can unravel from there. That’s just my personality though.&lt;/p&gt;
&lt;h2 id=&quot;the-kanban-board&quot;&gt;The Kanban board&lt;/h2&gt;
&lt;p&gt;I’ve really become a fan of Kanban, even when just working by myself. I do feel this is a key element in this. It keeps me focused, forces me to break down my tasks into managable chunks (ideally finishable in 2 hours), and makes sure I am never messing around trying to think of where to go next.&lt;/p&gt;
&lt;p&gt;I got requests to see a screenshot of my board, so here it is (click for full size):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/waking-up-at-5am-to-code/kanban.png&quot; alt=&quot;kanban&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;other-ideas&quot;&gt;Other ideas&lt;/h2&gt;
&lt;p&gt;First I plan to see if this will really stick. I am optimisic it will. If it does, I think might look into a coffee pot that can have a nice cup waiting for me right when I get up. &lt;/p&gt;
&lt;p&gt;I gave the standing desk idea a shot a while back and ultimately went back to sitting. But maybe for two hours in the morning standing would be more ideal? Worth looking into.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Yokul - Google Charts Reimplemented in a Local JS Canvas</title>
      <link>http://mattgreer.org/articles/yokul/</link>
      <pubDate>Sat, 04 Jun 2011 17:00:00 -0700</pubDate>
      <guid isPermaLink="true">http://mattgreer.org/articles/yokul/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;https://github.com/city41/yokul&quot;&gt;Yokul&lt;/a&gt; is a little JavaScript experiment I’ve been playing with in my free time. Using the same query string you’d normally send to the &lt;a href=&quot;http://code.google.com/apis/chart/image/&quot;&gt;Google Image Chart API&lt;/a&gt; a local chart is created on the client using an HTML5 canvas.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;yokul.css&quot;&gt;&lt;/link&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;/js/yokul/yokul.min.js&quot;&gt;&lt;/script&gt;

&lt;div class=&quot;charts&quot;&gt;
&lt;img src=&quot;http://chart.apis.google.com/chart?chxr=2,-5,100&amp;chxs=0,676767,10.5,0,l,676767&amp;chxt=y,x&amp;chbh=24,2,1&amp;chs=400x245&amp;cht=bvs&amp;chco=BBCCED,FF9900,3366CC&amp;chds=0,95,0,100,0,105&amp;chd=t:44,33,30,20,30,40,30,20,55|0,0,40,0,40,0,40,0,0|0,20,0,67,0,20,0,63,0&amp;chdl=water|orange stripes|blue stripes&amp;&amp;chma=|40,40&amp;chtt=Chart+Fish+Done+With+Google&amp;chts=0C3890,20.5&amp;chxl=0:|deep|shallow|air&quot; /&gt;&lt;br&gt;
&lt;img data-src=&quot;http://chart.apis.google.com/chart?chxr=2,-5,100&amp;chxs=0,676767,10.5,0,l,676767&amp;chxt=y,x&amp;chbh=24,2,1&amp;chs=400x245&amp;cht=bvs&amp;chco=BBCCED,FF9900,3366CC&amp;chds=0,95,0,100,0,105&amp;chd=t:44,33,30,20,30,40,30,20,55|0,0,40,0,40,0,40,0,0|0,20,0,67,0,20,0,63,0&amp;chdl=water|orange stripes|blue stripes&amp;&amp;chma=|40,40&amp;chtt=Chart+Fish+Done+With+Yokul&amp;chts=0C3890,20.5&amp;chxl=0:|deep|shallow|air&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Here is a &lt;a href=&quot;/articles/yokul/VerticalBar.min.html&quot;&gt;page of charts&lt;/a&gt; to play with&lt;/p&gt;
&lt;h2 id=&quot;advantages&quot;&gt;Advantages&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Open source and completely runs on the client, no data is sent to any third parties&lt;/li&gt;
&lt;li&gt;If your site has a lot of charts, this will save a lot of bandwidth. Granted it’s saving Google’s and your user’s bandwidth so you may not care&lt;/li&gt;
&lt;li&gt;It can render many charts much faster than Google can, limited only by the power of the user’s machine&lt;/li&gt;
&lt;li&gt;No need to send Google Charts a POST for complex chart definitions, Yokul will take a query string of any length&lt;/li&gt;
&lt;li&gt;Some of Google’s limitations like chart size are not present in Yokul. Want to make a 10,000x10,000 pixel chart? Have at it&lt;/li&gt;
&lt;li&gt;No internet connection is required for Yokul to work&lt;/li&gt;
&lt;li&gt;Animating a Yokul chart will be pretty easy to do and is high on the list of things to do next&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;disadvantages&quot;&gt;Disadvantages&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Your user must have JavaScript enabled and a modern browser to see the chart&lt;/li&gt;
&lt;li&gt;Yokul, so far, doesn’t come even close to implementing all of Google Charts and if it ever does, it’ll be a while&lt;/li&gt;
&lt;li&gt;Not a trivial drop in replacement, to use Yokul you do need to change your markup a bit (see below)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;yokul-depends-on&quot;&gt;Yokul Depends On&lt;/h2&gt;
&lt;p&gt;A browser having Canvas. That’s about it. No other JavaScript library is required.&lt;/p&gt;
&lt;h2 id=&quot;what-works-so-far&quot;&gt;What Works So Far&lt;/h2&gt;
&lt;p&gt;So far just vertical bar charts (grouped, stacked and overlapped) are implemented. There are some parameters that are not implemented, others that have bugs and others that are only partially implemented. See the &lt;a href=&quot;/VerticalBar.min.html&quot;&gt;sample page&lt;/a&gt; for a decent overview of what Yokul is currently capable of&lt;/p&gt;
&lt;h2 id=&quot;quick-start&quot;&gt;Quick Start&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Grab &lt;a href=&quot;https://github.com/city41/yokul/raw/master/min/yokul.min.js&quot;&gt;yokul.min.js&lt;/a&gt; and reference it&lt;/li&gt;
&lt;li&gt;Change all the &lt;code&gt;src&lt;/code&gt; attributes in your Google Chart images to &lt;code&gt;data-src&lt;/code&gt; attributes&lt;/li&gt;
&lt;li&gt;Call &lt;code&gt;YOKUL.convertAllImages()&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;showing-debug-info-and-errors&quot;&gt;Showing debug info and errors&lt;/h2&gt;
&lt;p&gt;Yokul is very early at this point, you will certainly run into issues. Mostly you’ll find some of your favorite chart types and/or parameters aren’t implemented yet. Yokul will let you know if you set up a debug output div for it.&lt;/p&gt;
&lt;p&gt;Create a div on your page that Yokul can write to. Tell Yokul where this div is with &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;  YOKUL.debugOutput = &lt;span class=&quot;string&quot;&gt;&quot;idOfYourDebugDiv&quot;&lt;/span&gt;;
  YOKUL.logOutput = { &lt;span class=&quot;attr&quot;&gt;info&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;warning&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;error&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ideally do this before you do anything else with Yokul. Here is the debug output from creating the above chart:&lt;/p&gt;
&lt;div id=&quot;debugOutputDiv&quot;&gt;&lt;/div&gt;

&lt;p&gt;You will need to set up some CSS styles for this output to look nice, view the source of this page to see my styles&lt;/p&gt;&lt;/p&gt;
&lt;h2 id=&quot;converting-just-one-image&quot;&gt;Converting just one image&lt;/h2&gt;
&lt;p&gt;If &lt;code&gt;convertAllImages()&lt;/code&gt; is too course for you, you can call &lt;code&gt;YOKUL.chartCreator.create(id, [query])&lt;/code&gt;. Where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;id&lt;/strong&gt; is a DOM id of an img element. This img’s src will be set to the generated chart image&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;query&lt;/strong&gt; the chart query string you’d normally send to Google. This is optional and if not provided Yokul will try and find the query string in the img element&lt;/li&gt;
&lt;/ul&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
  YOKUL.debugOutput = &quot;debugOutputDiv&quot;;
  YOKUL.logOutput = { info: false, warning: true, error: true };
  YOKUL.convertAllImages();
&lt;/script&gt;


</description>
    </item>
  </channel>
</rss>